-- -*- mode: lua; coding: windows-1251-dos -*-

-- File:        UI_MAIN_MENU.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Lasd edit:	18.01.2006
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.9
---------------------------------------------------------------
-- Mod: OGSE
-- Additions:			OGSE Team
-- Menu design:			KamikaZze, Tlar
-- Menu sound theme:	KamikaZze
-- Menu art:			mvn78
-- Version:				6.9.3
---------------------------------------------------------------

---------------------->> CoP style load mod
local press_any_key_on_start = false
local sound_volume_eff,sound_volume_music = 0,0
----------------------<< CoP style load mod

local mod_ver = sys_ini:r_string_wq("mod_ver", "mod_ver") 

class "main_menu" (CUIScriptWnd)
function main_menu:__init() super()
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
	--log1("--main_menu:__init()")
end
function main_menu:__finalize()
	--log1("~~main_menu:__finalize()")
end

local screen_aspect_ratio = 1.34

function main_menu:InitBackground(xml)
	local time = level.present() and level.get_time_hours() or tonumber(os.date("%H", os.time()))
	local night = time <= 8 or time >= 20
	self.bg_st = xml:InitStatic("back_movie", self)
	self.bg_st:InitTexture(night and "ui\\ui_mm_night_back" or "ui\\ui_mm_main_back")
	local tex_orig_w = screen_aspect_ratio * 1024 * 0.5625
	local tex_orig_x_offs = (1024 - tex_orig_w) / 2
	self.bg_st:SetOriginalRect(tex_orig_x_offs, 0, tex_orig_w, 768);
end

function main_menu:InitControls()
	local screen = device()
	screen_aspect_ratio = screen.width / screen.height

	self:Init(0,0,1024,768)	

    self.xml = CScriptXmlInit()
    self.xml:ParseFile("ui_mm_main.xml")

	self:InitBackground(self.xml)
	---------------------------------------------------------------
	if level.present() and not press_any_key_on_start then
		self.start_btn = self.xml:InitStatic("txt_press_any_key", self)
        return
	end
	---------------------------------------------------------------
    self.xml:InitStatic("background", self)
    self.shniaga = self.xml:InitMMShniaga("shniaga_wnd",self);
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")	
	
	local _ver = self.xml:InitStatic("static_version",self)
	local ogse_ver = self.xml:InitStatic("ogsm_version",self)
	local mm = _G.main_menu.get_main_menu()
	_ver:SetText("S.T.A.L.K.E.R. v" .. mm:GetGSVer())
	ogse_ver:SetText("OGS Evolution "..mod_ver)
end

function main_menu:Update()
	CUIScriptWnd.Update(self)
	local screen = device()
	local new_ar = screen.width / screen.height
	if new_ar ~= screen_aspect_ratio then
		screen_aspect_ratio = new_ar
		self:InitBackground(self.xml)
	end
end

function main_menu:Show(f)
	self.shniaga:SetVisibleMagnifier(f)
end


function main_menu:InitCallBacks()
	-- new game
	self:AddCallback("btn_novice",		ui_events.BUTTON_CLICKED,				self.OnButton_new_novice_game,		self)
	self:AddCallback("btn_stalker",		ui_events.BUTTON_CLICKED,				self.OnButton_new_stalker_game,		self)
	self:AddCallback("btn_veteran",		ui_events.BUTTON_CLICKED,				self.OnButton_new_veteran_game,		self)
	self:AddCallback("btn_master",		ui_events.BUTTON_CLICKED,				self.OnButton_new_master_game,		self)
	-- options																											
	self:AddCallback("btn_options",     ui_events.BUTTON_CLICKED,				self.OnButton_options_clicked,		self)
	-- load																												
	self:AddCallback("btn_load",        ui_events.BUTTON_CLICKED,				self.OnButton_load_clicked,			self)
	-- save																												
	self:AddCallback("btn_save",		ui_events.BUTTON_CLICKED,				self.OnButton_save_clicked,			self)
	-- quit																												
	self:AddCallback("btn_quit",		ui_events.BUTTON_CLICKED,				self.OnButton_quit_clicked,			self)
	self:AddCallback("btn_quit_to_mm",	ui_events.BUTTON_CLICKED,				self.OnButton_disconnect_clicked,	self)
	self:AddCallback("btn_ret",			ui_events.BUTTON_CLICKED,				self.OnButton_return_game,			self)
	self:AddCallback("btn_lastsave",	ui_events.BUTTON_CLICKED,				self.OnButton_last_save,			self)
	self:AddCallback("btn_credits",		ui_events.BUTTON_CLICKED,				self.OnButton_credits_clicked,		self)
	-- message box																										
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_OK_CLICKED,		self.OnMsgOk,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_CANCEL_CLICKED,	self.OnMsgCancel,					self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes,						self)
	self:AddCallback("msg_box",     ui_events.MESSAGE_BOX_NO_CLICKED,		self.OnMsgNo,						self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED,self.OnMessageQuitGame,				self)
	self:AddCallback("msg_box",			ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,	self.OnMessageQuitWin,				self)
end
function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:OnMsgYes()
	if 	self.mbox_mode == 1 then
		self:LoadLastSave()	
	end
	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	self:close_menu()
	cmd("load_last_save")
end

function main_menu:OnButton_last_save()
	if not alife() then
		self:LoadLastSave()
		return
	end

	self.mbox_mode = 1
	self.message_box:Init("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnMessageQuitGame()
	cmd("disconnect")
end

function main_menu:OnMessageQuitWin()
	cmd("quit")
end

function main_menu:OnButton_return_game()
	ogse_rebind_key.unbind_key()
	self:close_menu()
end

function main_menu:OnButton_new_novice_game()
	cmd("g_game_difficulty", "gd_novice")
	self:StartGame()	
end

function main_menu:OnButton_new_stalker_game()
	cmd("g_game_difficulty", "gd_stalker")
	self:StartGame()
end

function main_menu:OnButton_new_veteran_game()
	cmd("g_game_difficulty", "gd_veteran")
	self:StartGame()
end

function main_menu:OnButton_new_master_game()
	cmd("g_game_difficulty", "gd_master")
	self:StartGame()
end

function main_menu:StartGame()
	if alife() then
		cmd("disconnect")	
	end
	cmd("start", "server(all/single/alife/new)", "client(localhost)")
	self:close_menu()
end

function main_menu:OnButton_save_clicked()
	if not self.save_dlg then
		self.save_dlg = ui_save_dialog.save_dialog()
		self.save_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.save_dlg, true)
	--self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if not self.opt_dlg then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end
	ogse_rebind_key.rebind_key()
	self.opt_dlg:UpdateControls()
	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	--self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if not self.load_dlg then
		self.load_dlg = ui_load_dialog.load_dialog()
		self.load_dlg.owner = self
	end
	
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	--self:GetHolder():start_stop_menu(self, true) --new
	self:Show(false)
end

function main_menu:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	local bind = dik_to_bind(dik)
------------------->> CoP style load mod
	if self.start_btn and dik ~= DIK_keys.DIK_GRAVE then
		self:OnButton_return_game()
		return true
	end
-------------------<< CoP style load mod
	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
		if dik == DIK_keys.DIK_ESCAPE then
			if ogse.check_game() then
				ogse_rebind_key.unbind_key()
				self:close_menu()
			end
		elseif dik == DIK_keys.DIK_N then --personal_test
			xpcall( function() dofile(getFS():update_path("$game_scripts$", "personal_test.lua")) end, log3)
		elseif dik == DIK_keys.DIK_S then --Тестовый спавн
			xpcall( function() dofile(getFS():update_path("$game_scripts$", "test_spawn.lua")) end, log3)
		elseif dik == DIK_keys.DIK_F3 then --Показать текущие координаты
			if ogse.check_game() then
				utils2.show_coordinates()
			end
		elseif dik == DIK_keys.DIK_P then --SDATA
			if ogse.check_game() then
				if not _sdata.GlobalEnable then
					_sdata.subscribe()
				else
					_sdata.unsubscribe()
				end
			end
		end
	end
	return true
end

-------------------->> CoP style load mod
class "show_start_screen" (ogse_qt.quick_timer)
function show_start_screen:__init(time)
	self.counter = 0
end
function show_start_screen:condition()
	self.counter = self.counter + 1
	return self.counter == 2
end
function show_start_screen:action()
	cmd("main_menu", 1)
	hide_start_screen():start()
end

class "hide_start_screen" (show_start_screen)
function hide_start_screen:__init(time) super()
end
function hide_start_screen:action()
	get_console():hide()
	press_any_key_on_start = true
	cmd("snd_volume_eff", sound_volume_eff) 
	cmd("snd_volume_music", sound_volume_music)
	sound_volume_eff,sound_volume_music = nil,nil
end

function start()
	if has_alife_info("storyline_actor_start") then
		show_start_screen():start()
		--
        sound_volume_eff = get_con_float("snd_volume_eff")
        cmd("snd_volume_eff", 0)
        sound_volume_music = get_con_float("snd_volume_music")
        cmd("snd_volume_music", 0)
		press_any_key_on_start = false
	else
		press_any_key_on_start = true
	end
end
--------------------<< CoP style load mod

function main_menu:close_menu() --KRodin: закрывать меню только этой функцией!!! Здесь куски меню отпускаются для сборщика мусора! Предотвращение адовых утечек памяти!
	ui_load_dialog.load_wnd = nil
	self.load_dlg = nil
	ui_save_dialog.save_wnd = nil
	self.save_dlg = nil
	ui_mm_opt_main.opt_wnd = nil
	self.opt_dlg = nil
	cmd("main_menu", "off")
end
