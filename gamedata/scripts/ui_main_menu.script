-- Главное меню для OGSR.
-- KRodin (c) 2018
-- Исправил утечки памяти из-за неудаления частей меню после его закрытия (см. main_menu:close_and_delete_menu())

---------------------->> CoP style load mod
local press_any_key_on_start = false
local sound_volume_eff, sound_volume_music = 0, 0
----------------------<< CoP style load mod


class "main_menu" (CUIScriptWnd)
function main_menu:__init() super()
	self.mbox_mode = 0
	self:InitControls()
	self:InitCallBacks()
end

function main_menu:__finalize()
	--log1("--main_menu:__finalize() called!")
end

local screen_aspect_ratio = 1.34
function main_menu:InitBackground()
	local time = level.present() and level.get_time_hours() or tonumber(os.date("%H", os.time()))
	local night = time <= 8 or time >= 20
	self.bg_st:InitTexture(night and "ui\\ui_mm_night_back" or "ui\\ui_mm_main_back")
	local multiplier = 0.5625
	if screen_aspect_ratio > 2 then -- ultra-wide
		multiplier = 0.40
	end
	local tex_orig_w = screen_aspect_ratio * 1024 * multiplier
	local tex_orig_x_offs = (1024 - tex_orig_w) / 2
	self.bg_st:SetOriginalRect(tex_orig_x_offs, 0, tex_orig_w, 768);
end

function main_menu:InitControls()
	local screen = device()
	screen_aspect_ratio = screen.width / screen.height

	self:Init(0, 0, 1024, 768)			  
	self.xml = CScriptXmlInit()
	self.xml:ParseFile("ui_mm_main.xml")
	--
	self.bg_st = self.xml:InitStatic("back_movie", self)
	self:InitBackground()
	---------------------------------------------------------------
	if level.present() and not press_any_key_on_start then
		self.start_btn = self.xml:InitStatic("txt_press_any_key", self)
        return
	end
	---------------------------------------------------------------
    self.xml:InitStatic("background", self)
	--
	self.shniaga = self.xml:InitMMShniaga("shniaga_wnd", self)

	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box, "msg_box")	

	local _ver = self.xml:InitStatic("static_version",self)
	local ogse_ver = self.xml:InitStatic("ogsm_version",self)
	local mm = _G.main_menu.get_main_menu()
	_ver:SetText("S.T.A.L.K.E.R. v" .. mm:GetGSVer())
	local mod_ver = sys_ini:r_string_wq("mod_ver", "mod_ver") 
	mod_ver = mod_ver:gsub("%_", " ")
	ogse_ver:SetText("OGS Evolution "..mod_ver)
end

function main_menu:Update()
	CUIScriptWnd.Update(self)
	local screen = device()
	local new_ar = screen.width / screen.height
	if new_ar ~= screen_aspect_ratio then
		screen_aspect_ratio = new_ar
		self:InitBackground(self.xml)
	end
end

function main_menu:Show(...)
	self.shniaga:SetVisibleMagnifier(...)
end

function main_menu:InitCallBacks()
	-- new game
	self:Connect("btn_novice",  ui_events.BUTTON_CLICKED, self.StartGame, self, "gd_novice")
	self:Connect("btn_stalker", ui_events.BUTTON_CLICKED, self.StartGame, self, "gd_stalker")
	self:Connect("btn_veteran", ui_events.BUTTON_CLICKED, self.StartGame, self, "gd_veteran")
	self:Connect("btn_master",  ui_events.BUTTON_CLICKED, self.StartGame, self, "gd_master")
	-- options																											
	self:AddCallback("btn_options", ui_events.BUTTON_CLICKED, self.OnButton_options_clicked, self)
	-- load																												
	self:AddCallback("btn_load", ui_events.BUTTON_CLICKED, self.OnButton_load_clicked, self)
	-- save																												
	self:AddCallback("btn_save", ui_events.BUTTON_CLICKED, self.OnButton_save_clicked, self)
	-- quit																												
	self:AddCallback("btn_quit", ui_events.BUTTON_CLICKED, self.OnButton_quit_clicked, self)
	self:AddCallback("btn_quit_to_mm", ui_events.BUTTON_CLICKED, self.OnButton_disconnect_clicked, self)
	self:AddCallback("btn_lastsave", ui_events.BUTTON_CLICKED, self.OnButton_last_save, self)
	self:AddCallback("btn_credits", ui_events.BUTTON_CLICKED, self.OnButton_credits_clicked, self)
	-- message box																										
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMsgOk, self)
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_CANCEL_CLICKED, self.OnMsgCancel, self)
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_YES_CLICKED, self.OnMsgYes, self)
	self:AddCallback("msg_box", ui_events.MESSAGE_BOX_NO_CLICKED, self.OnMsgNo, self)
	self:Connect("msg_box", ui_events.MESSAGE_BOX_QUIT_GAME_CLICKED, cmd, "disconnect")
	self:Connect("msg_box", ui_events.MESSAGE_BOX_QUIT_WIN_CLICKED,  cmd, "quit")
	self:AddCallback("btn_ret", ui_events.BUTTON_CLICKED, self.close_and_delete_menu, self)
end

function main_menu:OnMsgOk()
	self.mbox_mode = 0
end

function main_menu:OnMsgCancel()
	self.mbox_mode = 0
end

function main_menu:LoadLastSave()
	cmd("load_last_save")
	self:close_and_delete_menu()
end

function main_menu:OnMsgYes()
	if self.mbox_mode == 1 then
		self:LoadLastSave()	
	end

	self.mbox_mode = 0
end

function main_menu:OnMsgNo()
	self.mbox_mode = 0
end


function main_menu:OnButton_last_save()
	if not alife() then
		self:LoadLastSave()
		return
	end

	self.mbox_mode = 1
	self.message_box:Init("message_box_confirm_load_save")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_credits_clicked()
	game.start_tutorial("credits_seq")
end

function main_menu:OnButton_quit_clicked()
	self.message_box:Init("message_box_quit_windows")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:OnButton_disconnect_clicked()
	self.message_box:Init("message_box_quit_game")
	self.message_box:SetText("ui_mm_quit_game_message")
	self:GetHolder():start_stop_menu(self.message_box, true)
end

function main_menu:StartGame( difficulty )
	cmd("g_game_difficulty "..difficulty)
	if alife() then
		cmd("disconnect")	
	end
	cmd("start server(all/single/alife/new)")
	self:close_and_delete_menu()
end

function main_menu:OnButton_save_clicked()
	if not self.save_dlg then
		self.save_dlg = ui_mm_save_load_dialog.save_load_dialog( true )
		self.save_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.save_dlg)
	--
	self:GetHolder():start_stop_menu(self.save_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_load_clicked()
	if not self.load_dlg then
		self.load_dlg = ui_mm_save_load_dialog.save_load_dialog()
		self.load_dlg.owner = self
	end
	--
	ui_mm_save_load_dialog.fill_savedgames_list(self.load_dlg)
	--
	self:GetHolder():start_stop_menu(self.load_dlg, true)
	self:Show(false)
end

function main_menu:OnButton_options_clicked()
	if not self.opt_dlg then
		self.opt_dlg = ui_mm_opt_main.options_dialog()
		self.opt_dlg.owner = self
	end

	self:GetHolder():start_stop_menu(self.opt_dlg, true)
	self:Show(false)
end

function main_menu:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self, dik, keyboard_action)

	if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
------------------->> CoP style load mod
		if self.start_btn and dik ~= DIK_keys.DIK_GRAVE then
			self:close_and_delete_menu()
-------------------<< CoP style load mod
		elseif dik_to_bind(dik) == key_bindings.kQUIT then
			if ogse.check_game() then
				self:close_and_delete_menu()
			end
		elseif dik == DIK_keys.DIK_N then --personal_test
			xpcall(function() dofile(getFS():update_path("$game_scripts$", "personal_test.lua")) end, log1)
		elseif dik == DIK_keys.DIK_S then --Тестовый спавн
			xpcall( function() dofile(getFS():update_path("$game_scripts$", "test_spawn.lua")) end, log1)
			self:close_and_delete_menu()
		elseif dik == DIK_keys.DIK_F3 then --Показать текущие координаты
			if ogse.check_game() then
				utils2.show_coordinates()
			end
		elseif dik == DIK_keys.DIK_W then -- настройка прицела
			self:setup_wpn_position()
			self:close_and_delete_menu()
		elseif dik == DIK_keys.DIK_P then --SDATA
			if ogse.check_game() then
				if not _sdata.GlobalEnable then
					_sdata.subscribe()
				else
					_sdata.unsubscribe()
				end
			end
		end
	end

	return true
end


-------------------->> CoP style load mod
class "show_start_screen" (ogse_qt.quick_timer)
function show_start_screen:__init(time)
	self.counter = 0
end
function show_start_screen:condition()
	self.counter = self.counter + 1
	return self.counter == 2
end
function show_start_screen:action()
	cmd("main_menu", 1)
	hide_start_screen():start()
end

class "hide_start_screen" (show_start_screen)
function hide_start_screen:__init(time) super()
end
function hide_start_screen:action()
	get_console():hide()
	press_any_key_on_start = true
	cmd("snd_volume_eff", sound_volume_eff) 
	cmd("snd_volume_music", sound_volume_music)
	sound_volume_eff, sound_volume_music = nil, nil
end

function start()
	if has_alife_info("storyline_actor_start") then
		show_start_screen():start()
		--
        sound_volume_eff = get_con_float("snd_volume_eff")
        cmd("snd_volume_eff", 0)
        sound_volume_music = get_con_float("snd_volume_music")
        cmd("snd_volume_music", 0)
		press_any_key_on_start = false
	else
		press_any_key_on_start = true
	end
end
--------------------<< CoP style load mod


--k01jan: настройка прицела худового оружия (Rastaman_VIP74)
function main_menu:setup_wpn_position()
	local wchud = get_hud():GetCustomStatic("hud_cross_wpn")
	if get_con_bool("hud_adjust_mode") then
		--news_manager.send_tip(db.actor, "%c[255,240,155,25]ОТКЛючаем настройку прицеливания", nil, nil, 10000)
		cmd("hud_adjust_mode 0")
		cmd("hud_adjust_value 0.0")
		cmd("bind lstrafe kA")
		cmd("bind rstrafe kD")
		cmd("bind forward kW")
		cmd("bind back kS")
		cmd("bind llookout kQ")
		cmd("bind rlookout kE")
		cmd("bind jump kSPACE")
		cmd("bind torch kL")
		cmd("bind inventory kI")
		if wchud then
			get_hud():RemoveCustomStatic("hud_cross_wpn")
		end
	else
		--news_manager.send_tip(db.actor, "%c[255,240,155,25]ВКЛючаем настройку прицеливания", nil, nil, 10000)
		cmd("hud_adjust_mode 1")
		cmd("hud_adjust_value 0.001")
		cmd("bind lstrafe kNUMPAD4")
		cmd("bind rstrafe kNUMPAD6")
		cmd("bind forward kNUMPAD8")
		cmd("bind back kNUMPAD5")
		cmd("bind llookout kNUMPAD7")
		cmd("bind rlookout kNUMPAD9")
		cmd("bind jump kNUMPADENTER")
		cmd("bind torch kMULTIPLY")
		cmd("bind inventory kDIVIDE")
		if wchud then
			get_hud():RemoveCustomStatic("hud_cross_wpn")
		end
		get_hud():AddCustomStatic("hud_cross_wpn")
	end
end


--Для закрытия меню использовать только этот специальный метод!
function main_menu:close_and_delete_menu()
	-- Удаляем в движке каллбеки, в которых хранятся ссылки на объекты оконных классов (которые добавляются в AddCallback(..., self),
	-- иначе части меню не удалятся и будут висеть в памяти до перезапуска LUA (до загрузки сейва, например)
	-- Так же, надо обнулить висячие ссылки (self.*_dlg), иначе сборщик мусора эти объекты не удалит. Да, это странно, но это так.
	if self.save_dlg then self.save_dlg:ClearCallbacks() self.save_dlg = nil end
	if self.load_dlg then self.load_dlg:ClearCallbacks() self.load_dlg = nil end
	if self.opt_dlg then
		if self.opt_dlg.dlg_video_adv then self.opt_dlg.dlg_video_adv:ClearCallbacks() end
		self.opt_dlg:ClearCallbacks() self.opt_dlg = nil
	end
	self:ClearCallbacks() --main_menu удаляется движком, но для надёжности и ему каллбеки удалим.
	--
	cmd("main_menu off")
end
