--[[------------------------------------------------------------------------------------------------
База данных живых онлайновых объектов, зон и рестрикторов, актёра
Чугай Александр
--------------------------------------------------------------------------------------------------]]

zone_by_name        = {}
quest_zones         = {}
sl_by_name          = {}
storage             = {}
sound               = {}
actor               = nil
actor_proxy         = actor_proxy.actor_proxy()
heli                = {}
cars                = {}
camp_storage        = {}
story_by_id	        = {}
smart_terrain_by_id = {}
trader              = nil
--info_restr          = {}
delayed             = {}
strn_by_respawn     = {}
dead_bodies         = {}
creature            = {} -- true - человек, false - животное (исключая торговца)
doors               = {}
last_deadman        = nil

artefacts			= {}


function add_obj( obj )
	if IsStalker(obj) then
		creature[obj:id()] = true
	elseif IsMonster(obj) then
		creature[obj:id()] = false
	end
end

function del_obj( obj )
	--ASSERT(obj:clsid() ~= -1, "obj:clsid() ~= -1 [%s]", obj:name())
	storage[obj:id()] = nil
	creature[obj:id()] = nil
	for id,npc in pairs(storage) do
		if npc.enemy and npc.enemy:id() == obj:id() then npc.enemy = nil end
	end	
end

--[[
--Вызывалось из апдейта ogse.script:
function()
-- Обновление баг-таймера
	if time_global() > buggy_timer then
		for k, v in pairs(db.creature) do
			local obj = level.object_by_id(k)
			local sobj = alife():object(k)
			if obj and not obj:alive() and v and obj:name() ~= "single_player" and sobj.offline_dead == 0 then
				log1("!!UNREGISTERED BODY FOUND - TO DELAYED "..obj:id().." "..obj:name())
				db.actor:give_game_news("ВНИМАНИЕ! Обнаружен потенциально повреждённый неразрегистрированный труп! Объект: "..obj:character_name().." ИД: "..obj:id().." Профиль: "..obj:profile_name().." Будет произведена попытка разрегистрации и удаления объекта!", "ui\\ui_iconsTotal", Frect():set(498,47,83,47),7000, 20000)
				if not db.delayed[obj:id()] then db.delayed[obj:id()] = obj:id() end
			end
		end
		buggy_timer = buggy_timer + math.random(20000,25000)
	end
-- Обновление баг-таймера
	db.remove_delayed() -- Удаление глючных трупов с битым пстором
end,

function protected_loot(object)
	object:iterate_inventory(death_manager.keep_item)
end

function remove_delayed()
		for k,v in pairs(delayed) do
			if v ~= 0 then
				local obj = level.object_by_id(v)
				if obj then
					local storage_npc = storage[obj:id()]
					if storage_npc then
						if storage_npc.death then
							xr_logic.issue_event(obj, storage_npc.death, "death_callback", obj, obj)
						end		
						if storage_npc.active_section then
							xr_logic.issue_event(obj, storage_npc[storage_npc.active_scheme], "death_callback", obj, obj)
						end
						sr_territory.issue_event(obj, "death_callback", obj, obj)
						smart_terrain.on_death(obj:id())
						local drop, err_msg = pcall(protected_loot, obj)
						if not drop then
							log1("!!ERROR: DB remove_delayed pcall FAIL "..obj:name().." reason: "..tostring(err_msg))
							db.actor:give_game_news(game.translate_string("deadman_fail_warning_text"), "ui\\ui_iconsTotal", Frect():set(498,47,83,47),7000, 20000)
						end						
						obj:set_patrol_extrapolate_callback(nil)
						obj:set_callback(callback.hit, nil)
						obj:set_callback(callback.death, nil)
						obj:set_callback(callback.on_item_drop, nil)
						obj:set_callback(callback.on_item_take, nil)
						obj:set_callback(callback_ex.entity_alive_before_hit, nil)
						obj:set_callback(callback.sound, nil)
						delayed[k] = 0
						break						
					else
						if not ogse.is_quest_npc(obj) then
							s_obj = alife():object(v)
							if s_obj then
								alife():release(s_obj, true)
							end
							delayed[k] = 0
							break
						end
						delayed[k] = 0
					end
				end
			else
				delayed[k] = nil
			end
		end
end]]

function add_zone( zone )
	zone_by_name[zone:name()] = zone
	add_obj( zone )
end

function del_zone( zone )
	zone_by_name[zone:name()] = nil
	del_obj( zone )
end


function add_sl( sl )
	sl_by_name[sl:name()] = sl
	add_obj( sl )
end

function del_sl( sl )
	sl_by_name[sl:name()] = nil
	del_obj( sl )
end


function add_actor( obj )
	actor = obj
	actor_proxy:net_spawn( obj )
	add_obj( obj )
end

function del_actor()
	del_obj( actor )
	actor_proxy:net_destroy()
	actor = nil
end


function add_heli(obj)	
	heli[obj:id()] = obj
end	
function del_heli(obj)
	heli[obj:id()] = nil
end	

-- Транспорт
function add_car(obj)
	cars[obj:id()] = obj
end

function del_car(obj)
	cars[obj:id()] = nil
end

-- Регистрация всех квестовых зон на локации
function register_all_quest_zones()
	for id=1,65535 do
		local obj = alife():object(id)
		if obj then
			if obj:section_name() == "smart_terrain" then
				add_quest_zone( obj )
			end
		end
	end
end

function add_smart_terrain( obj )
	smart_terrain_by_id[obj.id] = obj
end

function del_smart_terrain( obj )
	smart_terrain_by_id[obj.id] = nil
end

function add_quest_zone( obj )
	quest_zones[obj:name()] = obj.id
end

function del_quest_zone( obj )
	quest_zones[obj:name()] = nil
end