-- -*- mode: lua; coding: windows-1251-dos -*-
------------------------------------------------------------
class "timeout_timer" ( ogse_qt.quick_timer )
function timeout_timer:__init( delay, fun, ... ) super( delay )
  self.fun = fun
  self.args = { ... }
end
function timeout_timer:taction()
  self.fun( unpack( self.args ) )
end

function timeout( delay, fun, ... )
  local tmout = timeout_timer( delay, fun, ... )
  --
  local d = debug.getinfo(2)
  tmout.script_name = d.short_src:gsub('^.-([^\\]+)%.[^.]+$', '%1') .. "." .. d.linedefined
  --
  tmout:start()
  return tmout
end


class "condition_timer" ( ogse_qt.quick_timer )
function condition_timer:__init( fun1, fun2, fun3 )
  self.fun1 = fun1
  self.fun2 = fun2
  self.fun3 = fun3
end
function condition_timer:condition()
  return self.fun1()
end
function condition_timer:action()
  self.fun2()
end
function condition_timer:update()
  if self.fun3 then self.fun3() end
end

function wait_condition( ... )
  local tmout = condition_timer( ... )
  --
  local d = debug.getinfo(2)
  tmout.script_name = d.short_src:gsub('^.-([^\\]+)%.[^.]+$', '%1') .. "." .. d.linedefined
  --
  tmout:start()
  return tmout
end


class "exec_on_update_timer" ( ogse_qt.quick_timer )
function exec_on_update_timer:__init( fun, ... )
  self.fun  = fun
  self.args = { ... }
end
function exec_on_update_timer:condition()
  return not ogse_sleep_mgr.is_sleep_active()
end
function exec_on_update_timer:action()
  self.fun( unpack( self.args ) )
end

function exec_on_update( ... )
  local tmout = exec_on_update_timer( ... )
  --
  local d = debug.getinfo(2)
  tmout.script_name = d.short_src:gsub('^.-([^\\]+)%.[^.]+$', '%1') .. "." .. d.linedefined
  --
  tmout:start()
  return tmout
end
-------------------------------------------------------------


function remove_quotes( s ) --Вырезать все кавычки из строки
  return string.gsub( s, "[«»\"\']", "" )
end

function strip_quotes( s ) --Срезать кавычки с начала и с конца строки
  --return string.gsub( s, '^[«»\"\']*(.-)[«»\"\']*$', '%1') --Срезает ВСЕ кавычки слева и справа.
  return string.gsub( s, '^[«»\"\'](.*)[«»\"\']$', '%1') --Срезает самую первую кавычку слева и самую последнюю кавычку справа.
end


------------------------------------------------------------------------
function attach( sm )
  sm:subscribe({ signal = "se_monster_on_before_register", fun = this.se_on_before_register })
  sm:subscribe({ signal = "se_stalker_on_before_register", fun = this.se_on_before_register })
end

local is_creating_free_mob = false
function se_on_before_register( sobj )
  if is_creating_free_mob then
    is_creating_free_mob = false
    set_none_smart_terrain( sobj )
  end
end

function set_none_smart_terrain( sobj )
  local ini = sobj:spawn_ini()
  if ini:section_exist( "smart_terrains" ) then return end
  ini.readonly = false
  ini:w_bool( "smart_terrains", "none", true )
  sobj:save_spawn_ini()
end

-- Создать свободного моба, которого не затянет в какой-нибудь гулаг.
function create_free_mob( ... )
  is_creating_free_mob = true
  return alife():create( ... )
end
------------------------------------------------------------------------


local ini_file_cache = {}
function cached_ini_file( fname )
  if not ini_file_cache[ fname ] then
    ini_file_cache[ fname ] = ini_file( fname )
  end
  return ini_file_cache[ fname ]
end


--Можно использовать эту функцию, если по каким-то причинам недоступен метод alife():use_ai_locations(sobj, false)
function clear_used_ai_locations( sobj )
  local pk = get_netpk( sobj, 1 )
  ASSERT( ( pk and pk:isOk() ), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  data.object_flags = bit_and(
    data.object_flags, bit_not( object_flags.UsedAI_Locations )
  ) -- снять флаг flUsedAI_Locations
  pk:set( data )
end


function clear_useful_for_ai( sobj )
  local pk = get_netpk( sobj, 1 )
  ASSERT( ( pk and pk:isOk() ), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  data.object_flags = bit_and(
    data.object_flags, bit_not( object_flags.UsefulForAI )
  )
  pk:set( data )
end


class "cached_condlist"
function cached_condlist:__init( parsed, ttl )
  self.parsed = parsed
  self.ttl    = ttl
end
function cached_condlist:pick_section_from_condlist( actor, npc )
  if ( not self.cached_time ) or self.cached_time < time_global() then
    self.cached_res  = xr_logic.pick_section_from_condlist(
      actor, npc, self.parsed
    )
    self.cached_time = time_global() + self.ttl
  end
  return self.cached_res
end


-- создать костер для лагеря сталкеров
-- Пример:
-- local p = patrol( "yan_st_stalker3_kamp_1" )
-- dsh.create_campfire( p:point( 0 ), p:level_vertex_id( 0 ), p:game_vertex_id( 0 ), "objects\\koster_palki_nastil", 0.7 )
function create_campfire( pos, lvid, gvid, vis, lamp_height )
  -- кострище
  if vis then
    local sobj = alife():create( "physic_object", pos, lvid, gvid )
    local pk   = get_netpk( sobj, 1 )
    ASSERT( pk and pk:isOk(), "can't read netpacket of %s", sobj:name() )
    local data = pk:get()
    data.visual_name = vis
    data.custom_data:setString(
      "[collide]\nignore_static\n"
    )
    data.physic_type = 3
    data.mass        = 10
    data.fixed_bones = "bone01"
    pk:set( data )
  end

  -- аномалия
  ogse_anomaly.spawn_anomaly(
    "zone_flame_small",
     pos, lvid, gvid,
     { shtype = 0, radius = 0.1, center = { 0, 0, 0 } }
  )

  -- лампочка
  local sobj = alife():create(
    "lights_hanging_lamp_campfire",
     vector():set( pos.x, pos.y + ( lamp_height or 0 ), pos.z ), lvid, gvid
  )
  local pk = get_netpk( sobj, 1 )
  ASSERT( pk and pk:isOk(), "can't read netpacket of %s", sobj:name() )
  local data = pk:get()
  local props = {
    [ "main_color"          ] = tonumber( "fffab807", 16 ),
    [ "main_brightness"     ] = 0.7,
    [ "main_color_animator" ] = "koster",
    [ "main_range"          ] = 6,
    [ "light_flags"         ] = tonumber( "2a", 16 ),
    [ "health"              ] = 100,
    [ "main_virtual_size"   ] = 0.1,
    [ "ambient_radius"      ] = 10,
    [ "ambient_power"       ] = 0.40000001,
    [ "main_cone_angle"     ] = 2.0943952,
    [ "glow_radius"         ] = 0.69999999,
  }
  for k, v in pairs( props ) do
    data[ k ] = v
  end
  pk:set( data )
end


function copy_hit_data( hd, t )
  for _, k in ipairs({
    "power", "dir", "who_id", "weapon_id", "bone_id", "impulse", "hit_type",
  }) do
    t[ k ] = hd[ k ]
  end
  return t
end


function my_name_is_strelok() --Вызывается по инфопоршню esc_find_doctor_done
  db.actor:get_inventory_owner():SetName( "Стрелок" )
  local sobj   = alife():object( db.actor:id() )
  local trader = sobj:get_trader()
  trader.character_name = "Стрелок"
end


function find_all_vertexes_in_radius( around_pos, radius )
  local dist        = radius
  local new_dir     = vector():set(
    math.random( -1000, 1000 ) / 1000, 0, math.random( -1000, 1000 ) / 1000
  )
  new_dir:normalize()
  local ai_step     = 0.7 -- шаг AI сетки
  local math_pi_180 = 180 / math.pi
  local pi2         = math.pi * 2
  local seen, vertexes = {}, {}
  while dist >= ai_step do
    -- итератор вращения направления
    local rotate_angle = math.asin( ai_step / dist )
    local cur_angle, cur_dir = 0, new_dir
    while math.abs( cur_angle ) < pi2 do
      -- ищем вертекс
      -- нужная нам позиция
      local pos     = vector():mad( around_pos, cur_dir, dist )
      local vert_ok = level.vertex_id( pos )
      if vert_ok ~= 4294967295 and not seen[ vert_ok ] then
        table.insert( vertexes, vert_ok )
        seen[ vert_ok ] = true
      end
      -- поворачиваем направление поиска
      cur_angle = cur_angle + rotate_angle
      cur_dir   = vector_rotate_y( cur_dir, rotate_angle * math_pi_180 )
    end
    dist = dist - ai_step
  end
  local vert_ok = level.vertex_id( around_pos )
  if vert_ok ~= 4294967295 and not seen[ vert_ok ] then
    table.insert( vertexes, vert_ok )
    seen[ vert_ok ] = true
  end
  return vertexes
end


function is_torch_enabled()
  if db.actor:alive() then
    local torch = db.actor:item_in_slot( 9 )
    if torch and torch:is_torch() then
      torch = get_torch_obj( torch )
      return torch.on
    end
  end
end
