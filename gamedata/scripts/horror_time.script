--/ horror_time.script /--
--/ Psi-blowout scheme /--
--/ OGS Evolution Team 2010 /--
--/ version 1.3 (25/02/2011) /--

--/ Схема пси-выброса /--
------------------------------------------------------------------------------------------
local horror_flag = sys_ini:r_s32("options","horror_flag")
local psyzones_flag = sys_ini:r_s32("options","psyzones_flag")

function attach(sm)
	if horror_flag == 1 then
		sm:subscribe({ signal = "on_update",	fun = this.horror_process, queued = true })
	end
end
------------------------------------------------------------------------------------------

-- Служебные функции пси-выброса --

-- Звук
-- Описание звуковых тем
local snd_factor = 300

local horror_background_theme = {
	{t_name = "horror_background_1", min_snd = 300, max_snd = 400, t_type = "random"}
}
local horror_sfx_theme = {
	{t_name = "horror_snd_fx_1", min_snd = 10, max_snd = 100, t_type = "random"}
}
local aviable_horror_theme = {
	{t_name = "horror_radio_voise_1", min_snd = 150, max_snd = 200, t_type = "seq"},
	{t_name = "horror_radio_voise_2", min_snd = 150, max_snd = 200, t_type = "seq"},
	{t_name = "horror_radio_voise_3", min_snd = 200, max_snd = 250, t_type = "seq"},
	{t_name = "horror_radio_voise_4", min_snd =  50, max_snd = 100, t_type = "seq"},
	{t_name = "horror_radio_voise_5", min_snd =  75, max_snd = 125, t_type = "seq"}
}

local horror_sound = {}
local horror_sound_object = {}

-- Инициализируем звуковые темы пси-выброса
function initialize_actor_horror_sound()
	local snd_theme
	local table_size = table.getn(horror_background_theme)
	if table_size >= 2 then
		snd_theme = horror_background_theme[math.random(table.getn(horror_background_theme))]
	else
		snd_theme = horror_background_theme[1]
	end
-- log1("Добавляем тему бэкграунда в таблицу")
	add_actor_horror_sound(snd_theme)

	table_size = table.getn(horror_sfx_theme)
	if table_size >= 2 then
		snd_theme = horror_sfx_theme[math.random(table.getn(horror_sfx_theme))]
	else
		snd_theme = horror_sfx_theme[1]
	end
-- log1("Добавляем тему спецэффектов в таблицу")
	add_actor_horror_sound(snd_theme)

	table_size = table.getn(aviable_horror_theme)
	if table_size >= 2 then
		snd_theme = aviable_horror_theme[math.random(table.getn(aviable_horror_theme))]
	else
		snd_theme = aviable_horror_theme[1]
	end
-- log1("Добавляем тему атмосферных звуков в таблицу")
	if math.random() > 0.5 then
		add_actor_horror_sound(snd_theme)
	end
end

-- Добавляем в таблицу звуковые темы пси-выброса
function add_actor_horror_sound(theme)
	if theme == nil then return end		
		table.insert(horror_sound, theme)
-- log1("Тема добавлена в таблицу")
end

-- Воспроизводим звуки пси-выброса
function play_actor_horror_sound()

	if table.getn(horror_sound) == 0 then
-- log1("Таблица звуков пси-выброса пуста! Генерируем новый набор тем")
		initialize_actor_horror_sound()
	end

-- log1("Пробегаемся по таблице звуков пси-выброса")
	for theme_id,s_theme in pairs(horror_sound) do
		if horror_sound[theme_id].idle == nil and not string.find(horror_sound[theme_id].t_name, "background") then
			horror_sound[theme_id].idle = math.random(horror_sound[theme_id].min_snd*snd_factor, horror_sound[theme_id].max_snd*snd_factor)
			horror_sound[theme_id].begin = time_global()
		end
		if horror_sound[theme_id].begin == nil or time_global() - horror_sound[theme_id].begin >= horror_sound[theme_id].idle then
			horror_sound[theme_id].begin = time_global()
-- log1("Получение звукового объекта")
			local sound = xr_sound.get_sound_object(horror_sound[theme_id].t_name, horror_sound[theme_id].t_type)
			if sound ~= nil then
-- log1("Воспроизведение, " .. horror_sound[theme_id].t_name)
				sound:play(db.actor, 0, sound_object.s2d)
				horror_sound[theme_id].idle = math.random(horror_sound[theme_id].min_snd*snd_factor, horror_sound[theme_id].max_snd*snd_factor)
				local length = sound:length()
				if length > horror_sound[theme_id].idle then
					horror_sound[theme_id].idle = length
				end
				if horror_sound_object[sound] == nil then
					horror_sound_object[sound] = sound
				end
			end
		end
	end

end

-- Останавливаем воспроизводимые звуки пси-выброса
function stop_all_horror_sound_object()
-- log1("Останавливаем воспроизведение всех звуков пси-выброса")
	for k,v in pairs(horror_sound_object) do
		if v:playing() then
			v:stop()
		end
	end
end
function clear_all_horror_sound_object()
-- log1("Очищаем таблицу звуковых объектов")
	horror_sound_object = {}

		for theme_id,s_theme in pairs(horror_sound) do
			local theme_name = horror_sound[theme_id].t_name
-- log1("Удаление темы " .. theme_name .. " из библиотеки")
			xr_sound.sound_object_by_theme[theme_name] = nil
		end

-- log1("Очищаем таблицу задействованных звуковых тем")
	horror_sound = {}
end
-- Звук

-- Фантомы
local phantom_idle
local phantom_time = 0
local phantom_max = 10					-- max phantoms
local phantom_spawn_probability = 0.30	-- spawn probability (0..1)
local phantom_spawn_radius = 30.0		-- average radius 30.0m +-15m
local phantom_fov = 90					-- ширина сектора перед глазами актёра, в котором могут рождаться фантомы

-- Фантом-генератор
function generate_horror_phantom()
	if phantom_idle == nil then
		phantom_idle = math.random(2000,5000)
	end
	if time_global() - phantom_time > phantom_idle then
-- log1("Запрос на спавн фантома")
		phantom_time = time_global()
		phantom_idle = math.random(7000,15000)
		if math.random() < phantom_spawn_probability then
-- log1("Попытка спавна фантома")
			if phantom_manager:phantom_count() < phantom_max then
				local radius = phantom_spawn_radius * ( math.random()/2.0+0.5 )
				local ang = phantom_fov * math.random() - phantom_fov * 0.5
				local dir = vector_rotate_y( db.actor:direction(), ang )

-- log1("Спавн фантома")
				phantom_manager.spawn_phantom( db.actor:position():add( dir:mul(radius) ) )
			end
		end
	end
end
-- Фантомы

-- Постэффекты
-- Описание постэффектов
local a_ppe_id = 1986
local m_ppe_factor_min = 0.1
local m_ppe_factor_max = 0.5
local m_ppe_factor_dif = 0.7
local m_ppe_factor_delta = 0.1

local main_posteffects = {
	{ppe_name = "acidic_mine1.ppe", ppe_id = 1987},
	{ppe_name = "thermal1.ppe", ppe_id = 1988},
	{ppe_name = "psy_antenna.ppe", ppe_id = 1989}
}

local horror_ppe_object = nil

-- Воспроизведение постэффектов
function play_actor_horror_posteffects()

	if horror_ppe_object == nil then
		horror_ppe_object = {}
		for k,v in pairs(main_posteffects) do
-- log1("Получение m_ppe-объекта")
			local m_ppe_name = nil
			local m_ppe_id = nil
			m_ppe_name = v.ppe_name
			m_ppe_id = v.ppe_id
			if m_ppe_name ~= nil and m_ppe_id ~= nil then
-- log1("Воспроизведение, " .. m_ppe_name)
				level.add_pp_effector(m_ppe_name, m_ppe_id, true)
				if horror_ppe_object[m_ppe_id] == nil then
					horror_ppe_object[m_ppe_id] = {}
					horror_ppe_object[m_ppe_id].status = true
					horror_ppe_object[m_ppe_id].factor = math.random(m_ppe_factor_min, m_ppe_factor_max)
					horror_ppe_object[m_ppe_id].dif = m_ppe_factor_dif
				end
			end
		end
		-- level.add_pp_effector("teleport.ppe", a_ppe_id, false)
		-- level.set_pp_effector_factor(a_ppe_id, 0.2)
	end

	if horror_ppe_object ~= nil then
		for k,v in pairs(horror_ppe_object) do
			if v.status == true then
-- log1("Меняем интенсивность m_ppe-эффекта "..k)
				if math.random() >= v.dif then
					v.factor = v.factor + m_ppe_factor_delta
				else
					v.factor = v.factor - m_ppe_factor_delta
				end
				if v.factor < m_ppe_factor_min then
					v.factor = m_ppe_factor_min
					v.dif = v.dif - 0.3
				elseif v.factor > m_ppe_factor_max then
					v.factor = m_ppe_factor_max
					v.dif = v.dif + 0.3
				end
-- log1("Граница разделителя составила "..v.dif)
-- log1("Интенсивность m_ppe-эффекта составила "..v.factor)
				level.set_pp_effector_factor(k, v.factor, 0.3)
			end
		end
	end

end

-- Остановка постэффектов
function stop_actor_horror_posteffects()
-- log1("Останавливаем запущенные m_ppe-объекты")
	if horror_ppe_object ~= nil then
		for k,v in pairs(horror_ppe_object) do
			if k ~= nil and v.status == true then
-- log1("Остановка ppe "..k)
				level.remove_pp_effector(k)
				horror_ppe_object[k] = nil
			end
		end
		horror_ppe_object = nil
	end
end
-- Постэффекты

-- Общие
function horror_process_fault()
	if has_alife_info("horror_time") and tonumber(ogse.load_variable("horror_time_end_time", 0)) == 0 then
		return true
	end
	return false
end

function horror_reset()
	log1("Horror-time process faulted! Resetting!")
	horror_stop()
end
-- Общие
-- Служебные функции пси-выброса --

-- Алгоритм пси-выброса
-- Стартуем пси-выброс
function horror_begin()
-- log1("Инициализация старта пси-выброса")
	if horror_flag ~= 1 then return end
	if ogsm_psyzones and (psyzones_flag == 1) then 
		ogsm_psyzones.psy_blow_flags()
		ogsm_psyzones.spawn_psy()
	end
	ogse.save_variable("horror_time_end_time", game.time()+math.random(25,50)*10000*ogse.game_time_factor)
	db.actor:give_info_portion("horror_time")
	-- заполняем таблицу звуков пси-выброса
	initialize_actor_horror_sound()
	-- заполняем таблицу звуков пси-выброса
end

-- Процедура пси-выброса
local premeter_time = time_global() + 100

function horror_process()
-- log1("Вызов пси-выброса")

	if horror_process_fault() then
		horror_reset()
		return
	end

	local uptime = time_global()
	if uptime < premeter_time then return end
	premeter_time = uptime + 100

	if has_alife_info("horror_time") and db.actor:alive() then

		local horror_time_end_time = tonumber(ogse.load_variable("horror_time_end_time", 0))
		if game.time() > horror_time_end_time then
			horror_stop()
			level.add_pp_effector("teleport.ppe", a_ppe_id, false)
			level.set_pp_effector_factor(a_ppe_id, 0.2)
			return
		end
		if isIndoor(level.name()) then
			return
		end

-- Воспроизводим звуки пси-выброса
-- log1("Воспроизводим звуки пси-выброса")
		play_actor_horror_sound()
-- Воспроизводим звуки пси-выброса
-- Спавним фантомов
-- log1("Спавним фантомов")
		generate_horror_phantom()
-- Спавним фантомов
-- Воспроизводим постэффекты пси-выброса
-- log1("Воспроизводим постэффекты пси-выброса")
		play_actor_horror_posteffects()
-- Воспроизводим постэффекты пси-выброса

	elseif has_alife_info("horror_time") and (not db.actor:alive()) then
		stop_all_horror_sound_object()
		clear_all_horror_sound_object()
		stop_actor_horror_posteffects()
	end

end

function horror_stop()
	db.actor:disable_info_portion("horror_time")
	ogse.del_variable("horror_time_end_time")
	stop_all_horror_sound_object()
	clear_all_horror_sound_object()
	stop_actor_horror_posteffects()
end
-- Алгоритм пси-выброса

----------------------------------------------------------------
-- Horror time
----------------------------------------------------------------
----------------------------------------------------------------