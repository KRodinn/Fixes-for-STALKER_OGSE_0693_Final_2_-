-- -*- mode: lua; coding: windows-1251-dos -*-

-- File:        UI_SAVE_DIALOG.SCRIPT
-- Description: Save Dialog for STALKER
-- Created:     27.9.2004
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Copyright:   2004 GSC Game World
-- Version:     0.8

save_wnd = nil

class "save_item" (CUIListItemEx)
function save_item:__init() super()
	self:SetWndRect		(0,0,430,22)
	
	local ca = 255
	local cr = 216
	local cg = 186
	local cb = 140
	
	self.fn					= CUIStatic	()
	self.fn:SetAutoDelete	(true)
	self:AttachChild		(self.fn)
	self.fn:SetWndRect		(0,0,230,22)
	self.fn:SetText			("filename")
	self.fn:SetFont			(GetFontLetterica18Russian())
	self.fn:SetTextColor	(ca,cr,cg,cb)

	self.fage				= CUIStatic	()
	self.fage:SetAutoDelete	(true)
	self:AttachChild		(self.fage)
	self.fage:SetWndRect	(250,0,150,22)
	self.fage:SetText		("fileage")
	self.fage:SetFont		(GetFontLetterica16Russian())
	self.fage:SetTextColor	(ca,cr,cg,cb)
	--log1("--[ui_save_dialog.save_item.__init]")
end
function save_item:__finalize()
	--log1("--[ui_save_dialog.save_item.__finalize]")
end


class "save_dialog" (CUIScriptWnd)
function save_dialog:__init() super()	
	save_wnd = self
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
	--log1("--[ui_save_dialog.save_dialog.__init]")
end
function save_dialog:__finalize()
	--log1("~~[ui_save_dialog.save_dialog.__finalize]")
end

function save_dialog:FillList()
	local flist = getFS():file_list_open_ex( "$game_saves$", FS.FS_ListFiles, "*.sav" )
	local f_cnt = flist:Size()

	flist:Sort(FS.FS_sort_by_modif_down)

	for	it=0, f_cnt-1 do
		local file = flist:GetAt(it)
		local fn_full = file:NameFull()
		local file_name = fn_full:sub(0, fn_full:len() - 4)
		local date_time = "[" .. file:ModifDigitOnly() .. "]"
		self:AddItemToList(file_name, date_time)
	end
end

function save_dialog:InitControls()
	self:Init(0,0,1024,768)
	
	self.list_file_font = GetFontMedium()
	self.list_date_font = GetFontMedium()
	
	local xml = CScriptXmlInit()
	xml:ParseFile("ui_mm_save_dlg.xml")
	
	xml:InitStatic("background",				self)	
	self.form = xml:InitStatic("form",			self)
	
	xml:InitStatic("form:caption",				self.form)

	local ctrl

	ctrl = xml:InitEditBox("form:edit", 		self.form)
	self:Register(ctrl, "edit_filename")
	
	xml:InitFrame("form:list_frame",			self.form)

	ctrl = xml:InitList("form:list", 			self.form)
	ctrl:ShowSelectedItem(true)
	self:Register(ctrl, "list_window")
		
	ctrl = xml:Init3tButton("form:btn_save",	self.form)	
	self:Register(ctrl, "button_ok")

	ctrl = xml:Init3tButton("form:btn_delete",	self.form)	
	self:Register(ctrl, "button_del")
	
	ctrl = xml:Init3tButton("form:btn_cancel",	self.form)
	self:Register(ctrl, "button_cancel")	
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")

	self.mbox_mode	= 0	
end

function save_dialog:InitCallBacks()
	self:AddCallback("button_ok",     ui_events.BUTTON_CLICKED, 			self.OnButton_ok_clicked)
	self:AddCallback("button_cancel", ui_events.BUTTON_CLICKED, 			self.OnButton_cancel_clicked)
	self:AddCallback("button_del",	  ui_events.BUTTON_CLICKED,             self.OnButton_del_clicked)

	self:AddCallback("message_box", ui_events.MESSAGE_BOX_YES_CLICKED,		self.OnMsgYes)
	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			self.OnListItemClicked)
end

function save_dialog:OnListItemClicked()
	local list_box		= save_wnd:GetListWnd("list_window")
	if list_box:GetSize()==0 then return end

	local edit_box		= save_wnd:GetEditBox("edit_filename")
	local item_id		= list_box:GetFocusedItem()
	local item			= list_box:GetItem(item_id)
	
	if item==nil then return end
	
	local item_text		= item.fn:GetText()
	edit_box:SetText	(item_text)
end

function save_dialog:OnMsgYes()
	if save_wnd.mbox_mode == 1 then
		save_wnd:SaveFile(save_wnd.new_save)
		
		--save_wnd:GetHolder():start_stop_menu(save_wnd.owner, true) --new
		save_wnd:GetHolder():start_stop_menu	(save_wnd,true)
		save_wnd.owner:Show						(true)
	elseif save_wnd.mbox_mode == 2 then
		save_wnd:delete_selected_file()
	end	
end

function save_dialog:OnButton_del_clicked()
	local list		= save_wnd:GetListWnd		("list_window")	
	if list:GetSize()==0 then return end

	local index		= list:GetSelectedItem	()
	
	if index == -1 then return end

	save_wnd.mbox_mode = 2
	save_wnd.message_box:Init("message_box_delete_file_name")		
	save_wnd:GetHolder():start_stop_menu(save_wnd.message_box, true)
end

function save_dialog:delete_selected_file()
	local list		= self:GetListWnd		("list_window")	
	if list:GetSize()==0 then return end
	local index		= list:GetSelectedItem	()
	
	if index == -1 then return end

	local item				= list:GetItem(index)
	local filename			= item.fn:GetText()
	
	ui_load_dialog.delete_save_game(filename)
	
	list:RemoveItem			(index)
	self:OnListItemClicked	()
end

function save_dialog:OnButton_ok_clicked()
	-- prepare message box
	local message_box	= save_wnd.message_box
	local main_frame	= save_wnd:GetFrameWindow("main_frame")	
	
	-- Get file name
	local edit_box		= save_wnd:GetEditBox("edit_filename")
	save_wnd.new_save		= edit_box:GetText()
	
	-- check for empty name
	if string.len(save_wnd.new_save) == 0 then
		save_wnd.mbox_mode = 0
		save_wnd.message_box:Init("message_box_empty_file_name")		
		save_wnd:GetHolder():start_stop_menu(save_wnd.message_box, true)
		return
	end
	
	-- check for match name
	local file_struct = getFS():exist("$game_saves$", save_wnd.new_save .. ".sav" )
	if file_struct then
		save_wnd.mbox_mode = 1
		save_wnd.message_box:Init("message_box_file_already_exist")
		save_wnd:GetHolder():start_stop_menu(save_wnd.message_box, true)
		return
	end

	save_wnd:SaveFile(save_wnd.new_save)

	--save_wnd:GetHolder():start_stop_menu	(save_wnd.owner, true) --new
	save_wnd:GetHolder():start_stop_menu	(save_wnd,true)
	save_wnd.owner:Show						(true)
end

function save_dialog:OnButton_cancel_clicked()
	--save_wnd:GetHolder():start_stop_menu	(save_wnd.owner, true) --new
	save_wnd:GetHolder():start_stop_menu	(save_wnd,true)
	save_wnd.owner:Show						(true)
end

function save_dialog:OnKeyboard( dik, keyboard_action )
  CUIScriptWnd.OnKeyboard( self, dik, keyboard_action )
  if keyboard_action == ui_events.WINDOW_KEY_PRESSED then
    if dik == DIK_keys.DIK_RETURN then
      self:OnButton_ok_clicked()
    elseif dik == DIK_keys.DIK_LSHIFT and GetLAlt() then
      local lang = get_input_language()
      if lang == 0 then
        set_input_language( 1 )
      else
        set_input_language( 0 )
      end
    elseif dik == DIK_keys.DIK_ESCAPE then
      self:OnButton_cancel_clicked()
    end
  end
  return true
end

function save_dialog:AddItemToList(file_name, date_time)	
	local _itm			= save_item()
	_itm.fn:SetText	(file_name)
	_itm.fage:SetText	(date_time)
	local list_box		= self:GetListWnd("list_window")
	list_box:AddItem	(_itm)	
end

function save_dialog:SaveFile(fileName)
	if fileName then
		local console = get_console()
		console:execute("save " .. fileName)
	end
end
