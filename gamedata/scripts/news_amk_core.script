-- copyright © AMK TEAM 2007-2008

local _debug = false
local prob = 1.5
local bInit = false

local timer_check_freq 			= 5 	-- Как часто проверять новости и выдавать сгруппированные, в игровых минутах

local timer_stalker_death 		= 3  	-- Сообщение о смерти сталкера
local timer_corpse 				= 40 -- 40 	-- Сообщение о найденом трупе
local timer_hear 				= 60  --15	-- Сообщение о услышанном
local timer_spawn 				= 90  --20 	-- Сообщение о увиденном
local timer_general 			= 60  --20	-- Прочее
local distance_close 			= 100	-- При каком расстоянии между обьектами считать их в одной группе
local timer_weather 			= 60	-- При изменнии погоды
local timer_heli 				= 10	-- При замеченном вертолетике

local timer_last_showed 		= 0 	-- Последняя показанная новость
local timer_show_freq 			= 5		-- Сколько ждать между новостями минимально (игровые минуты)
local time_factor 				= 1
local timer_next_blow 			= 0			-- Тамер до след. выброса
local timer_blow_showed			= 0			-- Последняя показанная новость о Выбросе
local timer_blow_freq 			= 10 * 60  	-- Как часто новости о Выбросе показывать (игровые минуты)
local timer_eternal_stalker 	= 0 		-- Последняя показанная новость о Семецком
local timer_eternal_stalker_freq = 24 * 60 	-- Как часто новости о Семецком показывать (игровые минуты)
local timer_random_spawn		= 0			-- Последняя новость со спавном
local timer_random_spawn_freq 	= 2 * 60 	-- Как часто генерить новости со спавном (игровые минуты)
local timer_def_spawn			= 0			-- Последняя новость с "красивым" спавном
local timer_def_spawn_freq 		= 3 * 60 	-- Как часто генерить новости с "красивым" спавном (игровые минуты)
local timer_heli_showed			= 0			-- Последняя новость про вертолетик
local timer_heli_freq			= 1 		-- Как часто показывать новости про вертолетик (игровые минуты)
local timer_alife_showed		= 0			-- Последнее событие в оффлайн
local timer_alife_freq 			= 15 		-- Как часто генерить события в оффлайн (игровые минуты)
local timer_weather_showed 		= 0 		-- Последняя новость о погоде
local timer_weather_freq 		= 5 * 60 	-- Как часто новости о погоде показывать (игровые минуты)
local timer_daytime_showed 		= 0 		-- Последняя новость о времени суток
local timer_daytime_freq 		= 5 * 60	-- Как часто новости о времени суток показывать (игровые минуты)

if (_debug == true) then 
	timer_blow_freq 			= 30	-- Как часто новости о Выбросе показывать (игровые минуты)
	timer_eternal_stalker_freq 	= 30	-- Как часто новости о Семецком показывать (игровые минуты)
	timer_random_spawn_freq 	= 60 	-- Как часто генерить новости со спавном (игровые минуты)
	timer_def_spawn_freq 		= 60 	-- Как часто генерить новости с "красивым" спавном (игровые минуты)
	timer_alife_freq 			= 5 	-- Как часто генерить события в оффлайн
	timer_weather_freq 			= 30	-- Как часто новости о погоде показывать (игровые минуты)
	timer_daytime_freq 			= 30	-- Как часто новости о времени суток показывать (игровые минуты)
	timer_show_freq 			= 1		-- Сколько ждать между новостями минимально (игровые минуты)
	prob = 1.5
end


local bSmarts = false
local dist_close = 100
local dist_seen = 200
local dist_far = 200
local dist_heli_seen = 400
local dist_hear_min = 50
local dist_hear_max = 400

local rel_enemy = -1000
local rel_friend = 1000

news_stack = {}
table_spawned = {}
table_killed_by_actor = {}
spammers = {}

function init() --- Запускается из ogse.on_game_load()
	if (bInit == false) then
		news_data.Init()
		time_factor = sys_ini:r_float("alife","time_factor")	    
		-- Реально в игре проходит timer_check_freq * 1000 * 60 * time_factor секунд
		-- Реально проходит х секунд
		local gtime = game_minutes()
		timer_last_showed = game_minutes()
		timer_alife_showed = game_minutes() - math.random(timer_alife_freq)
		rel_enemy,rel_friend = utils.cfg_get_number(sys_ini, "game_relations", "goodwill_enemy", nil, false, -1000), utils.cfg_get_number(sys_ini, "game_relations", "goodwill_friend", nil, false, 1000)
 		bInit = true
	end
end

function trace(fmt)
	    local msg = fmt
		local msg_no_ws = string.gsub(msg, "%s", "_")
		get_console():execute("load ~~~ "..msg_no_ws)
		--get_console():execute("flush")		
end

function flushlog()
	get_console():execute("flush")		
end

function do_debug(title, text)
	if _debug == true then
		local m_title = ""
		local m_text = ""
		if title then m_title = title end
		if text then m_text = text end
		do_news(m_text, m_title, nil, 15, "gen_info")
	end
	log1(title..": "..text)
end

function writelog(msg)
	if _debug == true then
		log1(script_name()..": "..tostring(msg))
	end
end

function on_death(victim, killer)
	if victim ~= nil then
		if IsStalker(victim) then
			local m_obj
			if isGameObject(victim) then
				m_obj = victim
			else
				m_obj = get_obj(victim.id)			
			end
			if m_obj then
				if IsNpcStalker(m_obj) then
					on_stalker_death(victim, killer)
				else
					on_npc_death(victim, killer)
				end
			end
		end	
	end
end


-- Погиб сталкер.
-- Собираем инфу о погибшем
-- Собираем инфу о виновнике смерти
-- Готовим сообщение
function on_stalker_death(victim_, killer_)
	if (victim_ == nil) then
		return
	end
	if (xs_stor.get("need_shutdown_stalker_news", false) == true) then return end
	local m_killer = ""
	local m_killer_s = ""
	local m_victim = ""
	local victim
	if (isGameObject(victim_)) then
		victim = victim_
	else
		victim = get_obj(victim_.id)
	end
	local killer
	local m_name  = get_npc_name(victim)
	m_victim = format_death_stalker_corpse(victim)
	local m_level = get_level_name(get_object_levelname(victim))
	if killer_ then
		if isGameObject(killer_) then
			killer = killer_
		else
			killer = get_obj(killer_.id)
		end
		if killer:id() == victim:id() then
			m_killer_str = game.translate_string("news_amk_death_unkown_text")
			m_killer = ""
			writelog("On stalker death - unknown killer. "..killer:name().." clsid="..tostring(get_clsid(killer)))
		else
			if IsMonster(killer) then
				m_killer = format_death_by_monster(killer)
				m_killer_str = get_monster_name(killer, 2)
			elseif (IsAnomaly(killer)) then
				m_killer = format_death_by_anomaly(killer)
				m_killer_str = get_anomaly_name(killer, 1)
			elseif (IsStalker(killer)) then
				local m_o_weapon = get_npc_weapon(killer)
				local m_s_weapon = ""
				if (m_o_weapon) then
					m_s_weapon = get_weapon_type(m_o_weapon)
					if (m_s_weapon < 5) then m_killer_str = game.translate_string("news_amk_type_weapon_1_text") end
					if (m_s_weapon == 6) then m_killer_str = game.translate_string("news_amk_type_weapon_2_text") end
					if (m_s_weapon == 8) then m_killer_str = game.translate_string("news_amk_type_weapon_3_text") end
					if (m_s_weapon == 7 or m_s_weapon == 5) then m_killer_str = game.translate_string("news_amk_type_weapon_4_text") end
				end
				if (IsNpcActor(killer)) then
					add_killed_by_actor(victim) -- Отметим, что это ГГ постарался.
				end						
				m_killer = format_death_by_stalker(killer)
			else
				m_killer_str = game.translate_string("news_amk_death_unkown_text")
				m_killer = ""
				writelog("On stalker death - unknown killer. "..killer:name().." clsid="..tostring(get_clsid(killer)))
			end
		end
	end
	if (m_killer_str==nil or m_killer_str=="") then m_killer_str = game.translate_string("news_amk_death_unkown_text") end
	local m_string = m_name..". "..m_level..", "..m_killer_str.."."
	do_news(m_string, game.translate_string("news_amk_stalker_killed_text"), 0, 10, "death", nil, 1) 

	if (math.random() < prob) then
		local name, sname = get_strings()
		local s_author = name.." "..sname
		local m_str = ""
		local author = nil
		local good_author = false
		if (math.random() < 0.5) then
			if (math.random() < 0.5) then
				m_str = m_victim.." "..m_killer..""
			else
				m_str = m_victim..""
			end
			author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_seen, 0)
			if (author) then
				s_author = get_npc_name(author)
				good_author = true
			else
				return
			end
		else
			author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_hear_max, dist_hear_min)
			if (author) then
				s_author = get_npc_name(author)
				local author_rank = get_npc_rank(author)
				if author_rank == "novice" or (author_rank == "experienced" and (math.random() < 0.5)) then
					good_author = false
				end
			else
				return
			end
			m_str = format_death_hear_sounds(victim, killer)
		end
		if (m_str ~= "" and good_author) then
			do_news(m_str, s_author, math.random(timer_corpse*2, timer_corpse *5), 15, "gen_info", author.id)
		end
	end
end

-- Погиб кто-то, но не сталкер (военный, бандит, наемник...)
-- Посмотреть, попадают ли сюда Долг\Свобода
-- Собираем инфу о погибшем
-- Собираем инфу о виновнике смерти
-- Готовим сообщение
function on_npc_death(victim_, killer_)
	if victim_ == nil then
		return
	end
	if (xs_stor.get("need_shutdown_stalker_news", false) == true) then return end
	local m_victim = ""
	local m_killer = ""
	local killer
	local victim
	if isGameObject(victim_) then
		victim = victim_
	else
		victim = get_obj(victim_.id)
	end
	m_victim = format_death_npc_corpse(victim)
	if killer_ then
		if isGameObject(killer_) then
			killer = killer_
		else
			killer = get_obj(killer_.id)
		end
		if (killer) then
			if IsMonster(killer) then
				m_killer = format_death_by_monster(killer)
			elseif IsStalker(killer) then
				if IsNpcActor(killer) then
					add_killed_by_actor(victim) -- Отметим, что это ГГ постарался.
				end			
				m_killer = format_death_by_stalker(killer)
			elseif IsAnomaly(killer) then
				m_killer = format_death_by_anomaly(killer)
			else
				m_killer = ""
				writelog("On npc death - unknown killer. "..killer:name().." clsid="..tostring(get_clsid(killer)))				
			end
		else
			writelog("Хм. no killer. "..victim:name())
		end
	end
	if (math.random() < prob) then
		local name, sname = get_strings()
		local s_from = "" -- name.." "..sname
		local m_str = ""
		local author = nil
		local aid = nil
		local good_author = false
		if (math.random() < 0.5) then
			if (math.random() < 0.5) then
				m_str = m_victim.." "..m_killer..""
			else
				m_str = m_victim..""
			end
			author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_seen, 0)
			if (author) then
				s_from = get_npc_name(author)
				aid = author.id
				good_author = true
			end
		else
			if (math.random() < 0.5 and db.actor and db.actor:id() ~= killer:id()) and (IsNpcStalker(killer)) then
				m_str = format_template_killer_act(victim)
				s_from = get_npc_name(killer)
			else
				author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_hear_max, dist_hear_min)
				if (author) then
					s_from = get_npc_name(author)
					aid = author.id
					local author_rank = get_npc_rank(author)
					if author_rank == "novice" or (author_rank == "experienced" and (math.random() < 0.5)) then
						good_author = false
					end
				else
					return
				end
				m_str = format_death_hear_sounds(victim, killer)
			end
		end
		if (m_str ~= "" and s_from ~= "" and good_author) then
			if (_debug == true and author) then level_tasks.add_location_by_id(author.id, "red_location", s_from..": "..m_str) end
			do_news(m_str, s_from, math.random(timer_corpse*2, timer_corpse * 5), 15, "gen_info", aid)
		end
	end
end

function on_offline_corpse_found(who, object)
	if who and object then
		if (IsStalker(who) and IsNpcStalker(who)) then
			local s_corpse = ""
			if IsMonster(object) then
				s_corpse = format_template_corpse_monster(object)
			elseif IsStalker(object) then
				if (IsNpcStalker(object)) then
					s_corpse = format_template_corpse_stalker(object)			
				else
					s_corpse = format_template_corpse_npc(object)
				end
			end
			if (s_corpse == nil) then s_corpse = "" end
			local s_from = get_npc_name(who)
			if (s_from and s_corpse and s_corpse ~= "" and s_from ~= "") then
				do_news(s_corpse, s_from, math.random(timer_corpse, timer_corpse *5), 15, "gen_info")
			end
			writelog("Offline: "..get_npc_community(who).." found a corpse. "..s_corpse)
		end
	end
end

function on_offline_trade(npc, item)
	if (npc and item and math.random() < 0.25) then
		local m_from = get_npc_name(npc)
		local m_str = news_data.trade_templates[math.random(table.getn(news_data.trade_templates))]
		local m_level = get_point_description(get_object_levelname(npc), get_object_position(npc))
		if (m_level == "") then return end		
		local m_title = get_object_name(item)
		local o_condition = item:condition()
		local m_condition = ""
		if not string.find(m_title, "артефакт") then
			if o_condition > 0.95 then
				m_condition = news_data.condition_templates["excellent"][math.random(table.getn(news_data.condition_templates["excellent"]))]
			elseif o_condition > 0.70 then
				m_condition = news_data.condition_templates["good"][math.random(table.getn(news_data.condition_templates["good"]))]
			elseif o_condition > 0.40 then
				m_condition = news_data.condition_templates["mediocre"][math.random(table.getn(news_data.condition_templates["mediocre"]))]
			else
				m_condition = news_data.condition_templates["bad"][math.random(table.getn(news_data.condition_templates["bad"]))]
			end
		end
		local t = {["level"] = m_level, ["item"] = m_title, ["condition"] = m_condition}
		for key0, value in pairs(t) do
			m_str = string.gsub(m_str, "%$"..key0, value)
		end
		if (m_str ~= "") then
			writelog("Offline: Trade "..m_from.." "..m_str) 
			--show_news(m_str, m_from, math.random(timer_general, timer_general *5), 15, "trade")
			do_news(m_str, m_from, math.random(timer_general, timer_general * 10), 15, "trade", npc.id, 1)
			if (_debug == true) then level_tasks.add_location_by_id(npc.id,"red_location", m_str) end
		end
	end
end

function add_killed_by_actor(obj)
	if (obj and (IsStalker(obj) or IsMonster(obj))) then
		local s_comm = get_npc_community(obj)
		if (s_comm and s_comm == "actor" or s_comm == "stalker" or s_comm == "dolg" or s_comm == "freedom" or s_comm == "trader" or s_comm == "ecolog") then 
			return -- это сталкер
		end
		local s_id = ""
		local lev = get_object_levelname(obj)
		local pos = get_object_position(obj)
		if (isGameObject(obj)) then
			s_id = obj:id()
		else
			s_id = obj.id
		end	
		local b_added = false
		local obj_type = 0
		if IsStalker(obj) then
			obj_type = 1
		elseif IsMonster(obj) then
			obj_type = 2
		end
		if table_killed_by_actor then
			for k, v in pairs(table_killed_by_actor) do
				if (v.community == s_comm and v.level == lev) then
					local mpos = v.position
					if (mpos) then
						local dist = pos:distance_to(mpos)
						if (dist < distance_close) then
							v.count = v.count + 1
							b_added = true
							break
						end
					end
				end
			end
		end
		if (b_added == false) then
			t = {id = s_id, community = s_comm, count = 1, level = lev, position = pos, o_type = obj_type}
			table.insert(table_killed_by_actor, t)
		else
			--
		end
	end	
end


function get_obj(id)
	local m_obj = nil
	if id then
		m_obj = level.object_by_id(id)
	end
	return m_obj
end

function get_level_name(level_, index)
	if index == nil then index = 1 end
	local m_s_level 
	if level_ == nil then
		m_s_level = level.name()
	else
		m_s_level = level_
	end
	local m_tmp_str = ""
	if news_data.level_name[m_s_level] ~= nil then
		if (news_data.level_name[m_s_level][index] ~= nil) then
			m_tmp_str = news_data.level_name[m_s_level][index]..""
		end
	end
	return m_tmp_str
end

function get_level_subname()
	return level.name()
end

function get_current_time()
	local m_time = "00:00"
	if level then
		local m_h = level:get_time_hours()
		local m_m = level:get_time_minutes()
		m_time = m_h..":"..m_m
	end
	return m_time
end

function get_npc_name(obj)
	local m_s_name = ""
	if obj then
		if isGameObject(obj) then
			if obj.character_name then
				m_s_name = obj:character_name()
			end
		else
			local ob = get_obj(obj.id)
			if (ob and ob.character_name) then
				m_s_name = ob:character_name()
			else
				if (ogse and IsStalker(obj)) then
					local pk = xs_netpk.stalker(obj)
					if (pk and pk:isOk()) then
						local data = pk:get()
						m_s_name = data.character_name
					end
				end
			end
		end
	end
	if (m_s_name == nil) then
		m_s_name = ""
	end
	if (m_s_name == "") then
		--m_s_name = get_npc_community(obj)
	end
	return m_s_name
end

function get_npc_community(obj)
	local m_s_c = ""
	if (obj) then
		if IsMonster(obj) then
			m_s_c = get_monster_name(obj, 1)
		else
			if obj.character_community then				
				m_s_c = obj:character_community()
			elseif obj.community then
				m_s_c = obj:community()
			end
		end
	end
	if (m_s_c == nil) then
		m_s_c = ""
	end
	if (obj and obj.name and m_s_c == "") then
		trace("get_npc_community returns '' for "..obj:name())
	end
	return m_s_c
end

function get_object_position(obj)
	local pos = nil
	if (obj) then
		if isGameObject(obj) and obj.position then
			pos = obj:position()
		else
			pos = obj.position
		end
	end
	return pos
end

function get_object_name(obj)
	local s_name = ""
	local value	= ""
	if isGameObject(obj) and obj.section then
		value	= utils.cfg_get_string(sys_ini, obj:section(), "inv_name", obj, false, "", "")
		s_name = value
		s_name = game.translate_string(s_name)
		if string.find(obj:section(),"^af_") then
			s_name = game.translate_string("news_amk_af_text")..s_name
		end
	elseif obj.section_name then
		value	= utils.cfg_get_string(sys_ini, obj:section_name(), "inv_name", obj, false, "", "")
		s_name = value
		s_name = game.translate_string(s_name)
		if string.find(obj:section_name(),"^af_") then
			s_name = game.translate_string("news_amk_af_text")..s_name
		end
	end
	if s_name == nil then s_name = "" end
	return s_name
end

local weapons_list = {
-- пистолеты
["wpn_crossbow"]			= 1,
["wpn_pm"]					= 1,
["wpn_fort"]				= 1,
["wpn_pb"]					= 1,
["wpn_hpsa"]				= 1,
["wpn_beretta"]				= 1,
["wpn_usp"]					= 1,
["wpn_colt1911"]			= 1,
["wpn_desert_eagle"]		= 1,
["wpn_tt"]					= 1,
--Дробовики
["wpn_bm16"]				= 4,
["wpn_toz34_short"]			= 4,
["wpn_bm16_full"]			= 4,
["wpn_toz34"]				= 4,
["wpn_wincheaster1300"]		= 4,
["wpn_spas12"]				= 4,
["wpn_spas12_m1"]			= 4,
["wpn_saiga12c"]			= 4,
["wpn_saiga12c_m1"]			= 4,
["wpn_sayga12k_sk1"]		= 4,
--ПП
["wpn_mac10"]				= 3,
["wpn_mac10_m1"]			= 3,
["wpn_mp40"]				= 3,
["wpn_mp5"]					= 3,
["wpn_ppsh41"]				= 3,
["wpn_mp5_m1"]				= 3,
["wpn_mp5_m2"]				= 3,
--Штурмовые
["wpn_aks74ub"]				= 3,
["wpn_ak74n"]				= 3,
["wpn_m16a1_sk1"]			= 3,
["wpn_groza"]				= 3,
["wpn_val"]					= 3,
["wpn_sig550"]				= 3,
["wpn_ak102"]				= 3,
["wpn_g36"]					= 3,
["wpn_akm"]					= 3,
["wpn_groza_m1"]			= 3,
["wpn_sig_m1"]				= 3,
["wpn_sig_m2"]				= 3,
["wpn_fn2000"]				= 3,
--Снайперки
["wpn_sg550sr_sk1"]			= 2,
["wpn_vintorez"]			= 2,
["wpn_svu"]					= 2,
["wpn_swd"]					= 2,
["wpn_vintorez_m1"]			= 2,
["wpn_gauss"]				= 2,
--Пулеметы
["wpn_rpk74_sk1"]			= 3,
["wpn_pkm"]					= 3,
["wpn_m_134"]				= 3,
--Тяжелое
["wpn_rpg7"]				= 5,
-- Нож
["wpn_knife"]				= 6,
-- Гранаты
["wpn_grenade_launcher"]	= 7,
["grenade_f1"]				= 7,
["grenade_rgd5"]			= 7,
--Огнемет
["wpn_flame"]				= 8
}

function get_weapon_type(weapon)
	if weapon and isWeapon(weapon) then
		local id = get_weapon_name(weapon)
		local class = weapons_list[id]
		if not class then
			for k,v in pairs(weapons_list) do
				if string.find(id, k) then
					class = v
					break
				end
			end
		end
		if id == nil or class == nil then 
			return 0
		else
			return class
		end
		writelog("!!NEWS_AMK: Unknown weapon type ["..id.."] "..weapon:name())
	end
	return 0
end

function get_weapon_name(weapon)
	if weapon and isWeapon(weapon) then
		local result = ""
		if weapon.section then
			result = weapon:section()
		elseif weapon.section_name then
			result = weapon:section_name()
		end
		if result == nil then result = "" end
		return result
	end
	return ""
end

function get_npc_weapon(obj)
	if obj then
		local ob
		if isGameObject(obj) == false then
			ob = get_obj(obj.id)
		else
			ob = obj
		end
		if ob then
			if ob.active_item then
				local m_act = ob:active_item()
				if m_act then
					if isWeapon(m_act) then
						return m_act
					else
						writelog("get_npc_weapon - m_act is not a weapon - "..tostring(get_clsid(m_act)))
					end
				else
					writelog("get_npc_weapon - m_act = nil")
				end
			else
				writelog("get_npc_weapon - no active_item")
				if ob.name then writelog("get_npc_weapon - name: "..tostring(ob:name())) end
				writelog("get_npc_weapon - clsid: "..tostring(get_clsid(ob)))
			end
		else
			writelog("get_npc_weapon - ob is nil")
		end
	else
		writelog("get_npc_weapon - obj is nil")
	end
	return nil
end

function get_monster_name(obj, index)
	local m_comm = ""
	local m_n = ""
	if index == nil then index = 1 end
	if IsMonster(obj) then
		local m_clsid = get_clsid(obj)
		if m_clsid then
			m_comm = news_data.monster_classes[m_clsid]
			if m_comm == nil then
				trace("Unknown monster class_id: "..m_clsid.." for "..obj:name())
				m_n = ""
			else
				if (news_data.monster_classes[m_clsid][index] ~= nil) then
					m_n = news_data.monster_classes[m_clsid][index]
				else
					trace("Unknown monster name for class_id: "..m_clsid.." index="..index)
				end
			end
		end
	end
	return m_n
end

function get_monster_name_by_string(str, index)
	local m_comm = ""
	local m_n = ""
	if index == nil then index = 1 end
	if index < 1 then index = 1 end
	if(str) then
		for k, v in pairs(news_data.monster_classes) do
			if (v and table.getn(v)>=index and v[1] == str) then
				m_n = v[index]
			end
		end
	end
	return m_n
end

function get_npc_rank(obj)
	local m_rank = ""
	if (obj) then
		m_rank = ranks.get_obj_rank_name(obj)
		if (m_rank == nil) then
			m_rank = ""
		end
	end
	return m_rank
end

function get_monster_rank(obj)
	local m_rank = ""
	if (obj) then
		if (obj and IsMonster(obj)) then
			m_rank = ranks.get_obj_rank_name(obj)
			if (m_rank == nil) then
				m_rank = ""
			end
		end
	end
	return m_rank
end

function get_anomaly_name(obj, index)
	local m_name = ""
	local m_n = ""
	if index == nil then index = 1 end
	if IsAnomaly(obj) then
		local m_type = ""		
		if isGameObject(obj) and obj.section then
			m_type = obj:section()
		elseif (obj.section_name) then
			m_type = obj:section_name()
		end
		if m_type then
			for k,v in pairs(news_data.anomaly_classes) do
				if string.find(m_type, k) then
					if v[index] ~= nil then
						m_n = v[index]
					end
					break
				end
			end
		end
	end
	return m_n
end

function IsNpcOther(obj)
	if obj and IsStalker(obj) then
		local m_comm  = get_npc_community(obj)
		if string.find(m_comm, "actor") or m_comm == "stalker" or m_comm == "dolg" or m_comm == "freedom" then
			return false
		end
		return true
	else
		return false
	end
end

function IsNpcStalker(obj)
	if obj and IsStalker(obj) then
		local m_comm  = get_npc_community(obj)
		if string.find(m_comm, "actor") or m_comm == "stalker" or m_comm == "dolg" or m_comm == "freedom" then
			if (obj.name and obj:name() ~= "agr_ratcatcher") then
				return true
			end
		end
	end
	return false
end

function IsNpcActor(obj)
	if (obj and IsStalker(obj)) then
		local m_comm  = get_npc_community(obj)
		if string.find(m_comm, "actor") then
			return true
		end
	end
	return false
end

function do_news(text, from, timeout, showtime, section, author_id, priority)
	if (text == nil) then text = "nil" end
	if (from == nil) then from = "nil" end
	if (timeout == nil) then timeout = 0 end
	if (priority == nil) then priority = 0 end
	if not has_alife_info("pre_blowout") 
	and not has_alife_info("pre_blowout2") 
	and not has_alife_info("blowout")
	and not has_alife_info("no_net_signal") then	
	add_news(text, from, 1, timeout, showtime, section, author_id, priority)
	end
end

function add_news(news_text, news_from, news_type, news_timeout, news_showtime, news_section, author_id, priority)
	newsitem = {
		eventType = news_type,
		created = game_minutes(),
		text = news_text,
		from = news_from,
		timeout = game_minutes() + (news_timeout / 60),
		showtime = news_showtime,
		section = news_section,
		lifetime = game_minutes() + (news_timeout / 60) + 20,
		activated = nil,
		author_id = tonumber(author_id),
		priority = priority
	}
	table.insert(news_stack, newsitem)
end

function show_news(text, from, timeout, showtime, section)
	if isIndoor(level.name()) == true then return end
	if text == "" then return end
	if from == "" then return end

	if text == nil then text = "nil" end
	if from == nil then from = "nil" end
	if timeout > 1000 then timeout = math.random(timer_general, timer_general * 4) end
	
	table.insert(spammers, from)
	
	if not has_alife_info("pre_blowout") 
	and not has_alife_info("pre_blowout2") 
	and not has_alife_info("blowout") then
		ogse.send_tip(text, from, timeout, showtime, section)
	end
	timer_last_showed = game_minutes()
end

function format_death_by_monster(obj)
	local m_s = ""
	local m_prefix = ""
	local m_suffix = ""
	local m_class = ""
	local m_postfix = ""
	if (obj) then
	-- monster_prefix + monster_classes + monster_suffix
	-- monster_suffix + monster_classes + monster_prefix
		m_prefix = news_data.monster_prefix[math.random(table.getn(news_data.monster_prefix))].." "
		local m_suffid = math.random(table.getn(news_data.monster_suffix))
		local m_suff = news_data.monster_suffix[m_suffid]
		if (m_suff) then
			m_suffix = m_suff[math.random(table.getn(m_suff))]
			m_class = get_monster_name(obj, m_suffid+1)
			m_postfix = news_data.rate_postfix[math.random(table.getn(news_data.rate_postfix))]
		end
		if (math.random() < 0.5) then
			m_s = m_prefix..""..m_suffix..""..m_class.."."..m_postfix
		else
			m_s = m_suffix..""..m_class..". "..m_prefix..""..m_postfix
		end
	end
	return m_s
end

function format_death_by_anomaly(obj)
	local m_s = ""
	local m_prefix = ""
	local m_suffix = ""
	local m_class = ""
	--local m_postfix = ""
	if (obj) then
	-- anomaly_prefix + anomaly_classes + anomaly_classes[3,4]
		m_prefix = news_data.anomaly_prefix[math.random(table.getn(news_data.anomaly_prefix))]
		m_class = get_anomaly_name(obj, 2)
		m_suffix = get_anomaly_name(obj, math.random(3, 4))
		--m_postfix = anomaly_postfix[math.random(table.getn(anomaly_postfix))]
		if (math.random() < 0.5) then
			m_s = m_prefix..""..m_class..". "..m_suffix.."." --..m_postfix.."."
		else
			m_s = m_prefix..""..m_class.."." --..m_postfix.."."
		end
	end
	return m_s
end

function format_death_by_stalker(obj)
	local m_s = ""
	if (obj) then
		local m_wpn = get_npc_weapon(obj)
		if (m_wpn) then
			local m_weapon = get_weapon_type(m_wpn)
			if m_weapon ~= 0 then
			m_s = format_template_weapon(m_weapon)
			end
		else
			writelog("format_death_by_stalker - no weapon")
		end
	end
	return m_s
end

function format_death_by_weapon(obj)
	local m_s = ""
	if (obj) then
		local m_weapon = get_weapon_type(obj)
		if m_weapon ~= 0 then
		m_s = format_template_weapon(m_weapon)
		end
	else
		writelog("format_death_by_weapon - no weapon")
	end
	return m_s
end

function format_death_stalker_corpse(obj)
	local m_s = ""
	if (obj) then
		m_s = format_template_corpse_stalker(obj)
	end
	return m_s
end

function format_death_npc_corpse(obj)
	local m_s = ""
	if (obj) then
		m_s = format_template_corpse_npc(obj)
	end
	return m_s
end

function format_death_monster_corpse(obj)
	local m_s = ""
	if obj then
		m_s = format_template_corpse_monster(obj)
	end
	return m_s
end

function format_death_hear_sounds(victim_, killer_, weapon_)
	local m_s = ""
	local m_hear_a = ""
	local m_hear_z = ""
	if victim_ then
		if (killer_ and IsStalker(killer_)) then -- Если killer == НПС - то стрельбу или взрывы
			if weapon_ == nil then
				local m_wpn = get_npc_weapon(killer_)
				if m_wpn then
					local m_weapon = get_weapon_type(m_wpn)
					if m_weapon == 0 then return "" end
					if m_weapon and news_data.weapon_classes[m_weapon] then
						if math.random() > news_data.weapon_classes[m_weapon]["hear_p"] then
							return ""; -- Ничего не услышали, слишком тихое оружие...
						end
						m_hear_a = news_data.weapon_classes[m_weapon]["hear_a"][math.random(table.getn(news_data.weapon_classes[m_weapon]["hear_a"]))]
						m_hear_z = news_data.weapon_classes[m_weapon]["hear_z"][math.random(table.getn(news_data.weapon_classes[m_weapon]["hear_z"]))]
						m_s = format_template_hear(victim_, m_hear_a, m_hear_z)
					end
				end
			else
				local m_weapon = get_weapon_type(weapon_)
				if m_weapon == 0 then return "" end
				if m_weapon and news_data.weapon_classes[m_weapon] then
					if math.random() > news_data.weapon_classes[m_weapon]["hear_p"] then
						return ""; -- Ничего не услышали, слишком тихое оружие...
					end
					m_hear_a = news_data.weapon_classes[m_weapon]["hear_a"][math.random(table.getn(news_data.weapon_classes[m_weapon]["hear_a"]))]
					m_hear_z = news_data.weapon_classes[m_weapon]["hear_z"][math.random(table.getn(news_data.weapon_classes[m_weapon]["hear_z"]))]
					m_s = format_template_hear(victim_, m_hear_a, m_hear_z)
				end			
			end
		elseif (killer_ and victim_ and IsMonster(victim_) ~= true and (IsAnomaly(killer_) or IsMonster(killer_))) then -- Если killer == аномалия и victim ~= монстры - то крики
			m_hear_a = news_data.weapon_classes[9]["hear_a"][math.random(table.getn(news_data.weapon_classes[9]["hear_a"]))]
			m_hear_z = news_data.weapon_classes[9]["hear_z"][math.random(table.getn(news_data.weapon_classes[9]["hear_z"]))]
			m_s = format_template_hear(victim_, m_hear_a, m_hear_z)
		elseif ((killer_ and IsMonster(killer_)) or (victim_ and IsMonster(victim_))) then -- Если killer == монстры  или victim == монстры - то звуки
			m_hear_a = news_data.weapon_classes[10]["hear_a"][math.random(table.getn(news_data.weapon_classes[10]["hear_a"]))]
			m_hear_z = news_data.weapon_classes[10]["hear_z"][math.random(table.getn(news_data.weapon_classes[10]["hear_z"]))]
			m_s = format_template_hear(victim_, m_hear_a, m_hear_z)
		else
			if victim_ and victim_.name then
				writelog("format_death_hear_sounds - victim : "..victim_:name())
			end
			if killer_ then
				writelog("format_death_hear_sounds - killer :  exists")
			end
			if killer_ and killer_.name then
				writelog("format_death_hear_sounds - killer : "..killer_:name())
			end
		end
	end
	return m_s
end

function format_template_killer_act(obj)
	local m_s = ""
	if(obj ~= nil) then
		local m_class = ""
		local m_level = get_point_description(get_object_levelname(obj), get_object_position(obj))
		if (m_level == "") then return "" end
		if IsMonster(obj) then
			m_class = get_monster_name(obj, 4)
		else
			local m_comm  = get_npc_community(obj)
			if (m_comm and news_data.community_name[m_comm]) then
				m_class = news_data.community_name[m_comm][3]
			end
		end
		local t = {
			["class"] = m_class,
			["level"] = m_level,
			["killed_a"] = news_data.common["killed_a"][math.random(table.getn(news_data.common["killed_a"]))],
			["killed_z"] = news_data.common["killed_z"][math.random(table.getn(news_data.common["killed_z"]))],
			["hard_a"] = news_data.common["hard_a"][math.random(table.getn(news_data.common["hard_a"]))],
			["hard_z"] = news_data.common["hard_z"][math.random(table.getn(news_data.common["hard_z"]))],
			["meet_a"] = news_data.common["meet_a"][math.random(table.getn(news_data.common["meet_a"]))],
			["meet_z"] = news_data.common["meet_z"][math.random(table.getn(news_data.common["meet_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))]			
		}
		local m_string = news_data.killer_act_templates[math.random(table.getn(news_data.killer_act_templates))]			
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_weapon(weapon_type)
	local m_s = ""
	if(weapon_type and news_data.weapon_classes[weapon_type] ~= nil and news_data.weapon_classes[weapon_type]["name"]) then
		local t = {
			["weapon_name_2"] = news_data.weapon_classes[weapon_type]["name"][2],
			["weapon_name_3"] = news_data.weapon_classes[weapon_type]["name"][3],
			["weapon_hit_a"] = news_data.weapon_classes[weapon_type]["hit_a"][math.random(table.getn(news_data.weapon_classes[weapon_type]["hit_a"]))],
			["weapon_hit_z"] = news_data.weapon_classes[weapon_type]["hit_z"][math.random(table.getn(news_data.weapon_classes[weapon_type]["hit_z"]))],
			["kill_a"] = news_data.common["kill_a"][math.random(table.getn(news_data.common["kill_a"]))],
			["kill_z"] = news_data.common["kill_z"][math.random(table.getn(news_data.common["kill_z"]))],
			["sad_a"] = news_data.common["sad_a"][math.random(table.getn(news_data.common["sad_a"]))],
			["sad_z"] = news_data.common["sad_z"][math.random(table.getn(news_data.common["sad_z"]))],
			["fun_a"] = news_data.common["fun_a"][math.random(table.getn(news_data.common["fun_a"]))],
			["fun_z"] = news_data.common["fun_z"][math.random(table.getn(news_data.common["fun_z"]))],
			["prob_a"] = news_data.common["prob_a"][math.random(table.getn(news_data.common["prob_a"]))],
			["prob_z"] = news_data.common["prob_z"][math.random(table.getn(news_data.common["prob_z"]))]
		}
		local m_string = news_data.weapon_templates[math.random(table.getn(news_data.weapon_templates))]			
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_corpse_stalker(obj)
	local m_s = ""
	if(obj ~= nil) then
		local m_name  = get_npc_name(obj)
		local m_level = get_point_description(get_object_levelname(obj), get_object_position(obj)) 
		if (m_level == "") then return "" end
		local m_rank  = get_npc_rank(obj)
		local m_rank_s = ""
		if (m_rank and news_data.rate_name[m_rank]) then
			m_rank_s = news_data.rate_name[m_rank][math.random(2, table.getn(news_data.rate_name[m_rank]))]
		end
		local t = {
			["name"] = m_name,
			["level"] = m_level,
			["rate"] = m_rank_s,
			["kill_a"] = news_data.common["kill_a"][math.random(table.getn(news_data.common["kill_a"]))],
			["kill_z"] = news_data.common["kill_z"][math.random(table.getn(news_data.common["kill_z"]))],
			["sad_a"] = news_data.common["sad_a"][math.random(table.getn(news_data.common["sad_a"]))],
			["sad_z"] = news_data.common["sad_z"][math.random(table.getn(news_data.common["sad_z"]))],
			["fun_a"] = news_data.common["fun_a"][math.random(table.getn(news_data.common["fun_a"]))],
			["fun_z"] = news_data.common["fun_z"][math.random(table.getn(news_data.common["fun_z"]))],
			["prob_a"] = news_data.common["prob_a"][math.random(table.getn(news_data.common["prob_a"]))],
			["prob_z"] = news_data.common["prob_z"][math.random(table.getn(news_data.common["prob_z"]))],
			["corpse_a"] = news_data.common["corpse_a"][math.random(table.getn(news_data.common["corpse_a"]))],
			["corpse_z"] = news_data.common["corpse_z"][math.random(table.getn(news_data.common["corpse_z"]))],
			["seen_a"] = news_data.common["seen_a"][math.random(table.getn(news_data.common["seen_a"]))],
			["seen_z"] = news_data.common["seen_z"][math.random(table.getn(news_data.common["seen_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))]			
		}
		local m_string = news_data.stalker_corpse_templates[math.random(table.getn(news_data.stalker_corpse_templates))]
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_corpse_npc(obj)
	local m_s = ""
	if(obj ~= nil) then
		local m_name  = get_npc_name(obj)
		if (m_name == "") then
			m_name = "недавно в Зоне"
			local m_rank  = get_npc_rank(obj)
			local m_rank_s = ""
			if (m_rank and news_data.rate_name[m_rank]) then
				m_rank_s = news_data.rate_name[m_rank][math.random(2, table.getn(news_data.rate_name[m_rank]))]
				m_name = m_rank_s
			end					
		end
		local m_level = get_point_description(get_object_levelname(obj), get_object_position(obj))
		if (m_level == "") then return "" end
		local m_comm  = get_npc_community(obj)
		local m_class = ""
		if (m_comm and news_data.community_name[m_comm]) then
			m_class = news_data.community_name[m_comm][3]
		end
		local t = {
			["name"] = m_name,
			["level"] = m_level,
			["class"] = m_class,
			["kill_a"] = news_data.common["kill_a"][math.random(table.getn(news_data.common["kill_a"]))],
			["kill_z"] = news_data.common["kill_z"][math.random(table.getn(news_data.common["kill_z"]))],
			["sad_a"] = news_data.common["sad_a"][math.random(table.getn(news_data.common["sad_a"]))],
			["sad_z"] = news_data.common["sad_z"][math.random(table.getn(news_data.common["sad_z"]))],
			["fun_a"] = news_data.common["fun_a"][math.random(table.getn(news_data.common["fun_a"]))],
			["fun_z"] = news_data.common["fun_z"][math.random(table.getn(news_data.common["fun_z"]))],
			["prob_a"] = news_data.common["prob_a"][math.random(table.getn(news_data.common["prob_a"]))],
			["prob_z"] = news_data.common["prob_z"][math.random(table.getn(news_data.common["prob_z"]))],
			["corpse_a"] = news_data.common["corpse_a"][math.random(table.getn(news_data.common["corpse_a"]))],
			["corpse_z"] = news_data.common["corpse_z"][math.random(table.getn(news_data.common["corpse_z"]))],
			["corpse_name_a"] = news_data.common["corpse_name_a"][math.random(table.getn(news_data.common["corpse_name_a"]))],
			["corpse_name_z"] = news_data.common["corpse_name_z"][math.random(table.getn(news_data.common["corpse_name_z"]))],
			["seen_a"] = news_data.common["seen_a"][math.random(table.getn(news_data.common["seen_a"]))],
			["seen_z"] = news_data.common["seen_z"][math.random(table.getn(news_data.common["seen_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))]			
		}
		local m_string = news_data.npc_corpse_templates[math.random(table.getn(news_data.npc_corpse_templates))]			
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_corpse_monster(obj)
	local m_s = ""
	if(obj ~= nil) then
		local m_level = get_point_description(get_object_levelname(obj), get_object_position(obj))
		if (m_level == "") then return "" end		
		local m_name  = get_monster_name(obj, 3)
		local m_name2 = get_monster_name(obj, 4)
		local t = {
			["name"] = m_name,
			["class"] = m_name2,
			["c_corpse"] = m_name,
			["level"] = m_level,
			["kill_a"] = news_data.common["kill_a"][math.random(table.getn(news_data.common["kill_a"]))],
			["kill_z"] = news_data.common["kill_z"][math.random(table.getn(news_data.common["kill_z"]))],
			["sad_a"] = news_data.common["sad_a"][math.random(table.getn(news_data.common["sad_a"]))],
			["sad_z"] = news_data.common["sad_z"][math.random(table.getn(news_data.common["sad_z"]))],
			["fun_a"] = news_data.common["fun_a"][math.random(table.getn(news_data.common["fun_a"]))],
			["fun_z"] = news_data.common["fun_z"][math.random(table.getn(news_data.common["fun_z"]))],
			["prob_a"] = news_data.common["prob_a"][math.random(table.getn(news_data.common["prob_a"]))],
			["prob_z"] = news_data.common["prob_z"][math.random(table.getn(news_data.common["prob_z"]))],
			["corpse_a"] = news_data.common["corpse_a"][math.random(table.getn(news_data.common["corpse_a"]))],
			["corpse_z"] = news_data.common["corpse_z"][math.random(table.getn(news_data.common["corpse_z"]))],
			["seen_a"] = news_data.common["seen_a"][math.random(table.getn(news_data.common["seen_a"]))],
			["seen_z"] = news_data.common["seen_z"][math.random(table.getn(news_data.common["seen_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))]			
		}
		local m_string = news_data.monster_corpse_templates[math.random(table.getn(news_data.monster_corpse_templates))]			
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_hear(obj, hear_a, hear_z)
	local m_s = ""
	local m_level = ""
	local m_pos
	if obj then
		if isGameObject(obj) then
			m_pos = obj:position()
		else
			m_pos = obj.position
		end
		if m_pos then
			m_level = get_point_description(get_object_levelname(obj), m_pos)
			if (m_level == "") then return "" end			
		end
		local t = {
			["level"] = m_level, 
			["hear_a"] = hear_a,
			["hear_z"] = hear_z,
			["carefull_a"] = news_data.common["carefull_a"][math.random(table.getn(news_data.common["carefull_a"]))],
			["carefull_z"] = news_data.common["carefull_z"][math.random(table.getn(news_data.common["carefull_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))]			
		}
		local m_string = news_data.hear_sounds_tempates[math.random(table.getn(news_data.hear_sounds_tempates))]		
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_spawn(level_, position, class)
	local m_s = ""
	local m_level = ""
	local m_pos
	if (level_ and position and class) then
		m_pos = position
		m_level = get_point_description(level_, m_pos)
		if (m_level == "") then return "" end			
		local t = {
			["level"] = m_level, 
			["class"] = class,
			["carefull_a"] = news_data.common["carefull_a"][math.random(table.getn(news_data.common["carefull_a"]))],
			["carefull_z"] = news_data.common["carefull_z"][math.random(table.getn(news_data.common["carefull_z"]))],
			["seen_a"] = news_data.common["spawn_seen_a"][math.random(table.getn(news_data.common["spawn_seen_a"]))],
			["seen_z"] = news_data.common["spawn_seen_z"][math.random(table.getn(news_data.common["spawn_seen_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))]
		}
		local m_string = news_data.spawn_templates[math.random(table.getn(news_data.spawn_templates))]		
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_spawn_group(level_, position, class, count)
	local m_s = ""
	local m_level = ""
	local m_pos
	if (level_ and position and class and count) then
		m_pos = position
		m_level = get_point_description(level_, m_pos)
		if (m_level == "") then return "" end			
		local s_count = ""
		if (count == 1) then
			s_count = game.translate_string("news_amk_count_1_text")
		elseif(count == 2) then
			s_count = game.translate_string("news_amk_count_2_text")
		elseif(count == 3) then
			s_count = game.translate_string("news_amk_count_3_text")
		elseif(count >= 4 and count < 6) then
			s_count = game.translate_string("news_amk_count_4_text")
		elseif(count >= 6 and count < 8) then
			s_count = game.translate_string("news_amk_count_5_text")
		else
			--s_count = "большую группу ("..count..")"
			s_count = game.translate_string("news_amk_count_6_text")
		end
		
		local t = {
			["level"] = m_level, 
			["class"] = class,
			["count"] = s_count,
			["carefull_a"] = news_data.common["carefull_a"][math.random(table.getn(news_data.common["carefull_a"]))],
			["carefull_z"] = news_data.common["carefull_z"][math.random(table.getn(news_data.common["carefull_z"]))],
			["seen_a"] = news_data.common["spawn_seen_a"][math.random(table.getn(news_data.common["spawn_seen_a"]))],
			["seen_z"] = news_data.common["spawn_seen_z"][math.random(table.getn(news_data.common["spawn_seen_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))]
		}
		local m_string = news_data.spawn_templates_group[math.random(table.getn(news_data.spawn_templates_group))]		
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_actor_seen(level_, position, class)
	local m_s = ""
	local m_level = ""
	local m_pos
	if (level_ and position and class) then
		m_pos = position
		m_level = get_point_description(level_, m_pos)
		if (m_level == "") then return "" end			
		local t = {
			["level"] = m_level, 
			["class"] = class,
			["kill_seen_a"] = news_data.common["kill_seen_a"][math.random(table.getn(news_data.common["kill_seen_a"]))],
			["kill_seen_z"] = news_data.common["kill_seen_z"][math.random(table.getn(news_data.common["kill_seen_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))],
			["fun_a"] = news_data.common["fun_a"][math.random(table.getn(news_data.common["fun_a"]))],
			["fun_z"] = news_data.common["fun_z"][math.random(table.getn(news_data.common["fun_z"]))],
			["killed_a"] = news_data.common["killed_a"][math.random(table.getn(news_data.common["killed_a"]))],
			["killed_z"] = news_data.common["killed_z"][math.random(table.getn(news_data.common["killed_z"]))],
			["cool_a"] = news_data.common["cool_a"][math.random(table.getn(news_data.common["cool_a"]))],
			["cool_z"] = news_data.common["cool_z"][math.random(table.getn(news_data.common["cool_z"]))]						
		}
		local m_string = ""
		m_string = news_data.actor_seen_public_templates[math.random(table.getn(news_data.actor_seen_public_templates))]		
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end

function format_template_actor_seen_group(level_, position, class, count)
	local m_s = ""
	local m_level = ""
	local m_pos
	if (level_ and position and class and count) then
		m_pos = position
		m_level = get_point_description(level_, m_pos)
		if (m_level == "") then return "" end			
		local s_count = ""
		if (count == 1) then
			s_count = ""
		elseif(count == 2) then
			s_count = game.translate_string("news_amk_count_2_text")
		elseif(count == 3) then
			s_count = game.translate_string("news_amk_count_3_text")
		elseif(count >= 4 and count < 6) then
			s_count = game.translate_string("news_amk_count_4_text")
		else
			s_count = game.translate_string("news_amk_count_5_text")
		end
		local t = {
			["level"] = m_level, 
			["class"] = class,
			["count"] = s_count,
			["fun_a"] = news_data.common["fun_a"][math.random(table.getn(news_data.common["fun_a"]))],
			["fun_z"] = news_data.common["fun_z"][math.random(table.getn(news_data.common["fun_z"]))],
			["kill_seen_a"] = news_data.common["kill_seen_a"][math.random(table.getn(news_data.common["kill_seen_a"]))],
			["kill_seen_z"] = news_data.common["kill_seen_z"][math.random(table.getn(news_data.common["kill_seen_z"]))],
			["when_a"] = news_data.common["when_a"][math.random(table.getn(news_data.common["when_a"]))],
			["when_z"] = news_data.common["when_z"][math.random(table.getn(news_data.common["when_z"]))],
			["killed_a"] = news_data.common["killed_a"][math.random(table.getn(news_data.common["killed_a"]))],
			["killed_z"] = news_data.common["killed_z"][math.random(table.getn(news_data.common["killed_z"]))],
			["cool_a"] = news_data.common["cool_a"][math.random(table.getn(news_data.common["cool_a"]))],
			["cool_z"] = news_data.common["cool_z"][math.random(table.getn(news_data.common["cool_z"]))]						
		}
		local m_string = ""
		m_string = news_data.actor_seen_public_templates_group[math.random(table.getn(news_data.actor_seen_public_templates_group))]		
		for key0, value in pairs(t) do
			m_s = string.gsub(m_string, "%$"..key0, value)
			m_string = m_s
		end
		m_s = m_string
	end
	return m_s
end


function get_point_description(level, point)
	local m_s = ""
	local dist = 10000
	local angle = 0	
	local m_tmp_str = ""
	if (level == "l10u_bunker" or level == "l11_pripyat" or level == "l12_stancia" or level == "l12_stancia_2" or level == "l12u_control_monolith" or level == "l12u_sarcofag") then
		if isRadarDeactivated() == false then	return "" end
	end
	if level and news_data.level_name[level] ~= nil then
		if (news_data.level_name[level][2] ~= nil) then
			m_tmp_str = news_data.level_name[level][2]..""
		end
	end	
	if level and news_data.base_points[level] and point then
		local m_str = ""
		local m_str0 = ""
		local pretext = ""
		local m_point = nil
		local m_dist = 0
		local m_points = news_data.base_points[level]
		local dx = 0
		local dy = 0
		local radians = 0
		for key0, value in pairs(m_points) do
			m_point = vector():set(value["p"][1],value["p"][2],value["p"][3])
			if (m_point) then
				m_dist = m_point:distance_to(point)
				if m_dist < dist then
					dist = m_dist
					m_str = value["text"]
					m_str0 = value["text0"]
					dx = point.x - m_point.x
					dy = point.z - m_point.z
					radians = math.atan2(dy, dx)
					if(radians) then
						angle = radians * 57
						if (angle < 0) then
							angle = angle + 360
						end
						if (angle > 360) then
							angle = angle - 360
						end
					end
				end
			end
		end
		if dist<= 20 then
			m_s = m_tmp_str.." "..m_str0
		elseif dist < 50 then
			pretext = news_data.pretext_base_points[1][math.random(table.getn(news_data.pretext_base_points[1]))]
			m_s = m_tmp_str.." "..pretext.." "..m_str
		elseif dist < 100 then
			pretext = news_data.pretext_base_points[2][math.random(table.getn(news_data.pretext_base_points[2]))]
			m_s = m_tmp_str.." "..pretext.." "..m_str
		else --Говорим, куда (север, юг...)
			if (angle >= 330 or angle <= 30) then -- на востоке
				m_s = m_tmp_str.." "..game.translate_string("news_amk_east_text").." "..m_str
			elseif (angle >30 and angle <=60) then --северо-восток
				m_s = m_tmp_str.." "..game.translate_string("news_amk_neast_text").." "..m_str
			elseif (angle >60 and angle <=120) then --север
				m_s = m_tmp_str.." "..game.translate_string("news_amk_north_text").." "..m_str
			elseif (angle >120 and angle <=150) then --северо-запад
				m_s = m_tmp_str.." "..game.translate_string("news_amk_nwest_text").." "..m_str
			elseif (angle >150 and angle <=210) then --запад
				m_s = m_tmp_str.." "..game.translate_string("news_amk_west_text").." "..m_str
			elseif (angle >210 and angle <=240) then --юго-запад
				m_s = m_tmp_str.." "..game.translate_string("news_amk_swest_text").." "..m_str
			elseif (angle >240 and angle <= 300) then --юг
				m_s = m_tmp_str.." "..game.translate_string("news_amk_south_text").." "..m_str
			elseif (angle >300 and angle <=330) then --юго-восток
				m_s = m_tmp_str.." "..game.translate_string("news_amk_esouth_text").." "..m_str
			else
				pretext = news_data.pretext_base_points[2][math.random(table.getn(news_data.pretext_base_points[2]))]
				m_s = m_tmp_str.." "..pretext.." "..m_str
			end
		end
	else
		m_s = m_tmp_str
	end
	return m_s
end

function isGameObject(obj)
	local bResult = false
	if (obj and obj.fov) then
		bResult = true
	end
	return bResult
end

function get_object_levelname(obj)
	local mlevel = "null"	
	if obj then
		local m_game_vertex
		local nm = "nil"
		if obj.name then nm = obj:name() end
		if isGameObject(obj) then
			m_game_vertex = obj:game_vertex_id()
		else
			m_game_vertex = obj.m_game_vertex_id
		end
		if m_game_vertex and game_graph():valid_vertex_id(m_game_vertex) then
			local lvert = game_graph():vertex(m_game_vertex)
			if lvert ~= nil and lvert.level_id then
				local lid = lvert:level_id()
				if lid ~= nil then
					mlevel = alife():level_name(lid)
				else
					writelog(" get_object_levelname - level id is null "..nm)
				end
			else
				writelog(" get_object_levelname - vertex is null "..nm)
			end
			if mlevel == nil then mlevel = "nil" end
		else
			writelog(" get_object_levelname - vertex_id is null "..nm)
		end
	else
		writelog("get_object_levelname - no obj")
	end
	return mlevel
end

function check_news() --- вызывать по ватчдогу актора
	-- выдать те новости, что успели собраться и сгрупироватся.
	
	if (timer_last_showed + timer_show_freq < game_minutes()) then
		-- Пора показывать, если есть что.
		amk_offline_alife.last_debug_message="cn on_news"
		on_news()
		timer_last_showed = game_minutes()
	end

	spammers = {}

end

function on_wound(obj)
	if obj and obj.name then
		if IsNpcStalker(obj) then
			if math.random() < prob then
				local stype = "single"
				local author_id = obj.id
				if math.random() < 0.5 then stype = "group" end
				local stext = news_data.wound_templates[stype][math.random(table.getn(news_data.wound_templates[stype]))]				
				local m_pos = get_object_position(obj)
				local m_level = ""
				if m_pos then
					m_level = get_point_description(get_object_levelname(obj), m_pos)
					if (m_level == "") then return end
				end
				local sname = get_npc_name(obj)
				local t = { ["level"] = m_level, ["name"] = sname }
				local m_s = ""
				for key0, value in pairs(t) do
					m_s = string.gsub(stext, "%$"..key0, value)
					stext = m_s
				end
				m_s = stext
				local sfrom = sname
				if stype == "group" then
					local name, sname = get_strings()
					sfrom = name.." "..sname
					local author = get_nearest_stalker(get_object_levelname(obj), get_object_position(obj), dist_seen, 0)
					if author and get_npc_name(author) ~= "" then
						s_from = get_npc_name(author)
						author_id = author.id
					end
				end
				--show_news(m_s, sfrom, math.random(timer_stalker_death, timer_stalker_death * 2), 10, "gen_info")
				do_news(m_s, sfrom, math.random(timer_stalker_death, timer_stalker_death * 2), 10, "gen_info", author_id, 1)
				if isGameObject(obj) then
					if (_debug) then level_tasks.add_location_by_id(obj:id(), "red_location", m_s) end
				else
					if (_debug) then level_tasks.add_location_by_id(obj.id, "red_location", m_s) end
				end
			end
		end
	end
end

function news_sort(a,b)
	if a.priority==1 and b.priority ~=1 then
		return false
	end
	return a.created < b.created
	--return a.timeout < b.timeout
end

function on_news() --- вызывать по ватчдогу актора каждые 40-80 секунд
	local avail = {}
	if news_stack then 
		amk_offline_alife.last_debug_message="cn on_news first pass"
		for k,v in pairs(news_stack) do
			if v.activated == nil then
				if (v.lifetime > game_minutes()) then
					if (v.timeout < game_minutes()) then -- Новость актуальна.
						--table.insert(avail, k)
					else
						writelog("Not ready yet - ".. v.from) -- Еще не время.
					end
				else -- Новость устарела.
						writelog("Too old - "..v.from..": "..v.text)
					table.remove(news_stack, k)
				end
			else -- Новость уже была.
				table.remove(news_stack, k)
			end
		end
		amk_offline_alife.last_debug_message="cn on_news sort"
		-- Отсортируем.
		table.sort(news_stack, news_sort)
		--ogse.dump_table(news_stack)
		amk_offline_alife.last_debug_message="cn on_news second pass"
		for k,v in pairs(news_stack) do
			if v.activated == nil then
				if (v.lifetime > game_minutes()) then
					if (v.timeout < game_minutes()) then -- Новость актуальна.
						table.insert(avail, k)
					else
							writelog("Not ready yet - ".. v.from..": "..v.text) -- Еще не время.
					end
				else -- Новость устарела.
						writelog("Too old - "..v.from..": "..v.text)
					table.remove(news_stack, k)
				end
			else -- Новость уже была.
				table.remove(news_stack, k)
			end
		end
	end
	
	if avail and table.getn(avail) > 0 then
		amk_offline_alife.last_debug_message="cn on_news get available"
		--local t = avail[math.random(table.getn(avail))]
		local t = avail[1]
		local z = news_stack[t]
		if (z) then
			local bAlive = false
			local m_author_id = tonumber(z.author_id)
			if (m_author_id ~= nil) then
				amk_offline_alife.last_debug_message="cn on_news check author"
				bAlive = false
				local obj = alife():object(m_author_id)
				amk_offline_alife.last_debug_message="cn on_news check author obj"
				if (obj) then
					amk_offline_alife.last_debug_message="cn on_news author obj exists"
					if IsStalker(obj) then
						amk_offline_alife.last_debug_message="cn on_news author obj is NPC"
						if IsNpcStalker(obj) then
							amk_offline_alife.last_debug_message="cn on_news check author alive"
					if (obj.alive and obj:alive()==true and obj.health and obj:health() > 0) then
						if (_debug == true) then level_tasks.add_location_by_id(obj.id, "red_location", z.from..": "..z.text) end
								amk_offline_alife.last_debug_message="cn on_news author is alive"
						bAlive = true
					end
				end
					end
				end
			else
				bAlive = true
			end
			if (bAlive == true) then
				amk_offline_alife.last_debug_message="cn on_news show_news"
				--show_news(z.from, z.text, z.timeout, z.showtime, z.section)
				show_news(z.text, z.from, 0, z.showtime, z.section)
				amk_offline_alife.last_debug_message="cn on_news set activated"
				z.activated = game_minutes()
			else
				amk_offline_alife.last_debug_message="cn on_news show_news alive is false"
			end
		end
	else
--		writelog("on_news [5] - no news ")
	end	

	amk_offline_alife.last_debug_message="cn on_news continue"

    local gtime = game_minutes()
	
	if (gtime - timer_alife_showed > timer_alife_freq) then
		amk_offline_alife.last_debug_message="cn on_news offline_alife start"
		if ogse.offline_alife_enabled then
			amk_offline_alife.offline_alife()
		end
		amk_offline_alife.last_debug_message="cn on_news offline_alife exit"
		timer_alife_showed = game_minutes()
	end
end

function game_minutes()
	local gtime = level.get_time_days()*60*24+level.get_time_hours()*60+level.get_time_minutes()  --time in game minutes
	return gtime
end

-- Кого-то грохнули в оффлайн.
function on_offline_death(victim, killer, weapon)
	if victim and killer then
		if IsStalker(victim) then
			if IsNpcStalker(victim) then
				on_offline_stalker_death(victim, killer, weapon)
			else
				on_offline_npc_death(victim, killer, weapon)
			end
		end	
	end
end

function on_offline_stalker_death(victim_, killer_, weapon_)
	if victim_ == nil then
		return
	end
	local m_killer = ""
	local m_killer_s = ""
	local m_victim = ""
	local aid = nil
	local good_author = false
	local m_name  = get_npc_name(victim_)
	m_victim = format_death_stalker_corpse(victim_)
	local m_level = get_level_name(get_object_levelname(victim_))
	if killer_ then
		if IsMonster(killer_) then
			m_killer = format_death_by_monster(killer_)
			m_killer_str = get_monster_name(killer_, 2)
		elseif IsAnomaly(killer_) then
			m_killer = format_death_by_anomaly(killer_)
			m_killer_str = get_anomaly_name(killer_, 1)
		elseif IsStalker(killer_) then
			local m_o_weapon = weapon_
			local m_s_weapon = ""
			if (m_o_weapon) then
				m_s_weapon = get_weapon_type(m_o_weapon)
				if (m_s_weapon < 5) then m_killer_str = game.translate_string("news_amk_type_weapon_1_text") end
				if (m_s_weapon == 6) then m_killer_str = game.translate_string("news_amk_type_weapon_2_text") end
				if (m_s_weapon == 8) then m_killer_str = game.translate_string("news_amk_type_weapon_3_text") end
				if (m_s_weapon == 7 or m_s_weapon == 5) then m_killer_str = game.translate_string("news_amk_type_weapon_4_text") end
			end
			m_killer = format_death_by_weapon(weapon_)
		else
			m_killer_str = game.translate_string("news_amk_death_unkown_text")
			m_killer = ""
			--writelog("On offline stalker death - unknown killer. "..killer:name().." clsid="..get_clsid(killer))				
		end
	end
	if (m_killer_str==nil or m_killer_str=="") then m_killer_str = game.translate_string("news_amk_death_unkown_text") end
	local m_string = m_name..", "..m_level..", "..m_killer_str.."."
	writelog("Offline: Погиб сталкер: "..m_string) 
	do_news(m_string, game.translate_string("news_amk_stalker_killed_text"), math.random(timer_stalker_death, timer_stalker_death * 5), 10, "death") 

	if (math.random() < prob) then
		local name, sname = get_strings()
		local s_author = "" --name.." "..sname
		local m_str = ""
		if (math.random() < 0.5) then
			if (math.random() < 0.5) then
				m_str = m_victim.." "..m_killer..""
			else
				m_str = m_victim..""
			end
			local author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_seen, 0)
			if (author) then
				s_author = get_npc_name(author)
				aid = author.id
				good_author = true
			end			
		else
			local author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_hear_max, dist_hear_min)
			if (author) then
				s_author = get_npc_name(author)
				aid = author.id
				local author_rank = get_npc_rank(author)
				if author_rank == "novice" or (author_rank == "experienced" and (math.random() < 0.5)) then
					good_author = false
				end
			else
				return
			end		
			m_str = format_death_hear_sounds(victim_, killer_, weapon_)
		end
		if (m_str ~= "" and s_author ~= "" and good_author) then
			writelog("Offline: "..s_author.." "..m_str) 
			do_news(m_str, s_author, math.random(timer_corpse, timer_corpse *5), 15, "gen_info", aid)
		end
	end
end

function on_offline_npc_death(victim_, killer_, weapon_)
	if victim_ == nil then
		return
	end
	local m_victim = ""
	local m_killer = ""
	local aid = nil
	m_victim = format_death_npc_corpse(victim_)
	if killer_ then
		if IsMonster(killer_) then
			m_killer = format_death_by_monster(killer_)
		elseif IsStalker(killer_) then
			m_killer = format_death_by_weapon(weapon_)
		elseif IsAnomaly(killer_) then
			m_killer = format_death_by_anomaly(killer_)
		else
			m_killer = ""
			writelog("On offline npc death - unknown killer. "..killer:name().." clsid="..get_clsid(killer))				
		end
	else
		writelog("Хм. no killer. "..victim_:name())
	end
	if math.random() < prob then
		local name, sname = get_strings()
		local s_from = "" --name.." "..sname
		local s_author = s_from
		local m_str = ""
		local good_author = false
		if math.random() < 0.5 then
			if math.random() < 0.5 then
				m_str = m_victim.." "..m_killer..""
			else
				m_str = m_victim..""
			end
			local author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_seen, 0)
			if author then
				s_author = get_npc_name(author)
				s_from = s_author
				aid = author.id
				good_author = true
			end			
		else
			local author = get_nearest_stalker(get_object_levelname(victim_), get_object_position(victim_), dist_hear_max, dist_hear_min)
			if author then
				s_author = get_npc_name(author)
				s_from = s_author
				aid = author.id
				local author_rank = get_npc_rank(author)
				if author_rank == "novice" or (author_rank == "experienced" and (math.random() < 0.5)) then
					good_author = false
				end
			else
				return
			end		
			m_str = format_death_hear_sounds(victim_, killer_, weapon_)
		end
		if m_str ~= "" and s_from ~= "" and good_author then
			writelog("Offline: "..s_from.." "..m_str) 
			do_news(m_str, s_from, math.random(timer_corpse, timer_corpse *5), 15, "gen_info", aid)
		end
	end
end

-- Кого-то ранили в оффлайн.
function on_offline_wound(victim)
	if (victim) then
		writelog("Offline: "..victim:name().." is wounded") 
		on_wound(victim)
	end
end

function point_is_far(point, lv, gv, distance)
	local result = true
	if (db.actor and point and lv and gv and distance and game_graph():valid_vertex_id(gv)) then
		-- на одном ли уровне?
		local map = alife():level_name(game_graph():vertex(gv):level_id())
		if (map and level.name() == map) then
			-- Достаточно ли далеко?
			if (point:distance_to(db.actor:position()) < distance) then
				result = false
			end
		end
   end
   return result
end

function get_nearest_stalker(level, point, dist_max, dist_min)
	local obj = nil
	local map = level
	local min_dist = 1000000
	if (dist_max == nil or dist_max == 0) then dist_max = dist_seen end
	if (dist_min == nil) then dist_min = 0 end
	if (map and point and amk_offline_alife.off_npcs[map] and amk_offline_alife.off_npcs[map].stalkers and table.getn(amk_offline_alife.off_npcs[map].stalkers) > 0) then
		for k, v in pairs(amk_offline_alife.off_npcs[map].stalkers) do
			if v then
				local stalker = alife():object(v.id)
				-- На одном ли уровне?
				if stalker and stalker.id ~= db.actor:id() and stalker.health and stalker.can_switch_online and stalker:can_switch_online() and stalker.m_game_vertex_id and game_graph():valid_vertex_id(stalker.m_game_vertex_id) then
					local s_map = alife():level_name(game_graph():vertex(stalker.m_game_vertex_id):level_id())
					if (map == s_map) then
						if (stalker:health() > 0 and stalker.alive and stalker:alive()==true) then
							local zz = get_npc_community(stalker)
							if (zz == "stalker" or zz == "dolg" or zz == "freedom") then -- это сталкер
								if (stalker.name and stalker:name() ~= "agr_ratcatcher") then
								-- Достаточно ли далеко?
									local s_dist = stalker.position:distance_to(point)
									if (s_dist <= dist_max and s_dist >= dist_min and s_dist < min_dist) then
										-- А не спамил ли он в последнее время?
										local b_ok = true
										if (spammers and table.getn(spammers) > 0) then
											local sn = get_npc_name(stalker)
											if (sn ~= "" and sn ~= nil) then
												for sk, sv in pairs(spammers) do
													if (sv == sn) then
														b_ok = false
														break
													end
												end
											end
										end
										if (b_ok == true) then
											min_dist = s_dist
											obj = stalker
										end
									end
								end
							end
						end
					end
				end
			end
		end
	end
	return obj
end

function isAlive(story_id)
	local result = false
	if (story_id) then
		local obj = alife():story_object(story_id)
		if (obj and obj.alive and obj:alive()==true) then
			result = true
		end
	end
	return result
end

function isRadarDeactivated()
	local result = false
	if (has_alife_info("bar_deactivate_radar_done")) then
		result = true
	end
	return result
end

local fnames={}

for i=1,99 do
	fnames[i] = game.translate_string("name_stalker_"..tostring(i))
end

local snames={}

for i=1,850 do
	snames[i] = game.translate_string("lname_stalker_"..tostring(i))
end

function get_strings()
	local name=fnames[math.random(table.getn(fnames))]
	local sname=snames[math.random(table.getn(snames))]
	return name,sname
end

