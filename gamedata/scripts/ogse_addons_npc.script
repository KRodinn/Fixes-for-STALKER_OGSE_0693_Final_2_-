-- -*- mode: lua; coding: windows-1251-dos -*-
--НПС могут прикреплять к своему оружию прицелы, гранатомёты, глушители, планки, ручки и тд.
--Сделано специально под систему ogse_addons.
--KRodin (c) 2017

local addons_flags = ogse_wpn_utils.addons_flags

-- Установка аддона методом пересоздания объекта ствола
local function install_remove_addon(cur_weapon, fake_addon, real_addon_section, installed_addon_flag, new_wpn_section, npc) --взято из модуля ogse_addons
	local s_cur_weapon = alife():object(cur_weapon:id())
	if not s_cur_weapon then return false end --на всякий случай
	--
    local cur_wpn = s_cur_weapon:get_weapon()
    local cur_wpn_ammo_type = cur_wpn.ammo_type
    local cur_wpn_ammo_elapsed = cur_wpn.ammo_elapsed
	local cur_wpn_addon_flags = cur_wpn.addon_flags
	local cur_wpn_condition = s_cur_weapon:get_inventory_item().item_condition
	local cur_wpn_cd = s_cur_weapon.custom_data
	--
	local removed_addon_flags = 0
	--
	if cur_wpn_addon_flags:is( installed_addon_flag ) then
		removed_addon_flags = installed_addon_flag
	elseif installed_addon_flag == addons_flags.grip and cur_wpn_addon_flags:is( addons_flags.gl ) then
		removed_addon_flags = addons_flags.gl
	elseif installed_addon_flag == addons_flags.gl and cur_wpn_addon_flags:is( addons_flags.grip ) then
		removed_addon_flags = addons_flags.grip
	elseif installed_addon_flag == addons_flags.scope_mount and cur_wpn_addon_flags:is( addons_flags.scope ) then
		removed_addon_flags = addons_flags.scope
	end
	--
	if removed_addon_flags ~= 0 then
		--log3("!![%s] removed_addon_flags ~= 0!!!", script_name())
		for flag_name, removed_addon_flag in pairs(addons_flags) do
			if bit_and(removed_addon_flags, removed_addon_flag) ~= 0 then
				--log3("!![%s] Can't install addon for wpn [%s] : [%s](%s) Found addon for remove!!!", script_name(), cur_weapon:name(), fake_addon:name(), real_addon_section)
				return false --KRodin: снятие аддонов делать смысла не вижу, так что в такой ситуации просто выходим
			end
		end
	end
	--
	npc:drop_item(cur_weapon) --на всякий случай
	alife():release(s_cur_weapon, true) -- удаляем старый ствол
	npc:drop_item(fake_addon)
	local s_fake_addon = alife():object(fake_addon:id())
	if s_fake_addon then
		alife():release(s_fake_addon, true) -- удаляем использованный аддон
	end
  --
  local sm_slot = {
    signal = "se_item:on_before_register",
	fun = function( sobj )
      local iitem = sobj:get_inventory_item()
      iitem.item_condition = cur_wpn_condition -- переносим состояние ствола
      sobj.custom_data = cur_wpn_cd -- кастомдату
      local wpn = sobj:get_weapon()
      wpn.ammo_type    = cur_wpn_ammo_type -- тип боеприпаса
      wpn.ammo_elapsed = cur_wpn_ammo_elapsed -- количество боеприпаса
      cur_wpn_addon_flags:set( removed_addon_flags, false ) --Наверное оно не нужно, но пусть будет...
	  cur_wpn_addon_flags:set( installed_addon_flag, true )
	  wpn.addon_flags = cur_wpn_addon_flags
    end
  }
  ogse_signals.get_mgr():subscribe( sm_slot )
  ogse.spawn_item_in_inv(new_wpn_section, npc) --Спавним новый ствол с установленным аддоном.
  ogse_signals.get_mgr():unsubscribe( sm_slot )
  --
  return true
end

local function process(npc)
	local wpn_table = {}
	local addon_table = {}
	--
	npc:iterate_inventory( function(_, obj)
		if not alife():object(obj:id()) then return end
		--
		--Сюда почему-то периодически попадают объекты, находящиеся в процессе удаления. Никакие проверки типа getDestroy() в движке не помогают, поэтому такую конструкцию написал:
		local sect
		local res, err = pcall(function() sect = obj:section(); end)
		if not res then
			log3("!![%s] Destroyed object found!", script_name())
			return
		end
		ASSERT(sect, "")
		--
		if obj:is_weapon_magazined() then --Заносим в таблицу все стволы в инвентаре НПС
			wpn_table[obj] = sect
		else
			local addon_type = ogse_addons.get_addon_type(sect)
			if addon_type ~= 0 then --Заносим в таблицу все аддоны в инвентаре НПС
				addon_table[obj:id()] = addon_type
			end
		end
	end )
	--
	for wpn_obj, wpn_sect in pairs(wpn_table) do --Перебираем все стволы в инвентаре НПС.
		for addon_id, addon_type in pairs(addon_table) do
			local addon_obj = level.object_by_id( addon_id )
			local addon_sect = addon_obj:section()
			local new_wpn_section = ogse_addons.get_converted_wpn_section(wpn_sect, addon_sect) -- получаем секцию сконвертированного ствола
			if
				get_u32(addon_sect, "is_shotgun") ~= 1 --Аддон не является подствольным дробовиком
				and ogse_addons.is_addon_removable(wpn_sect, addon_type) --Ствол поддерживает установку аддонов данного типа
				and new_wpn_section
				and not ogse_addons.is_addon_installed( wpn_obj, addon_type ) --Такой аддон на стволе ещё не установлен
			then
				--log3("--[%s] new wpn section for wpn [%s] and addon [%s] : %s", script_name(), wpn_obj:name(), addon_sect, new_wpn_section)
				if install_remove_addon(wpn_obj, addon_obj, addon_sect, addon_type, new_wpn_section, npc) then --Если удалось установить аддон
					--log3("--[%s.%s] Installed addon [%s] on weapon [%s]", script_name(), npc:name(), addon_sect, wpn_sect)
					addon_table[addon_id] = nil --удаляем из таблицы, т.к этого аддона больше не существует
					break --переходим к следующему стволу
				end
			end
		end
	end
end


function attach( sm )
  sm:subscribe({ signal = "on_npc_death", fun = this.on_death })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
  sm:subscribe({ signal = "on_npc_item_take", fun = this.on_take })
end

function on_npc_spawn( obj, binder )
  if not obj:alive() then return end
  if rx_utils.IsTrader( obj ) then return end
  local s = {
    [ "signal" ] = "on_npc_update." .. obj:id(),
    [ "fun"    ] = this.npc_update,
    [ "queued" ] = true,
  }
  binder[ script_name() .. ".subscribed" ] = s
  ogse_signals.get_mgr():subscribe( s )
  obj:binded_object()[ script_name() .. ".need_update" ] = true
end

function on_death( obj )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name() .. ".subscribed" ]
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
    binder[ script_name() .. ".subscribed" ] = nil
    obj:binded_object()[ script_name() .. ".need_update" ] = nil
  end
end

function on_take( npc, obj ) --Если непись подобрал ствол, или какие-то аддоны, разрешаем апдейт
	if obj:is_weapon_magazined() or ogse_addons.get_addon_type(obj:section()) ~= 0 then
		--log3("[%s]: [%s] take [%s]", script_name(), npc:name(), obj:name())
		npc:binded_object()[ script_name() .. ".need_update" ] = true
	end
end

function npc_update( npc )
  if not npc:binded_object()[ script_name() .. ".need_update" ] then
    ogse_signals.get_mgr():reschedule( math.random( 60000, 100000 ) )
    return
  end

  if not ( npc:best_enemy() or xr_wounded.is_wounded( npc ) or npc:is_talking() ) then
    process( npc )
    npc:binded_object()[ script_name() .. ".need_update" ] = nil
  end

  ogse_signals.get_mgr():reschedule( math.random( 60000, 100000 ) )
end
