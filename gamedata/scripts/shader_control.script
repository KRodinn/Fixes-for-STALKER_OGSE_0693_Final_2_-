--
-- File: shader_switch.script
-- Author: Meltac; Copyright 2011
-- Corrections, bugixes, perfomance tweak: KamikaZze, OGSE Team (c) 2011

local is_valid_game_ver = tostring(type(level.get_target_dist)) == "function"	--- this is not needed to be executed every update. One time at game start is enough.
local debug_flag = false

-- General variables
local enabled = false

-- Zoom DOF variables
local zoom_user_setting = "r2_aa"
local shader_normal_value = "off"
local shader_altern_value = "on"

--local no_zoom_fov = 75
local no_zoom_fov = system_ini():r_s32("options","fov_volume")  --- in OGSE this is read from config

-- Dynamic DOF variables (also used for zoom dov)
local ddof_user_setting = "r2_aa_weight"   -- default value is 0.7
local use_zoom_dof = true

local check_interval = 200  -- millisecs to check... must not be lesser 200 msec

local last_fov = nil
local last_dist_val = nil
local last_fov_val = nil

local count = 0
local count_zoom = 0

local is_zoomed = false

local excludes_weapons = {
	["wpn_binoc"] = true,
	["wpn_knife"] = true,
	["wpn_montirovka"] = true,
	["wpn_pkm"] = true,
	["wpn_m_134"] = true,
	["wpn_toz34_short"] = true,
	["wpn_bm16"] = true,
	["grenade_f1"] = true,
	["grenade_rgd5"] = true,
	["grenade_light"] = true,
	["grenade_gas"] = true,
	["grenade_gd-05"] = true
}

local render =  device() -- strictly prohibited to start this more than one per script
local next_update = nil

function chek_keys(key, bind)
	if bind == key_bindings.kWPN_ZOOM then
		if level.main_input_receiver() then return end
		local act_itm = db.actor:active_item()
		if act_itm and isWeapon(act_itm) then
			count = 0
		end
	end
end

function chek_keys_free(key, bind)
	if bind == key_bindings.kWPN_ZOOM then
		if level.main_input_receiver() then return end
		local act_itm = db.actor:active_item()
		if act_itm and isWeapon(act_itm) then
			is_zoomed = false
		end
	end
end

function chek_keys_hold(key, bind)
	if bind == key_bindings.kWPN_ZOOM then
		if level.main_input_receiver() then return end
		local act_itm = db.actor:active_item()
		if act_itm and isWeapon(act_itm) then
			is_zoomed = true
		end
	end
end

function Update()

	if not enabled then return false end
	
	if next_update and next_update > time_global() then
		return false
	else	
		next_update = time_global() + check_interval
	end

	if debug_flag then log1("---------") end
	
	if last_fov == nil then	
		last_fov = no_zoom_fov
	end
	
	local round_last_fov = math.ceil(last_fov)
	
	local current_fov = math.ceil(render.fov)
	
	if debug_flag then log1("!!C_FOV "..current_fov)  end
	if debug_flag then log1("!!LAST_FOV "..round_last_fov)  end
	
	local fov_val = tostring(current_fov * 0.001)
	
	use_zoom_dof = true
	
	local cur_item = db.actor:active_item()
	if cur_item then
		local wpn_name = cur_item:section()
		use_zoom_dof = not excludes_weapons[wpn_name] -- There is no need in complicated functions. This is really simple to check.
	end
	
	local zoom_val = 0
	
	if is_zoomed and use_zoom_dof then
		if count_zoom < 2 then
			zoom_val = 1
			get_console():execute(zoom_user_setting .. " " .. shader_altern_value)
			count_zoom = count_zoom + 1
			count = 0
			if debug_flag then log1("--DDOF SET ZOOM_IN") end
		end
	else
		if count < 2 then
			zoom_val = 0
			get_console():execute(zoom_user_setting .. " " .. shader_normal_value)
			count = count + 1
			count_zoom = 0
			if debug_flag then log1("--DDOF SET ZOOM_OUT") end
		end
	end
	
	local dist_val = 1 -- 1000 meters
	
	if is_valid_game_ver then
		dist_val = tostring(math.floor(level.get_target_dist()) * 0.001)
		if tonumber(dist_val) > 1 then
			dist_val = "1"
		end
	end
	
	if (not last_dist_val or last_dist_val ~= dist_val) or (not last_fov_val or last_fov_val ~= fov_val) then
		get_console():execute(ddof_user_setting .. " " .. dist_val .. "," .. fov_val .. "," .. zoom_val)
		last_dist_val = dist_val
		last_fov_val = fov_val
		if debug_flag then log1("~~DDOF_DISTANCE "..dist_val.." FOV "..fov_val) end
	end
	
	if debug_flag then log1("---------") end
	
end


-- Enables or disables the update function of this script.
function toggle()
	enabled = not enabled
end
function enable(value)
	enabled = value
end
