local bar_exceptions = {
   [4294967296] = true,
   [story_ids.second_neutral] = true,
   [story_ids.bar_kulg_agent] = true,
   [story_ids.bar_sergant_jivoderov] = true,
   [story_ids.izgoy_lider] = true,
   [story_ids.izgoy_pomoshnik] = true,
   [story_ids.izgoy_first_patient] = true,
   [story_ids.izgoy_second_patient] = true
}
local military_online_npc = {
	[story_ids.Mil_Lukash]     = true, -- Лукаш
	[story_ids.Mil_Miser]      = true, -- Скряга
	[story_ids.Mil_Master_Max] = true, -- Макс
	[story_ids.Mil_Cook]       = true, -- повар
}
local function cannot_be_offline(npc)
	if alife():level_id() == 7 then
		local story = 4294967296
		if npc then
			if npc.m_story_id ~= nil then
				story = npc.m_story_id
			else
				story = npc:story_id()
			end
		end
		return not bar_exceptions[story]
	elseif alife():level_id() == 1 then
		local profile = npc:profile_name()
		if profile == "esc_wolf" or 
		   profile == "esc_shustryi"
		then
			return true
		end
	elseif alife():level_id() == 11 then
		if military_online_npc[npc.m_story_id] then return true end
		local profile = npc:profile_name()
		if profile == "mil_Svoboda_engineer" -- для Шурупа нет story_id, надо бы добавить
		then
			return true
		end
	end
	return false
end

class "se_stalker"	(cse_alife_human_stalker)
function se_stalker:__init (section) super (section)
	self.ini = nil
	self.ini_initialized = false

	self.smart_terrain_conditions = nil

	-- этот флаг берётся из работы смарта
	-- true     = всегда в онлайне
	-- false    = всегда в офлайне
	-- condlist = условие, которое отпределяет true или false
	-- nil      = смарту всё равно
	self.job_online          = nil
	self.job_online_condlist = nil

	-- посещал ли сталкер хоть один smart_terrain
	self.was_in_smart_terrain = false

	self.death_dropped = 0 --Генерил ли персонаж выпадаемые предметы или нет. (0 - нет, 1 - да)

	--' Флаг смерти в оффлайне
	self.offline_dead = 0

	--' Хранилище данных
	self.s_storage = "_"
end
--------------------
function se_stalker:get_ini()
	if not self.ini_initialized then
		self.ini             = self:spawn_ini ()
		self.ini_initialized = true

		if self.ini:section_exist("spawner") then
			self.spawner = xr_logic.parse_condlist(db.actor, "spawner", "cond", self.ini:r_string("spawner", "cond"))
		end
	end
end
--------------------
function se_stalker:get_job_online()
	if self.job_online_condlist == nil then
		return self.job_online
	else
		return xr_logic.pick_section_from_condlist(db.actor_proxy, self, self.job_online) ~= nil
	end
end
--------------------
function se_stalker:can_switch_offline ()
	local can_be_offline = false
	if self.force_offline then
		can_be_offline = true
	else	
		if cannot_be_offline(self) then
			can_be_offline = false
		else	
			if self:get_job_online() ~= nil then
				can_be_offline = not self:get_job_online()
			else
				can_be_offline = cse_alife_human_stalker.can_switch_offline (self)
			end
		end
	end
	if
		xr_companion.is_companion(self.id) 
		and (db.actor and db.actor:position():distance_to(self.position) < 150) 
		and not self.force_offline
	then
		return false
	end	
	return can_be_offline
end
--------------------
function se_stalker:can_switch_online ()
	if self.force_offline then
		return false
	end
	if xr_companion.is_companion(self.id) and (db.actor and db.actor:position():distance_to(self.position) < 150) then
		return true
	end		
	if cannot_be_offline(self) then
		return true
	end

	if self:get_job_online() ~= nil then
		return self:get_job_online()
	end

	if self.ini == nil or self.spawner == nil then
		return cse_alife_human_stalker.can_switch_online(self)
	end
    
    if db.actor and not db.actor:alive() then
		return self.online
    end
    
	if self.online == false then
	    return (xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil) and cse_alife_human_stalker.can_switch_online(self)
    else
        return xr_logic.pick_section_from_condlist(db.actor, self, self.spawner) ~= nil
    end    	    
end
--------------------
function se_stalker:STATE_Write (packet)
	cse_alife_human_stalker.STATE_Write (self, packet)

	if self.job_online == true then
		packet:w_u8(0)
	elseif self.job_online == false then
		packet:w_u8(1)
	elseif self.job_online == nil then
		packet:w_u8(2)
	else
		packet:w_u8(3)
		packet:w_stringZ(self.job_online_condlist)
	end

	packet:w_bool(self.was_in_smart_terrain)

	packet:w_u8(self.death_dropped)

	--if self.id ~= 65535 then --Разве такое может быть?
		packet:w_u32(self.offline_dead)
		packet:w_stringZ(self.s_storage) -- допишем его к пакету
	--end
end
--------------------

function se_stalker:STATE_Read (packet, size)
	cse_alife_human_stalker.STATE_Read (self, packet, size)

	local t = packet:r_u8()

	if t == 0 then
		self.job_online = true
	elseif t == 1 then
		self.job_online = false
	elseif t == 2 then
		self.job_online = nil
	else
		self.job_online_condlist = packet:r_stringZ()
		self.job_online = xr_logic.parse_condlist(nil, "se_stalker:STATE_Read", "job_online", self.job_online_condlist)
	end

	self.was_in_smart_terrain = packet:r_bool()

	self.death_dropped = packet:r_u8()

	--if self.id ~= 65535 then --Разве такое может быть?
		self.offline_dead = packet:r_u32()
		self.s_storage = packet:r_stringZ() -- если есть, загрузим из сохранённой строки			
	--end
end
--------------------
function se_stalker:on_before_register()
	ogse_signals.get_mgr():call( "se_stalker_on_before_register", self )
	self:fill_exclusives()
	xr_companion.is_companion_se(self)
	if self.has_none_true or xr_companion.is_companion(self.id) then
		self:brain():can_choose_alife_tasks( false )
	end
end
--------------------
local forbidden_comms = {
	["zombied"] = true,
	["monolith"] = true,
	["arena_enemy"] = true
}
function se_stalker:on_register()
	cse_alife_human_stalker.on_register( self )

	if not forbidden_comms[self:community()] then
		actor_stats.add_to_ranking(self.id)
	end

	if
		self:smart_terrain_id() == 65535
		and self:alive()
		and not self.has_none_true
		and not xr_companion.is_companion(self.id)
	then
		self:brain():update()
	end

	-- получаем имя персонажа для быстрого доступа в дальнейшем
	local pk = get_netpk(self, 1)
	ASSERT( pk:isOk(), "can't read netpacket of %s", self:name() )
	local data = pk:get()
	self._charname = data.character_name

	alife():set_interactive( self, true )
end
function se_stalker:character_name()
	return self._charname -- не меняется
end

--------------------
function se_stalker:on_unregister()
	cse_alife_human_stalker.on_unregister(self)

	smart_terrain.unregister_npc(self)

	if not forbidden_comms[self:community()] then
		actor_stats.remove_from_ranking(self.id)
	end
end
--------------------
function se_stalker:on_death(killer)
	cse_alife_human_stalker.on_death(self, killer)

	-- Удаление меток с квестовых персонажей
	if level.map_has_object_spot(self.id, "green_location") ~= 0 then
		level_tasks.remove_location_by_id(self.id, "green_location") 
	end

	-- почистим отношения
	ogse_signals.get_mgr():call("on_release_npc", self.id)
end
--------------------
function se_stalker:fill_exclusives()
	self:get_ini()
	self.smart_terrain_conditions, self.has_none_true = smart_terrain.read_smart_terrain_conditions( self )

	if self.smart_terrain_conditions then
		for name, condlist in pairs(self.smart_terrain_conditions) do
			smart_terrain.exclusives[name] = (smart_terrain.exclusives[name] or 0) + 1
		end
	end
end


--'Торговец
class "se_trader" (cse_alife_trader)
function se_trader:__init (section) super (section)
  --' Хранилище данных
  self.s_storage = "_"
end

function se_trader:STATE_Write( packet )
  cse_alife_trader.STATE_Write( self, packet )
  packet:w_stringZ( self.s_storage ) -- допишем его к пакету
end

function se_trader:STATE_Read( packet, size )
  cse_alife_trader.STATE_Read( self, packet, size )
  if not packet:r_eof() then
    -- если есть, загрузим из сохранённой строки
    self.s_storage = packet:r_stringZ()
  end
end

function se_trader:keep_saved_data_anyway()
	return true
end
