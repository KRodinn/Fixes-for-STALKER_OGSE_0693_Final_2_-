-----------------------------------------------------------------------
--- ogse_detectors.script
--- Скриптовая оболочка детекторов в руках
--- Авторы: K.D., KamikaZze
--- version 1.7.00 (23/01/2015)
-----------------------------------------------------------------------
--- TODO: Вынести все настройки, относящиеся непосредственно к 
--- детектору (распознаваемые аномалии и т.п), в его конфиг вещи
--- Сделать разделение по звукам между детекторами
--- Сделать деление по определяемым аномалиям между детекторами
-----------------------------------------------------------------------

function attach(sm) -- для менеджера сигналов
	--sm:subscribe({signal = "on_spawn",    fun = this.on_spawn})
	--sm:subscribe({signal = "on_finalize", fun = this.on_finalize})
	sm:subscribe({signal = "on_key_down", fun = this.on_key_down})
	--sm:subscribe({signal = "on_key_up",   fun = this.on_key_up})
	--sm:subscribe({signal = "on_key_hold", fun = this.on_key_hold})
	--sm:subscribe({signal = "on_wheel",    fun = this.on_wheel})
	sm:subscribe({signal = "on_update",   fun = this.on_update})
	sm:subscribe({signal = "on_first_update",   fun = this.on_first_update})
	--sm:subscribe({signal = "on_info",     fun = this.on_info})
end

local MAX_ARTEFACTS = 8

local total_debug = get_console():get_bool("write_debug_log")

function write_log(str)
	if total_debug then
		log1(str)
	end
end

function on_first_update()
	set_detector_mode(0, 9)
end

local detector_hud_active = false
local upgrade_mode_active = false

local upgrade_frequency = 0
local snd_beep = xr_sound.get_safe_sound_object("detectors\\da-2_beep1")
local detect_radius = 12
local map_radius = 30
local beep_period = 1000
local click_peroid = 1500
local miminal_click_period = 120
local miminal_beep_period = 150
geiger_radius = 15

local minimap_detectors = {
	["interactive_detector_elite"] = {
		["_mosquito_bald"] = "anomaly_bald_location",
		["_mincer"] = "anomaly_minc_location",
		["_gravi_zone"] = "anomaly_grav_location",
		["_radioactive"] = "anomaly_rad_location",
		["_witches_galantine"] = "anomaly_elec_location",
	--	["_mine_field"] = "anomaly_mine_location",
		["_zharka_static"] = "anomaly_burn_location",
		["_ameba"] = "anomaly_hvat_location",
		["_hvatalka"] = "anomaly_hvat_location",
		["_liana"] = "anomaly_liana_location",
		["_burning_fuzz"] = "anomaly_hvat_location",
		["_buzz"] = "anomaly_buzz_location",
	},
}

local detectors_presets = {
	["interactive_detector_simple"] = {
		["_mosquito_bald"] = true,
		["_mincer"] = true,
		["_gravi_zone"] = true,
		["_witches_galantine"] = false,
		["_mine_field"] = false,
		["_zharka_static"] = false,
		["_ameba"] = false,
		["_hvatalka"] = false,
		["_liana"] = false,
		["_burning_fuzz"] = false,
		["_buzz"] = false,
	},
	["interactive_detector_advanced"] = {
		["_mosquito_bald"] = true,
		["_mincer"] = true,
		["_gravi_zone"] = true,
		["_witches_galantine"] = true,
		["_mine_field"] = false,
		["_zharka_static"] = true,
		["_ameba"] = false,
		["_hvatalka"] = false,
		["_liana"] = false,
		["_burning_fuzz"] = false,
		["_buzz"] = true,		
	},
	["interactive_detector_elite"] = {
		["_mosquito_bald"] = true,
		["_mincer"] = true,
		["_gravi_zone"] = true,
		["_witches_galantine"] = true,
		["_mine_field"] = false,
		["_zharka_static"] = true,
		["_ameba"] = true,
		["_hvatalka"] = true,
		["_liana"] = true,
		["_burning_fuzz"] = true,
		["_buzz"] = true,		
	},
}

local last_detector_sect = "__"

local strange_zones_by_frequency = {
	[0] = {name = "", id = 0},
	[1] = {name = "strange_zone5", id = 5},
	[2] = {name = "strange_zone2", id = 2},
	[3] = {name = "strange_zone1", id = 1},
	[4] = {name = "strange_zone7", id = 7},
	[5] = {name = "strange_zone3", id = 3},
	[6] = {name = "strange_zone4", id = 4},
	[7] = {name = "strange_zone6", id = 6},
	[8] = {name = "", id = 0},
}

function are_actor_in_strange_zone()
	for i=1,7 do
		if xr_conditions.actor_in_zone(nil,nil,{strange_zones_by_frequency[i].name}) then
			return true
		end	
	end
	return false
end

function check_actor_in_zone_action(frequency)
	write_log("!!IMPULSE_SCANNER check ["..tostring(frequency).."]")
	if not strange_zones_by_frequency[frequency] then
		write_log("!!IMPULSE_SCANNER INVALID FREQ ["..tostring(frequency).."]")
		return
	else	
		write_log("!!IMPULSE_SCANNER check zone ["..tostring(strange_zones_by_frequency[frequency].name).."]")
	end	
	if xr_conditions.actor_in_zone(nil,nil,{strange_zones_by_frequency[frequency].name}) then
		soundtrack.afscanner_click3()
		write_log("!!IMPULSE_SCANNER check info [".."strangezone"..tostring(strange_zones_by_frequency[frequency].id).."_rebuild".."]")
		if db.actor:has_info("strangezone"..tostring(strange_zones_by_frequency[frequency].id).."_rebuild") then
			if jekan_work["afscanner_impulse"..tostring(strange_zones_by_frequency[frequency].id)] then
				write_log("!!IMPULSE_SCANNER START_FUNC [jekan_work.".."afscanner_impulse"..tostring(strange_zones_by_frequency[frequency].id).."]")
				jekan_work["afscanner_impulse"..tostring(strange_zones_by_frequency[frequency].id)]()
			else
				write_log("!!IMPULSE_SCANNER CANT_FIND!!! [jekan_work.".."afscanner_impulse"..tostring(strange_zones_by_frequency[frequency].id).."]")
			end
		elseif db.actor:has_info("strangezone"..tostring(strange_zones_by_frequency[frequency].id).."_has_same_art") then
			write_log("!!IMPULSE_SCANNER check info [".."strangezone"..tostring(strange_zones_by_frequency[frequency].id).."_has_same_art".."]")
			news_manager.send_tip(db.actor, "strange_zone_af_need_reload", nil, "anomal", 5000, nil)
		else
			news_manager.send_tip(db.actor, "strangezone_empty", nil, "anomal", 5000, nil)
		end	
	end
end

function actor_has_detector()
	if not db.actor or not db.actor:alive() then return false end -- нет актора - нечего делать
	--if level.main_input_receiver() then return false end
	local detector_in_slot = db.actor:item_in_slot(8)
	if detector_in_slot and string.find(detector_in_slot:section(), "interactive_detector") then
		last_detector_sect = detector_in_slot:section()
		return true
	end
	return false
end

function actor_has_elite_detector()
	if not db.actor or not db.actor:alive() then return false end -- нет актора - нечего делать
	--if level.main_input_receiver() then return false end
	local detector_in_slot = db.actor:item_in_slot(8)
	if detector_in_slot and string.find(detector_in_slot:section(), "interactive_detector_elite") then
		last_detector_sect = detector_in_slot:section()
		return true
	end
	return false
end

function marks_on_minimap(obj)
	local mark = "none"
	if obj then
		local detector_marks = minimap_detectors[last_detector_sect]
		if detector_marks then
			local sect = obj:section()
			for k, v in pairs(detector_marks) do
				if string.find(sect, k) and not string.find(sect, "nodetect") then
					mark = v
					return mark
				end
			end
		end	
	end
	return "none"
end

function need_marks_on_minimap(obj)
	if	not actor_has_detector()
		or not is_detectable_by_current_detector(obj)
	then
		return false
	end

	local dist_to_actor = obj:position():distance_to(db.actor:position())
	local sect = obj:section()
	if dist_to_actor <= map_radius then
		return true
	end
	return false
end

function is_detectable_by_current_detector(obj)
	local detector_preset = detectors_presets[last_detector_sect]
	if detector_preset and obj then
		local sect = obj:section()
		for k, v in pairs(detector_preset) do
			if string.find(sect, k) and not string.find(sect, "nodetect") and v == true then
				return true
			end
		end	
	end
	return false
end


function set_hud_tip_clean()
	local hud = get_hud()
	local info = hud:GetCustomStatic("detector_upgrade_hud")
	if not info then
		hud:AddCustomStatic("detector_upgrade_hud", true)
		info = hud:GetCustomStatic("detector_upgrade_hud"):wnd()
		info:SetText("")
	else
		info = hud:GetCustomStatic("detector_upgrade_hud"):wnd()
		info:SetText("")
	end
end

function set_hud_tip_normal()
	local hud = get_hud()
	local info = hud:GetCustomStatic("detector_upgrade_hud")
	if not info then
		hud:AddCustomStatic("detector_upgrade_hud", true)
		info = hud:GetCustomStatic("detector_upgrade_hud"):wnd()
		info:SetText(game.translate_string("detector_normal_tip"))
	else
		info = hud:GetCustomStatic("detector_upgrade_hud"):wnd()
		info:SetText(game.translate_string("detector_normal_tip"))
	end
end

function set_hud_tip_upgrade()
	local hud = get_hud()
	local info = hud:GetCustomStatic("detector_upgrade_hud")
	if not info then
		hud:AddCustomStatic("detector_upgrade_hud", true)
		info = hud:GetCustomStatic("detector_upgrade_hud"):wnd()
		info:SetText(game.translate_string("detector_upgrade_tip"))
	else
		info = hud:GetCustomStatic("detector_upgrade_hud"):wnd()
		info:SetText(game.translate_string("detector_upgrade_tip"))
	end
end

function on_key_down(key, bind)
	if not db.actor or not db.actor:alive() then return end -- нет актора - нечего делать
	if level.main_input_receiver() then return end
	local act_slot = db.actor:active_slot()
	if act_slot == 8 then
		detector_hud_active = true
	end		
	if actor_has_detector() then
		if key == DIK_keys.DIK_8 then
			if detector_hud_active then
				-- убираем
				db.actor:activate_slot(-1)
				detector_hud_active = false
				upgrade_mode_active = false
				set_hud_tip_clean()	
			else
				-- достаем
				db.actor:activate_slot(8)
				detector_hud_active = true
				upgrade_mode_active = false
			end
		elseif bind == key_bindings.kWPN_1
		or bind == key_bindings.kWPN_2
		or bind == key_bindings.kWPN_3
		or bind == key_bindings.kWPN_4
		or bind == key_bindings.kWPN_5
		or bind == key_bindings.kWPN_6
		then	
			detector_hud_active = false
			upgrade_mode_active = false
			-- убрать подсказку по включению апгрейда
			set_hud_tip_clean()			
		end
		if detector_hud_active and actor_has_elite_detector() then
			if db.actor:object("afscanner") and upgrade_mode_active == false then
				-- показать подсказку по включению апгрейда
				write_log("!!IMPULSE_SCANNER show notice")
				set_hud_tip_normal()
			elseif not db.actor:object("afscanner") then
				set_hud_tip_clean()
				upgrade_mode_active = false
				return
			end		
			-- DIK_RETURN          0x1C    /* Enter on main keyboard */
			-- DIK_COMMA <
			-- DIK_PERIOD >
			-- DIK_SLASH /
			if key == DIK_keys.DIK_K then
				if upgrade_mode_active == false and db.actor:object("afscanner") then
					-- проверить если ли апгрейд и если есть включить режим, показать экранную подсказку
					write_log("!!IMPULSE_SCANNER POWER_ON")
					upgrade_frequency = 0
					set_detector_mode(1, upgrade_frequency)
					set_hud_tip_upgrade()
					upgrade_mode_active = true
					soundtrack.afscanner_click()
					return
				elseif upgrade_mode_active == true and db.actor:object("afscanner") then
					-- если режим апгрейда активен - выключить, убрать подсказку
					write_log("!!IMPULSE_SCANNER POWER_OFF")
					upgrade_frequency = 0
					set_detector_mode(0, 9)
					set_hud_tip_normal()
					upgrade_mode_active = false
					soundtrack.afscanner_off()
					return
				else
					write_log("!!IMPULSE_SCANNER POWER_OFF NO_UPGRADE")
					upgrade_frequency = 0
					set_detector_mode(0, 9)
					set_hud_tip_clean()		
					upgrade_mode_active = false
					return					
				end			
			end	
			if upgrade_mode_active == true then
				-- проверяем остальные клавиши бинда
				if key == DIK_keys.DIK_RETURN then
					-- послать импульс на этой частоте
					write_log("!!IMPULSE_SCANNER SEND_IMPULSE")
					if not are_actor_in_strange_zone() then
						-- мы вне зоны, предупредить
						write_log("!!IMPULSE_SCANNER OUT_ZONE")
						soundtrack.afscanner_click2()
						news_manager.send_tip(db.actor, "actor_out_strangzone", nil, "anomal", 5000, nil)
					else
						write_log("!!IMPULSE_SCANNER IMPULSE_SENT")
						check_actor_in_zone_action(upgrade_frequency)
					end
					return
				end
				if key == DIK_keys.DIK_COMMA then
					-- понизить частоту
					if upgrade_frequency > 0 then
						upgrade_frequency = upgrade_frequency - 1
					end
					write_log("!!IMPULSE_SCANNER SET FREQ IDX ["..tostring(upgrade_frequency).."]")
					set_detector_mode(1, upgrade_frequency)	
					soundtrack.afscanner_click()
					return
				end	
				if key == DIK_keys.DIK_PERIOD then
					-- повысить частоту
					if upgrade_frequency < 8 then
						upgrade_frequency = upgrade_frequency + 1
					end		
					write_log("!!IMPULSE_SCANNER SET FREQ IDX ["..tostring(upgrade_frequency).."]")					
					set_detector_mode(1, upgrade_frequency)
					soundtrack.afscanner_click()
					return
				end				
			end
		else	
			set_hud_tip_clean()	
		end		
	else
		detector_hud_active = false
		upgrade_mode_active = false
		-- убрать подсказку по включению апгрейда
		set_hud_tip_clean()					
	end
end

local last_beep = 0
local last_click = 0
local geiger_snd = nil

function on_update()
	local det = db.actor:item_in_slot(8)
	
	-- нет детектора - выходим
	if not det then
		return
	end
	
	-- проверка на секцию
	local sect = det:section()
	if sect == "interactive_detector_simple" or sect == "interactive_detector_advanced" or sect == "interactive_detector_elite" then
		-- перебор онлайновых артефактов в таблице
		local act_pos = db.actor:position()
		local det_radius = get_u32(sect, "detection_radius", 0)
		local i = 0
		for id, art in pairs (db.artefacts) do
			-- проверяем, не в рюкзаке ли артефакт. Их детектировать не надо
			if art:parent() == nil then
				local art_pos = art:position()
				local dist = act_pos:distance_to(art_pos)
				-- проверка на попадание в радиус детектирования
				if dist < det_radius and i < MAX_ARTEFACTS then
					set_artefact_slot(i, art_pos.x, art_pos.y, art_pos.z)
					i = i + 1
				end
			end
		end
		for j = i,MAX_ARTEFACTS-1 do
			set_artefact_slot(j, 0, 0, 0)
			j = j + 1
		end

		if sect == "interactive_detector_elite" then
			local k = 0
			local anm_table = ogse_anomaly.get_all_nearest_anomalies_by_point_in_radius(act_pos, det_radius)
			-- пересчитаем радиус без учета вертикальной координаты
--			write_log("elite detector update, pos "..tostring(act_pos.x)..", "..tostring(act_pos.y)..", "..tostring(act_pos.z)..", radius "..tostring(det_radius))
			local act_pos_no_y = act_pos
			act_pos_no_y.y = 0
			local pair = 0
			for id, anm in pairs (anm_table) do
				local pos_y = anm.pos.y
				anm.pos.y = 0
				anm.dist = anm.pos:distance_to(act_pos_no_y)
				anm.pos.y = pos_y
				pair = pair + 1
			end
--			write_log("elite detector update, tables size "..tostring(pair))
			table.sort(anm_table,function(a,b) return (a.dist+a.radius) < (b.dist+b.radius) end)
			for id, anm in pairs (anm_table) do
				local obj = level.object_by_id(id)
--				write_log("calculating anom with id "..id)
				if obj and ogse_anomaly.get_anomaly_mode(id) ~= "anom_off" and not string.find(anm.sect, "nodetect") then
					if k < MAX_ARTEFACTS then
						set_anomaly_slot(k, anm.pos.x, anm.pos.y, anm.pos.z)
						k = k + 1
					end
				end
			end
			for l = k,MAX_ARTEFACTS-1 do
				set_anomaly_slot(l, 0, 0, 0)
				l = l + 1
			end
		end

	end
	if actor_has_detector() then

		local hasanom, anomid, pos, cls, distance, radius, sect_anom = ogse_anomaly.get_nearest_anomaly_by_point(db.actor:position())
		local obj = level.object_by_id(anomid)
		if hasanom and obj and ogse_anomaly.get_anomaly_mode(anomid) ~= "anom_off" and is_detectable_by_current_detector(obj) then
			if distance <= detect_radius then
				if last_beep == 0 then
					snd_beep:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 10.0)
					last_beep = time_global()
				else
					local mul_check = distance/detect_radius
					local timeout_check = math.ceil(beep_period*mul_check)	
					if timeout_check < miminal_beep_period then
						timeout_check = miminal_beep_period
					end
					if time_global() > (last_beep+timeout_check) then
						snd_beep:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 10.0)
						last_beep = time_global()
					end						
				end
			else
				if last_beep > 0 then
					last_beep = 0
				end
			end
		end
		
		local rads = ogse_dbg_anomaly_binder.get_max_radlevel()
		if rads > 0 then
			local rnd_val = rads
			if rads < 8 then
				rnd_val = rnd_val + 1
			end
		
			if last_click == 0 then
				geiger_snd = xr_sound.get_safe_sound_object("detectors\\geiger_"..tostring(math.random(1,rnd_val)))
				if geiger_snd then
					geiger_snd:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 9.0)
					last_click = time_global()
				end
			else
				local shift_val = math.random(-500,500)
				local timeout = math.ceil((click_peroid+shift_val)/rads)
				if timeout < miminal_click_period then
					timeout = miminal_click_period
				end			
				if time_global() > (last_click+timeout) then
					geiger_snd = xr_sound.get_safe_sound_object("detectors\\geiger_"..tostring(math.random(1,rnd_val)))
					if geiger_snd then
						geiger_snd:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 9.0)
						last_click = time_global()
					end
				end
			end
		else	
			if last_click > 0 then
				last_click = 0
			end		
		end
	
	end
	
end