-- -*- mode: lua; coding: windows-1251-dos -*-

---------------------------
--|ogse_hud_control.script
--|Управление худом.
--|KRodin © 2016
--|Version: 4.0
--|TODO: Переписать для корректной поддержки двойного прицеливания. Надо снова на постоянный апдейт повесить.
---------------------------

function attach(sm)
	sm:subscribe({ signal = "on_actor_death",	fun = this.on_actor_death })
	sm:subscribe({ signal = "on_key_down",		fun = this.check_keys })
end

------------------------------------------------------
function on_actor_death() --При смерти актора
	level.hide_indicators() --Убираем худ
	level.disable_input() --Блокируем нажатия клавиш
end
------------------------------------------------------

local cs_tmr = false

function check_keys(key, bind) --Проверка нажатия клавиш
	if bind == key_bindings.kWPN_ZOOM and not level.main_input_receiver() then
		if not cs_tmr and actor_keeps_wpn_with_optical_sight() then
			cs_tmr = check_sniper_timer():start()
		end
	end
end

function actor_keeps_wpn_with_optical_sight() --Проверка, держит ли актор в руках оружие с оптическим прицелом
	local wpn = db.actor:active_item() --Проверяем что в руках у актора
	if	not wpn --Если в руках ничего нет
		or not wpn:is_weapon_magazined() --или в руках не оружие
		or ogse_wpn_utils.get_forced_notex_scope(wpn) --или на оружии установлен колиматорный прицел
		or wpn:get_weapon().is_second_zoom_offset_enabled --или включен режим альтернативного прицеливания
	then
		return false
	end

	if wpn:clsid() == clsid.wpn_binocular_s then return true end --Оружие на классе бинокля всегда с оптикой

	local scope = ogse_wpn_utils.get_scope_flag(wpn) --Есть ли на оружии прицел
	local gl_mode = false
	if wpn:is_weapon_gl() then gl_mode = ogse_wpn_utils.get_gl_mode(wpn) end --Находится ли оружие в режиме стрельбы из ПГ
	return scope and not gl_mode --Если на оружии есть прицел и при этом оружие не находится в режиме стрельбы из ПГ - true
end

--Таймер скрывает худ на время прицеливания, запускает сигналы on/off_sniper_mode, и возвращает худ обратно
class "check_sniper_timer" ( ogse_qt.quick_timer )
function check_sniper_timer:__init() super()
	self.show_indicators = true --нужно для правильного убирания худа при прицеливании.
	self.aiming_complete = false --нужно для правильной работы сигналов on/off_sniper_mode
	self.sm = ogse_signals.get_mgr()
end
function check_sniper_timer:condition() --Запускается на каждом апдейте, пока не вернёт true
	if db.actor:zoom_mode() and actor_keeps_wpn_with_optical_sight() then --Если актор смотрит в оптику
		if self.show_indicators then
			level.hide_indicators() --убираем худ
			self.show_indicators = false
		end
		local act_it = db.actor:active_item()
		if act_it and ogse_wpn_utils.is_aiming_complete(act_it) then --Ждём, пока завершится "наезжание" прицела
			if not self.aiming_complete then
				self.sm:call("on_sniper_mode") --Делаем что-то по факту "наезжания" прицела.
				self.aiming_complete = true
			end
		else
			self.aiming_complete = false
		end
	elseif level.main_input_receiver() then --Если актор вдруг открыл инвентарь, ПДА или любое другое окно
		if self.aiming_complete then
			self.sm:call("off_sniper_mode") --Делаем что-то по окончанию прицеливания
			self.aiming_complete = false
		end
	elseif not self.show_indicators then --Если актор не смотрит в оптику
		if self.aiming_complete then
			self.sm:call("off_sniper_mode") --Делаем что-то по окончанию прицеливания
			self.aiming_complete = false
		end
		level.show_indicators() --покажем худ
		self.show_indicators = true
		--
		cs_tmr = false
		return true
	else
		cs_tmr = false
		return true
	end
end
