-- -*- mode: lua; coding: windows-1251-dos -*-

-- File:        UI_LOAD_DIALOG.SCRIPT
-- Description: Load Dialog for STALKER
-- Created:     28.10.2004
-- Copyright:   2004 GSC Game World
-- Author:      Serhiy Vynnychenko (narrator@gsc-game.kiev.ua)
-- Version:     0.5

load_wnd = nil

class "load_item" (CUIListItemEx)
function load_item:__init() super()
	self.file_name		= "filename"
	self:SetWndRect		(0,0,430,22)
	
	local ca = 255
	local cr = 216
	local cg = 186
	local cb = 140
	
	self.fn					= CUIStatic	()
	self.fn:SetAutoDelete	(true)
	self:AttachChild		(self.fn)
	self.fn:SetWndRect		(0,0,230,22)
	self.fn:SetText			("filename")
	self.fn:SetFont			(GetFontLetterica18Russian())
	self.fn:SetTextColor	(ca,cr,cg,cb)

	self.fage				= CUIStatic	()
	self.fage:SetAutoDelete	(true)
	self:AttachChild		(self.fage)
	self.fage:SetWndRect	(250,0,150,22)
	self.fage:SetText		("fileage")
	self.fage:SetFont		(GetFontLetterica16Russian())
	self.fage:SetTextColor	(ca,cr,cg,cb)
	--log1("--[ui_load_dialog.load_item.__init]")
end
function load_item:__finalize()
	--log1("--[ui_load_dialog.load_item.__finalize]")
end


class "load_dialog" (CUIScriptWnd)
function load_dialog:__init() super()
	load_wnd = self
	self:InitControls()
	self:InitCallBacks()
	self:FillList()
	--log1("--[ui_load_dialog.load_dialog.__init]")
end
function load_dialog:__finalize()
	--log1("~~[ui_load_dialog.load_dialog.__finalize]")
end

function load_dialog:FillList()
	local flist = getFS():file_list_open_ex("$game_saves$", bit_or( FS.FS_ListFiles, FS.FS_RootOnly ), "*.sav")
	local f_cnt = flist:Size()

	flist:Sort(FS.FS_sort_by_modif_down)

	for	it=0, f_cnt-1 do
		local file = flist:GetAt(it)
		local fn_full = file:NameFull()
		local file_name = fn_full:sub(0, fn_full:len() - 4)
		local date_time = "[" .. file:ModifDigitOnly() .. "]"		
		self:AddItemToList(file_name, date_time)
	end
end

function load_dialog:InitControls()
	self:Init(0,0,1024,768)
	
	local xml			 = CScriptXmlInit()
	local ctrl
	xml:ParseFile("ui_mm_load_dlg.xml")
		
	xml:InitStatic("background",				self)	

	self.form = xml:InitStatic("form",			self)
	
	xml:InitStatic("form:caption",				self.form)
	
	ctrl = xml:InitStatic("form:picture",		self.form)
	ctrl:SetWindowName("static_pict")	
	
	xml:InitStatic("form:file_info",			self.form)
	
	self.file_caption 	= xml:InitStatic("form:file_caption",	self.form)
	self.file_data		= xml:InitStatic("form:file_data",		self.form)
	
	xml:InitFrame("form:list_frame",			self.form)

	ctrl = xml:InitList("form:list", 			self.form)
	ctrl:ShowSelectedItem(true)
	self:Register(ctrl, "list_window")
		
	ctrl = xml:Init3tButton("form:btn_load",	self.form)	
	self:Register(ctrl, "button_load")
	
	ctrl = xml:Init3tButton("form:btn_delete",	self.form)	
	self:Register(ctrl, "button_del")
	
	ctrl = xml:Init3tButton("form:btn_cancel",	self.form)
	self:Register(ctrl, "button_back")	
	
	self.message_box = CUIMessageBoxEx()
	self:Register(self.message_box,"message_box")
end

function load_dialog:InitCallBacks()
	self:AddCallback("button_load",		ui_events.BUTTON_CLICKED,             self.OnButton_load_clicked)
	self:AddCallback("button_back",		ui_events.BUTTON_CLICKED,             self.OnButton_back_clicked)
	self:AddCallback("button_del",		ui_events.BUTTON_CLICKED,             self.OnButton_del_clicked)
	self:AddCallback("message_box",		ui_events.MESSAGE_BOX_YES_CLICKED,    self.OnMsgYes)
	self:AddCallback("message_box",		ui_events.MESSAGE_BOX_OK_CLICKED,	  self.OnMsgYes)

	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			  self.OnListItemClicked)
	self:AddCallback("list_window", ui_events.WINDOW_LBUTTON_DB_CLICK,		  self.OnListItemDbClicked)
end

function delete_save_game(filename)
	local save_file = filename .. ".sav"
	local dds_file  = filename .. ".dds"
	local f = getFS()

	f:file_delete("$game_saves$",save_file)

	if getFS():exist("$game_saves$", dds_file) then
		f:file_delete("$game_saves$", dds_file)
	end
end

local function AddTimeDigit(dig)
	return dig > 9 and dig or "0"..dig
end

local function file_data(fname)
	local flist = getFS():file_list_open_ex("$game_saves$", bit_or(FS.FS_ListFiles,FS.FS_RootOnly), fname .. ".sav")
	local f_cnt = flist:Size()
	if f_cnt > 0 then
		local file = flist:GetAt(0)
		local sg = CSavedGameWrapper(fname)
		local y,m,d,h,min,sec,ms = sg:game_time():get()
		local date_time = AddTimeDigit(h)..":"..AddTimeDigit(min).." "..AddTimeDigit(m).."/"..AddTimeDigit(d).."/"..y
		local health = string.format("\\n%s %d%s", game.translate_string("ui_inv_health"), sg:actor_health() * 100, "%")
		return game.translate_string("st_level")..": "..game.translate_string(sg:level_name()).."\\n"..game.translate_string("ui_inv_time")..": "..date_time..health
	else
		return "no file data"
	end	
end

function load_dialog:OnListItemClicked()
	local list_box		= load_wnd:GetListWnd("list_window")
	
	if list_box:GetSize()==0 then return end
	
	local picture		= load_wnd:GetStatic("static_pict")	
	
	local itm_index		= list_box:GetSelectedItem()
	
	local item			= list_box:GetItem(itm_index)

	if item == nil then
		load_wnd.file_caption:SetText	("")
		load_wnd.file_data:SetText		("")
		picture:InitTexture			("ui\\ui_noise")
		return
	end
	
	local item_text				= item.fn:GetText()
	load_wnd.file_caption:SetText	(item_text)
	load_wnd.file_data:SetText		(file_data(item_text))

	if not getFS():exist("$game_saves$", item_text..".sav") then
		list_box:RemoveItem(itm_index)
		return
	end

	if getFS():exist("$game_saves$", item_text..".dds") then
		picture:InitTexture(item_text)
	else
		picture:InitTexture("ui\\ui_noise")
	end
end

function load_dialog:OnListItemDbClicked()
	load_wnd:OnButton_load_clicked()
end

function load_dialog:OnMsgYes()
	local list = load_wnd:GetListWnd("list_window")	
	local index = list:GetSelectedItem()
	
	if index == -1 then return end

	if load_wnd.msgbox_id == 1 then
		local item  = list:GetItem(index)
		local fname = item.fn:GetText()
		
		delete_save_game	(fname)

		list:RemoveItem		(index)
		
		load_wnd:OnListItemClicked()
	elseif load_wnd.msgbox_id == 2 then
		load_wnd:load_game_internal()
	end
	
	load_wnd.msgbox_id = 0
end

function load_dialog:load_game_internal()	
	local console = get_console()
	local list = self:GetListWnd("list_window")	

	if list:GetSize()==0 then return end

	local index = list:GetSelectedItem()
	
	if index == -1 then return end
		
	local item  = list:GetItem(index)
	local fname = item.fn:GetText()
	
	if not alife() then
		console:execute	("disconnect")	
		console:execute	("start server(" .. fname .. "/single/alife/load) client(localhost)")	
	else
		console:execute	("load " .. fname)	
	end
end

function load_dialog:OnButton_load_clicked()	
	local console = get_console()
	local list = load_wnd:GetListWnd("list_window")	

	if list:GetSize()==0 then return end

	local index = list:GetSelectedItem()
	
	if index == -1 then return end

	local item		= list:GetItem(index)
	local fname		= item.fn:GetText()

	if not alife() then

		if valid_saved_game(fname) then
			load_wnd:load_game_internal()
		else
			load_wnd.msgbox_id			= 0
			load_wnd.message_box:Init			("message_box_invalid_saved_game")		
			load_wnd:GetHolder():start_stop_menu(load_wnd.message_box, true)
		end

		return
	end

	if valid_saved_game(fname) then
		load_wnd.msgbox_id = 2
		load_wnd.message_box:Init("message_box_confirm_load_save")		
		load_wnd:GetHolder():start_stop_menu(load_wnd.message_box, true)
	else
		load_wnd.msgbox_id			= 0
		load_wnd.message_box:Init			("message_box_invalid_saved_game")		
		load_wnd:GetHolder():start_stop_menu(load_wnd.message_box, true)
	end
	
end

function load_dialog:OnButton_back_clicked()
	--load_wnd:GetHolder():start_stop_menu	(load_wnd.owner, true) --new(show main window)
	load_wnd:GetHolder():start_stop_menu	(load_wnd,true)
	load_wnd.owner:Show						(true)
end

function load_dialog:OnButton_del_clicked()
	local list = load_wnd:GetListWnd("list_window")	

	if list:GetSize()==0 then return end
	local index = list:GetSelectedItem()
	
	if index == -1 then return end
	
	load_wnd.msgbox_id = 1
	
	load_wnd.message_box:Init("message_box_delete_file_name")		
	load_wnd:GetHolder():start_stop_menu(load_wnd.message_box, true)
end

function load_dialog:OnKeyboard(dik, keyboard_action)  --virtual function
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	
	local bind = dik_to_bind(dik)
	if bind == key_bindings.kQUIT then
		--self:GetHolder():start_stop_menu	(self.owner, true) --new(show main window)
		self:GetHolder():start_stop_menu	(self,true)
		self.owner:Show						(true)
	end  

	return true
end

function load_dialog:AddItemToList(file_name, date_time)
	local _itm				= load_item()
	_itm.fn:SetText			(file_name)
	_itm.fage:SetText		(date_time)
	
	local list_box			= self:GetListWnd("list_window")
	list_box:AddItem		(_itm)
end
