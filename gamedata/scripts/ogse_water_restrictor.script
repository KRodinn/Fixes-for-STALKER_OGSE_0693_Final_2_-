-----------------------------------------------------------------------
--- water restrictor binder
--- Модуль рестрикторов воды
--- Автор: KamikaZze
-----------------------------------------------------------------------

-- звуки
local snd_dive = xr_sound.get_safe_sound_object("material\\actor\\step\\n_water_1")
local snd_underwater = xr_sound.get_safe_sound_object("ogse\\\underwater")
local snd_emersion = xr_sound.get_safe_sound_object("material\\actor\\step\\n_water_2")
local snd_blow = xr_sound.get_safe_sound_object("material\\actor\\step\\t_water2")
local snd_breath = xr_sound.get_safe_sound_object("actor\\breath_1")
local snd_breath_cold = xr_sound.get_safe_sound_object("actor\\breath_cold")
-- уровень громкости звуков
local snd_fx_volume = 1		-- общий уровень громкости звуков
local snd_dive_subvolume = 1	-- громкость звука погружения
local snd_underwater_subvolume = 0.7	-- громкость звука под водой
local snd_emersion_subvolume = 1		-- громкость звука всплытия

local water_binders = {}    -- биндеры, которые требуют обновлений (update)
local underwater = {}

local breather_prefixes = {
	["ecolog_outfit"] = true,
	["scientific_outfit"] = true,
	["protection_outfit"] = true,
	["military_outfit"] = true,
}

local debug_flag = false

function actor_update(delta)
	for i, v in pairs(water_binders) do
		v:actor_update(delta)
	end
end

function bind( obj )
	obj:bind_object( water_binder( obj ) )
end

----------------------------------------------------------------------------------------------------
class "water_binder" ( object_binder )

function water_binder:__init(obj, char_ini) super(obj)
	self.initialized = false
	self.loaded = false
	self.actor_inside = false
end

function water_binder:reload(section)
	object_binder.reload(self, section)
end

function water_binder:reinit()
	object_binder.reinit(self)
	db.storage[self.object:id()] = { }
	self.st = db.storage[self.object:id()]
end

function water_binder:net_spawn(data)
	if not object_binder.net_spawn( self,data ) then
		return false
	end
	db.add_zone( self.object )
	water_binders[self.object:id()] = self
	return true
end

function water_binder:net_destroy()
	db.del_zone( self.object )
	water_binders[self.object:id()] = nil
	db.storage[self.object:id()] = nil
	object_binder.net_destroy(self)
end

-- вызывается из обновления актёра!
function water_binder:actor_update(delta)
	if not self.initialized and db.actor then
		self.initialized = true
		xr_logic.initialize_obj(self.object, self.st, self.loaded, db.actor, modules.stype_restrictor)
	end
	
	self.actor_inside = self.object:inside(device().cam_pos)
	
	fx_play(self.object:id())
	
	if self.actor_inside then
		fx_start(self.object:id())
	else	
		fx_stop(self.object:id())
	end
	
end

function water_binder:net_save_relevant()
	return true
end

function water_binder:save(packet)
	object_binder.save(self, packet)
	xr_logic.save_obj(self.object, packet)
end

function water_binder:load(reader)
	self.loaded = true
	object_binder.load(self, reader)
	xr_logic.load_obj(self.object, reader)
end

local walk_accel = nil
local jump_speed = nil
local run_factor = nil
local run_back_factor = nil
local walk_back_factor = nil
local crouch_factor = nil
local climb_factor = nil
local sprint_factor = nil
local walk_strafe_factor = nil
local run_strafe_factor = nil

local water_coeff = 0.6
local time_submerged = 0
local o2_amount = 100

function actor_has_breather()
	local outfit = db.actor:get_current_outfit()
	if outfit then
		local sect = outfit:section()
		for k, v in pairs(breather_prefixes) do
			if string.find(sect, k) then
				return true
			end			
		end	
	end
	return false
end

local need_restore_weap = false

function fx_start(id)
	if not underwater[id] then
		local breather = actor_has_breather()
		time_submerged = time_global()
		if debug_flag then
			db.actor:give_game_news(id.." CAMERA UNDERWATER!!! ", "ui\\ui_iconsTotal", Frect():set(498,47,83,47),0, 1000)
		end
		local hud = get_hud()
		local info = hud:GetCustomStatic("oxygen_hud")
		if not info then
			hud:AddCustomStatic("oxygen_hud", true)
			info = hud:GetCustomStatic("oxygen_hud"):wnd()
			if breather then
				info:SetText(game.translate_string("o2_level_breather").." "..string.format("%4.2f",tostring(o2_amount)).."%")
			else
				info:SetText(game.translate_string("o2_level").." "..string.format("%4.2f",tostring(o2_amount)).."%")
			end
		else
			if breather then
				info = hud:GetCustomStatic("oxygen_hud"):wnd()
				info:SetText(game.translate_string("o2_level_breather").." "..string.format("%4.2f",tostring(o2_amount)).."%")
			else
				info = hud:GetCustomStatic("oxygen_hud"):wnd()
				info:SetText(game.translate_string("o2_level").." "..string.format("%4.2f",tostring(o2_amount)).."%")
			end
		end
		if snd_dive and not snd_dive:playing() then
			level.add_pp_effector("yantar_underground_psi.ppe", 5555, true)
		--	level.add_pp_effector("nightvision_good.ppe", 3007, true)
		--	level.set_pp_effector_factor(3007, 0.2)
			snd_dive:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d)
			snd_dive.volume = snd_fx_volume*snd_dive_subvolume
		end
		if not breather then
			get_console():execute("r2_dof_control on")
		end
		walk_accel = get_walk_accel()
		jump_speed = get_jump_speed()
		run_factor = get_run_factor()
		run_back_factor = get_run_back_factor()
		walk_back_factor = get_walk_back_factor()
		crouch_factor = get_crouch_factor()
		climb_factor = get_climb_factor()
		sprint_factor = get_sprint_factor()
		walk_strafe_factor = get_walk_strafe_factor()
		run_strafe_factor = get_run_strafe_factor()
		set_sprint_factor(sprint_factor*water_coeff)
		set_jump_speed(jump_speed*0.01)
		set_walk_accel(walk_accel*water_coeff)
		set_run_factor(run_factor*water_coeff)
		set_run_back_factor(run_back_factor*water_coeff)
		set_walk_back_factor(walk_back_factor*water_coeff)
		set_crouch_factor(crouch_factor*water_coeff)
		set_climb_factor(climb_factor*water_coeff)
		set_walk_strafe_factor(walk_strafe_factor*water_coeff)
		set_run_strafe_factor(run_strafe_factor*water_coeff)
		bind_stalker.hide_weapon()
		underwater[id] = true
	end
end

local hearthbeat = xr_sound.get_safe_sound_object([[affects\heartbeat]])
local hiccups = {
	[1] = [[monsters\stalker\hiccup\hic2]],
	[2] = [[monsters\stalker\hiccup\hic3]],
	[3] = [[monsters\stalker\hiccup\hic4]],
}

function fx_play(id)
	if underwater[id] then
		if snd_underwater and not snd_underwater:playing() then
			snd_underwater:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d + sound_object.looped)
			snd_underwater.volume = snd_fx_volume*snd_underwater_subvolume
		end	
		--- o2_amount
		local breather = actor_has_breather()
		if (time_global() - time_submerged) > 1000 then
			if o2_amount > 0 then
				if breather then
					o2_amount = o2_amount - 0.1
				else
					o2_amount = o2_amount - 5
				end
				time_submerged = time_global()
			else	
				local snd_hic = xr_sound.get_safe_sound_object(hiccups[math.random(1,3)])
				db.actor.health = -0.1
				time_submerged = time_global()
				snd_hic:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d)
				snd_blow:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d)
				if not hearthbeat:playing() then
					hearthbeat:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d + sound_object.looped)
				end				
			end
			local hud = get_hud()
			local info = hud:GetCustomStatic("oxygen_hud")
			if not info then
				hud:AddCustomStatic("oxygen_hud", true)
				info = hud:GetCustomStatic("oxygen_hud"):wnd()
				if breather then
					info:SetText(game.translate_string("o2_level_breather").." "..string.format("%4.2f",tostring(o2_amount)).."%")
				else
					info:SetText(game.translate_string("o2_level").." "..string.format("%4.2f",tostring(o2_amount)).."%")
				end
			else
				if breather then
					info = hud:GetCustomStatic("oxygen_hud"):wnd()
					info:SetText(game.translate_string("o2_level_breather").." "..string.format("%4.2f",tostring(o2_amount)).."%")
				else
					info = hud:GetCustomStatic("oxygen_hud"):wnd()
					info:SetText(game.translate_string("o2_level").." "..string.format("%4.2f",tostring(o2_amount)).."%")
				end
			end
		end
		set_sprint_factor(sprint_factor*water_coeff)
		set_jump_speed(jump_speed*0.01)
		set_walk_accel(walk_accel*water_coeff)
		set_run_factor(run_factor*water_coeff)
		set_run_back_factor(run_back_factor*water_coeff)
		set_walk_back_factor(walk_back_factor*water_coeff)
		set_crouch_factor(crouch_factor*water_coeff)
		set_climb_factor(climb_factor*water_coeff)
		set_walk_strafe_factor(walk_strafe_factor*water_coeff)
		set_run_strafe_factor(run_strafe_factor*water_coeff)
	end
end

function fx_stop(id)
	if underwater[id] then
		if o2_amount <= 0 then
			snd_breath_cold:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d)
		else
			snd_breath:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d)
		end
		time_submerged = 0
		o2_amount = 100		
		if debug_flag then
			db.actor:give_game_news(id.." CAMERA NOT UNDERWATER!!! ", "ui\\ui_iconsTotal", Frect():set(498,47,83,47),0, 1000)
		end
		local hud = get_hud()
		local info = hud:GetCustomStatic("oxygen_hud")
		if info then
			hud:RemoveCustomStatic("oxygen_hud", true)
		end		
		if snd_dive:playing() then 
			snd_dive:stop() 
		end
		if snd_underwater:playing() then 
			snd_underwater:stop() 
		end
		if hearthbeat:playing() then
			hearthbeat:stop()
		end			
		if snd_emersion then
			level.remove_pp_effector(5555)
		--	level.remove_pp_effector(3007)
			snd_emersion:play_at_pos (db.actor, vector():set(0, 0, 0), 0, sound_object.s2d)
			snd_emersion.volume = snd_fx_volume*snd_emersion_subvolume
		end
		get_console():execute("r2_dof_control off")
		set_sprint_factor(sprint_factor)
		set_jump_speed(jump_speed)
		set_walk_accel(walk_accel)
		set_run_factor(run_factor)
		set_run_back_factor(run_back_factor)
		set_walk_back_factor(walk_back_factor)
		set_crouch_factor(crouch_factor)
		set_climb_factor(climb_factor)
		set_walk_strafe_factor(walk_strafe_factor)
		set_run_strafe_factor(run_strafe_factor)		
		bind_stalker.restore_weapon()
		underwater[id] = nil
	end
end

function stop_all_effects()
	for k, v in pairs(underwater) do
		if v == true then
			fx_stop(k)
		end	
	end
end
