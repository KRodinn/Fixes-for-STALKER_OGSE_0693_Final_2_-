-- -*- mode: lua; coding: windows-1251-dos -*-

-----------------------------------------------------------------------
--- ogse_bind_weapon.script
--- Биндер для оружия со скриптовым управлением аддонами
--- OGS Evolution Team 2016
-----------------------------------------------------------------------

function attach(sm) -- для менеджера сигналов
	sm:subscribe({signal = "on_item_to_slot", fun = this.on_item_to_slot})
end

function on_item_to_slot(item, sitem)
	if item:is_weapon_magazined() then
		local bnd = item:binded_object()
		if bnd and bnd.wpn_binder then
			bnd.need_initialize_hud = true
		end
	end
end

function init(obj)
	obj:bind_object(wpn_binder(obj))
end

local function aux_read_bones(addon_sect)
	return split_comma_separated_list(get_string(addon_sect, "bones", ""))
end
local function aux_read_bones_hide(addon_sect)
	return split_comma_separated_list(get_string(addon_sect, "bones_hide", ""))
end
local addon_templates = {
	{
		descname = "scope_desc",
		section_param = "scope",
		params = {
			use_texture = function(addon_sect) return not get_bool(addon_sect, "force_remove_texture") end,
			offset      = function(addon_sect) return get_vector(addon_sect, "zoom_offset") end,
			rotation    = function(addon_sect) return get_vector2(addon_sect, "zoom_rotation") end,
			bones       = aux_read_bones,
			bones_hide  = aux_read_bones_hide,
		},
		addon_attached_fun = ogse_wpn_utils.get_scope_flag,
		extra_actions = function(obj, desc)
			if obj:is_weapon_gl() and ogse_wpn_utils.get_gl_mode(obj) then return end
			--
			local force_use_tex = desc.hud_attached and not desc.use_texture
			ogse_wpn_utils.set_forced_notex_scope(obj, force_use_tex)
			obj:set_hud_offset(desc.hud_attached and desc.offset or desc.default_hud_offset)
			obj:set_hud_rotate(desc.hud_attached and desc.rotation or desc.default_hud_rotate)
		end,
	},
	{
		descname = "ubd_desc",         
		section_param = "underbarrel_device", 
		params = {bones = aux_read_bones,}, 
		addon_attached_fun = ogse_wpn_utils.get_grenade_launcher_flag,
	},
	{
		descname = "silencer_desc",    
		section_param = "silencer",           
		params = {bones = aux_read_bones,}, 
		addon_attached_fun = ogse_wpn_utils.get_silencer_flag,
	},
	{
		descname = "grip_desc",        
		section_param = "grip",               
		params = {bones = aux_read_bones,}, 
		addon_attached_fun = ogse_wpn_utils.get_grip_flag,
	},
	{
		descname = "magazine_desc",        
		section_param = "magazine",               
		params = {bones = aux_read_bones,}, 
		addon_attached_fun = ogse_wpn_utils.get_magazine_flag,
	},
	{
		descname = "scope_mount_desc", 
		section_param = "scope_mount",        
		params = {bones = aux_read_bones,}, 
		addon_attached_fun = ogse_wpn_utils.get_scope_mount_flag,
	},
}

----------------------------------------------------------------------------------------------------------------------
class "wpn_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function wpn_binder:__init (obj) super(obj)
	--self.spawned = false
	self.wpn_binder = true
	self.need_initialize_hud = false
	local obj_section = obj:section()
	-- читаем единожды все данные, связанные с секцией
	self.is_gl = obj:is_weapon_gl()
	self.extra_addon_flags = 0
	if get_string(obj_section, "scope_mount_name") then
		self.extra_addon_flags = self.extra_addon_flags + ogse_wpn_utils.addons_flags.scope_mount
	end
	if get_string(obj_section, "grip_name") then
		self.extra_addon_flags = self.extra_addon_flags + ogse_wpn_utils.addons_flags.grip
	end
	if get_string(obj_section, "magazine_name") then
		self.extra_addon_flags = self.extra_addon_flags + ogse_wpn_utils.addons_flags.magazine
	end
	self.change_safe_cntr = get_u32(obj_section, "change_safe_cntr", 15) -- сколько раз включаем кости, максимальное число поверхностей, навешанных на управляемые кости
	self.managed_bones = split_comma_separated_list(get_string(obj_section, "managed_bones", ""))
	self.addon_descriptors = {}
	for _,desc_info in ipairs(addon_templates) do
		if sys_ini:line_exist(obj_section, desc_info.section_param) then
			local addon_sect = get_string(obj_section, desc_info.section_param)
			ASSERT(sys_ini:section_exist(addon_sect), "[wpn_binder:net_spawn] section does not exist '%s'", addon_sect)
			local addon_desc = {}
			self.addon_descriptors[desc_info.descname] = addon_desc
			for param_name,reader_func in pairs(desc_info.params) do
				addon_desc[param_name] = reader_func(addon_sect)
			end
			addon_desc.hud_set_cntr = 0
			addon_desc.set_cntr = 0
			addon_desc.addon_attached_fun = desc_info.addon_attached_fun
			addon_desc.extra_actions = desc_info.extra_actions
		end
	end
	local sd = self.addon_descriptors.scope_desc
	if sd then
		local hud_section = get_string(obj_section, "hud")
		sd.default_hud_offset = get_vector(hud_section, "zoom_offset")
		local def_zrx = get_float(hud_section, "zoom_rotate_x")
		local def_zry = get_float(hud_section, "zoom_rotate_y")
		sd.default_hud_rotate = vector2():set(def_zrx, def_zry)
		--sd.ironsight_desc = {}
	end
	self.sm = ogse_signals.get_mgr()
	--self.first_update = false
end
----------------------------------------------------------------------------------------------------------------------
function wpn_binder:reinit()
	self.object:set_callback(callback.on_addon_init, self.init_addons, self)
	self.object:set_callback(callback.update_hud_addons_visibility, self.update_hud_addons_visibility, self)
	self.object:set_callback(callback.update_addons_visibility, self.update_addons_visibility, self)
	self.object:set_callback(callback.second_scope_switch, self.on_second_scope_switch, self)
end
----------------------------------------------------------------------------------------------------------------------
function wpn_binder:init_addons(a)
	if a == 2 or not self.object:is_weapon_gl() then
		if self.extra_addon_flags ~= 0 then
			ogse_wpn_utils.set_extra_addon_flags(self.object, self.extra_addon_flags)
		end
		--log3("wpn_binder:init_addons - %d", a)
		for des_name,desc in pairs(self.addon_descriptors) do
			if desc.extra_actions then desc.extra_actions(self.object, desc) end
		end
	end
end

function wpn_binder:net_spawn(data)
	return true
end
----------------------------------------------------------------------------------------------------------------------
function wpn_binder:net_destroy()
	self.object:set_callback(callback.update_hud_addons_visibility, nil)
	self.object:set_callback(callback.on_addon_init, nil)
	self.object:set_callback(callback.update_addons_visibility, nil)
	self.object:set_callback(callback.second_scope_switch, nil)
end

function wpn_binder:set_hud_bones_visibility(bones_list, vis)
	ASSERT(bones_list, "wpn_binder:set_hud_bones_visibility: %s", type(bones_list))
	local vis_val = vis and 1 or 0
	for i,bone in ipairs(bones_list) do
		self.object:set_hud_bone_visible(bone, vis_val)
	end
end

function wpn_binder:set_bones_visibility(bones_list, vis)
	ASSERT(bones_list, "wpn_binder:set_bones_visibility")
	local vis_val = vis and 1 or 0
	for _,bone in ipairs(bones_list) do
		self.object:set_bone_visible(bone, vis_val)
	end
end

function wpn_binder:update_addons_visibility()
	if not self.wm_initialized then
		-- гасим по умолчанию все управляемые скриптами кости
		self:set_bones_visibility(self.managed_bones, false)
		self.wm_initialized = true
	end
	for des_name,desc in pairs(self.addon_descriptors) do	
		local addon_attached = desc.addon_attached_fun(self.object)
		--log1("[wpn_binder] "..self.object:name().." "..des_name.." "..tostring(addon_attached))
		if desc.wm_attached ~= addon_attached then
			desc.wm_attached = addon_attached
			desc.set_cntr = self.change_safe_cntr
		end
		if desc.set_cntr > 0 then
			self:set_bones_visibility(desc.bones, desc.wm_attached)
			if desc.bones_hide then
				self:set_bones_visibility(desc.bones_hide, not desc.wm_attached)
			end
			desc.set_cntr = desc.set_cntr - 1
		end
	end
end


local function get_active_scope_section( wpn ) --Получить секцию прицела у оружия
	local scope_status = ogse_wpn_utils.get_scope_flag( wpn )
	if scope_status then
		return get_string( wpn:section(), "scope_name" )
	end
end

function wpn_binder:update_hud_addons_visibility()
	--log1("wpn_binder:update_hud_addons_visibility")

	if db.actor:active_item() and db.actor:active_item():id() == self.object:id() then
		local scope_sect = get_active_scope_section(self.object)
		if scope_sect then
			if get_bool( scope_sect, "thermo_vision_enabled", false ) then
				level.set_blender_mode_main(2)
			elseif get_bool( scope_sect, "night_vision_enabled", false ) then
				level.set_blender_mode_main(1)
			else
				level.set_blender_mode_main(0)
			end
		else
			level.set_blender_mode_main(0)
		end
	end

	if self.need_initialize_hud then
		-- гасим по умолчанию все управляемые скриптами кости
		self:set_hud_bones_visibility(self.managed_bones, false)
	end
	for des_name,desc in pairs(self.addon_descriptors) do
		if self.is_gl and desc.extra_actions then -- восстанавливаем смещение худа после выхода из режима подствольника
			local gl_mode = ogse_wpn_utils.get_gl_mode(self.object)
			-- на первом апдейте после перехода в обычный режим
			if not gl_mode and self.gl_mode ~= gl_mode then
				desc.extra_actions(self.object, desc)
			end
			self.gl_mode = gl_mode
		end
		local addon_attached = desc.addon_attached_fun(self.object)
		if desc.hud_attached ~= addon_attached or self.need_initialize_hud then
			desc.hud_attached = addon_attached
			if desc.extra_actions then desc.extra_actions(self.object, desc) end
			desc.hud_set_cntr = self.change_safe_cntr
			if addon_attached then
				if desc.bones_hide then
					self:set_hud_bones_visibility(desc.bones_hide, false)
				end
			else
				self:set_hud_bones_visibility(desc.bones, false)
			end
		end
		if desc.hud_set_cntr > 0 then
			if addon_attached then
				self:set_hud_bones_visibility(desc.bones, true)
			else
				if desc.bones_hide then
					self:set_hud_bones_visibility(desc.bones_hide, true)
				end
			end
			desc.hud_set_cntr = desc.hud_set_cntr - 1
		end
	end
	self.need_initialize_hud = false
end

function wpn_binder:update()
	--if not self.first_update then
	--	self.first_update = true
		self:update_hud_addons_visibility() --Всё же надо апдейтить всегда, на всякий случай
	--end
end

function wpn_binder:on_second_scope_switch( enabled )
	local parent = self.object:parent()
	if not parent or not parent:is_actor() or not parent:is_in_slot(self.object) then
		return
	end
	--
	if not enabled and not ( self.object:is_weapon_gl() and self.object:get_gl_mode() ) then 
		self.need_initialize_hud = true
		self:update_hud_addons_visibility() --подумать, может тут апдейтить не всё, а только оффсет? Хотя, пусть так и будет - нормально.
	end
	--self.sm:call("on_second_scope_switch", enabled)
end

