-------------------------------------------------------------------------------
--| ogse_relations.script                                                   |--
--| Скриптовая обвязка для очистки отношений                                |--
--| K.D., OGS Evolution Team, 2015                                          |--
--| Ревизия: 14/03/2015                                                     |--
-------------------------------------------------------------------------------

function attach(sm)
  sm:subscribe({ signal = "on_goodwill_change", fun = this.on_goodwill_change })
  sm:subscribe({ signal = "on_load", fun = this.load })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_npc_spawn })
  sm:subscribe({ signal = "on_release_npc", fun = this.on_release })
  sm:subscribe({ signal = "on_save", fun = this.save })
end


local relation_seen  = {}
local relation_table = {}

function on_goodwill_change( from, to )
  if to == 0 then return end
  if not relation_seen[ to ] then relation_seen[ to ] = {} end
  if relation_seen[ to ][ from ] then
--    log1(
--      "[RELATIONS] REPEATED GOODWILL CHANGED FROM "
--        .. alife():object( from ):name() .. " TO " .. alife():object( to ):name()
--    )
  else
    if not relation_table[ to ] then
      relation_table[ to ] = {}
    end
    table.insert( relation_table[ to ], from )
    relation_seen[ to ][ from ] = true
--    log1(
--      "[RELATIONS] GOODWILL CHANGED FROM "
--        .. alife():object( from ):name() .. " TO " .. alife():object( to ):name()
--    )
  end
end


function on_release( npc_id )
  if not db.actor then return end
  if npc_id == 0 then return end
--  log2( "[RELATIONS] NPC %s RELEASED", tostring( npc_id ) )
  if relation_table[ npc_id ] then
    clear_personal_records( npc_id )
  end
end


function clear_personal_records( npc_id )
  local from_table = relation_table[ npc_id ]
  for _, id in ipairs( from_table ) do
    db.actor:clear_personal_record( id, npc_id )
--    local sobj = alife():object( id )
--    if sobj then
--      log1(
--        "[RELATIONS] RELATION RECORD CLEARED FOR OBJECT " .. sobj:name()
--      )
--    else
--      log1(
--        "[RELATIONS] RELATION RECORD CLEARED FOR OBJECT WITH ID " .. id
--      )
--    end
  end
  relation_seen[ npc_id  ] = nil
  relation_table[ npc_id ] = nil
end


function save()
  local records, cnt = {}, 0
  for k, items in pairs( relation_table ) do
    table.insert(
      records,
      {
        k == "actor" and 0 or k,
        items,
      }
    )
	cnt = cnt + #items
  end
  log3(
    "--[%s] RELATION TABLE SIZE IS [%s]: [%s] items",
    script_name(), #records, cnt
  )
  --log3("[%s] Saved relations table: %s", script_name(), records)
  ogse.save_var(
    script_name() .. ".records", records, "array_template",
    {
      "u16",
      { "array_template", { "u16" } },
    }
  )
end


function load()
  local records = ogse.load_var_safe( script_name() .. ".records" )
  if not records then return load_old() end
  log3( "--[%s]: RELATION TABLE SIZE IS [%s]", script_name(), #records )
  --log3("[%s] Loaded relations table: %s", script_name(), records)
  local cnt = 0
  for _, pk in ipairs( records ) do
    local to_id, items = unpack( pk )
    cnt = cnt + #items
    --log3(
    --  "[%s]: LOADING RELATION TABLE RECORD %s WITH SIZE %s",
    --  script_name(), to_id, #items
    --)
    if to_id == 0 then to_id = "actor" end
    relation_seen[ to_id  ] = {}
    relation_table[ to_id ] = {}
    for _, curr_id in ipairs( items ) do
      ASSERT(
        ( not relation_seen[ to_id ][ curr_id ] ),
        "[RELATIONS] FOUND SECOND RECORD TO %s FROM %s", to_id, curr_id
      )
      table.insert( relation_table[ to_id ], curr_id )
      relation_seen[ to_id ][ curr_id ] = true
      --log3(
      --  "[%s]: LOADING RELATION TO %s FROM %s", script_name(), to_id, curr_id
      --)
    end
  end
  log3( "--[RELATIONS] RELATION TABLE LOADED: [%s] items!", cnt )
end


function load_old()
  local old = ogse.load_var_safe( "ogse_relation_reverse_table" )
  if old then
    return load_old2( old )
  end

  local chunks = ogse.load_var_safe( script_name() .. ".chunks" )
  local cnt    = 0
  if chunks then
    log3( "--[RELATIONS] RELATION TABLE SIZE IS [%s]", table.getn( chunks ) )
    for _, pk in ipairs( chunks ) do
      local to_id   = pk:r_u16()
      local to_size = pk:r_u16()
      cnt = cnt + to_size
--      log1(
--        "[RELATIONS] LOADING RELATION TABLE RECORD "
--          .. tostring( to_id ) .. " WITH SIZE " .. tostring( to_size )
--      )
      if to_id == 0 then
        to_id = "actor"
      end
      relation_seen[ to_id  ] = {}
      relation_table[ to_id ] = {}
      for j = 1, to_size do
        local curr_id = pk:r_u16()
        ASSERT(
          ( not relation_seen[ to_id ][ curr_id ] ),
          "[RELATIONS] FOUND SECOND RECORD TO %s FROM %s",
          tostring( to_id ), tostring( curr_id )
        )
        table.insert( relation_table[ to_id ], curr_id )
        relation_seen[ to_id ][ curr_id ] = true
--        log1(
--          "[RELATIONS] LOADING RELATION TO "
--            .. tostring( to_id ) .. " FROM " .. tostring( curr_id )
--        )
      end
    end
    log3( "--[RELATIONS] OLD RELATION TABLE LOADED: [%s] items!", cnt )
	ogse.delete_var( script_name() .. ".chunks" )
  end
end


function load_old2( pk )
  if pk then
    local table_size = pk:r_u16()
    log3( "~~[RELATIONS] OLD2 RELATION TABLE SIZE IS [%s]", table_size )
    for i = 1, table_size do
      local to_id   = pk:r_u16()
      local to_size = pk:r_u16()
--      log1(
--        "[RELATIONS] LOADING RELATION TABLE RECORD "
--          .. tostring( to_id ) .. " WITH SIZE " .. tostring( to_size )
--      )
      if to_id == 0 then
        to_id = "actor"
      end
      relation_seen[ to_id ] = {}
      relation_table[ to_id ] = {}
      for j = 1, to_size do
        local curr_id = pk:r_u16()
        ASSERT(
          ( not relation_seen[ to_id ][ curr_id ] ),
          "[RELATIONS] FOUND SECOND RECORD TO %s FROM %s",
          tostring( to_id ), tostring( curr_id )
        )
        table.insert( relation_table[ to_id ], curr_id )
        relation_seen[ to_id ][ curr_id ] = true
--        log1(
--          "[RELATIONS] LOADING RELATION TO "
--            .. tostring( to_id ) .. " FROM " .. tostring( curr_id )
--        )
      end
    end
    log1( "~~[RELATIONS] OLD2 RELATION TABLE LOADED!" )
    ogse.delete_var( "ogse_relation_reverse_table" )
  end
end


local friends_comm = {
	["trader"] = true,
	["stalker"] = true,
	["dolg"] = true,
	["freedom"] = true,
	["ecolog"] = true,
	["csky"] = true,
	["quest_stalker"] = true,
	["gunsmith"] = true,
	["guider"] = true,
}
local attitude_neutal_threshold = get_float(
  "game_relations", "attitude_neutal_threshold"
)
local fix_rel_exceptions = {
  [ "mil_Dolg_specnaz_cherep" ] = true, -- Череп
  [ "mil_Dolg_specnaz_silence" ] = true, -- группа Черепа
  [ "bar_arena_kaligula" ] = true,
  [ "mil_freedom_member0001" ] = true, -- Павлик на АС
  [ "mil_stalker0012" ] = true, -- Псих на АС
}

function on_npc_spawn( npc, binder )
  if db.actor:character_community() ~= "actor" then return end
  local sobj = alife():object( npc:id() )
  if not sobj then return end
  local comm = npc:character_community()
  if not friends_comm[ comm ] then return end
  if
    fix_rel_exceptions[ npc:name() ]
    or fix_rel_exceptions[ npc:profile_name() ]
  then
    return
  end

  local p_gw = npc:goodwill( db.actor )
  if p_gw <= attitude_neutal_threshold then
    local c_gw = relation_registry.community_goodwill( comm, db.actor:id() )
    if
      c_gw >= attitude_neutal_threshold
      and (
        ( not relation_seen[ npc:id() ] )
        or ( not relation_seen[ npc:id() ][ db.actor:id() ] )
      )
    then
      npc:set_goodwill( 0, db.actor )
	  npc:set_relation( game_object.neutral, db.actor )
    end
  end
end
