-------------------------------------------------------------------------------
--| ogse_relations.script                                                   |--
--| Скриптовая обвязка для очистки отношений                                |--
--| K.D., OGS Evolution Team, 2015                                          |--
--| Ревизия: 22/09/2015                                                     |--
-------------------------------------------------------------------------------

function attach(sm) -- для менеджера сигналов
	sm:subscribe({signal = "on_goodwill_change", fun = this.on_goodwill_change})
	sm:subscribe({signal = "on_release_npc", fun = this.on_release})
	sm:subscribe({signal = "on_npc_spawn", fun = this.on_npc_spawn})
	sm:subscribe({signal = "on_save", fun = this.save})
	sm:subscribe({signal = "on_load", fun = this.load})
end

local total_debug = false

function write_log(str)
	if total_debug then
		log1(str)
	end
end

local relation_table = {}
local relation_seen  = {}

function on_goodwill_change(from, to)
	if to == 0 then return end
	if not relation_seen[to] then relation_seen[to] = {} end
	if relation_seen[to][from] then
		write_log("[RELATIONS] REPEATED GOODWILL CHANGED FROM "..alife():object(from):name().." TO "..alife():object(to):name())
	else
		if not relation_table[to] then
			relation_table[to] = {}
		end
		table.insert(relation_table[to], from)
		relation_seen[to][from] = true
		write_log("[RELATIONS] GOODWILL CHANGED FROM "..alife():object(from):name().." TO "..alife():object(to):name())
	end
end

function on_release(npc_id)
	if not db.actor then return end
	if npc_id == 0 then return end
	if relation_table[npc_id] then
		local from_table = relation_table[npc_id]
		for _, id in ipairs(from_table) do
			db.actor:clear_personal_record(id, npc_id)
		end
		relation_seen[npc_id] = nil
		relation_table[npc_id] = nil
	end
end

function save()
	local pk = net_packet()
	pk:w_begin(123) -- двухбайтовая заглушка
	pk:r_seek(2) -- чтобы пропустить эти два байта при чтении
	local rel_table_size = 0
	for k,v in pairs(relation_table) do
		if v then
			rel_table_size = rel_table_size + 1
		end
	end
	pk:w_u16(rel_table_size)
	write_log("[RELATIONS] RELATION TABLE SIZE IS "..tostring(rel_table_size))
	for k,v in pairs(relation_table) do
		if v then
			local table_size = table.getn(v)
			write_log("[RELATIONS] 	SAVING RELATION TABLE RECORD "..tostring(k).." WITH SIZE "..tostring(table_size))
			if k == "actor" then
				pk:w_u16(0)
			else
				pk:w_u16(k)
			end
			pk:w_u16(table_size)
			for _, id in ipairs(v) do
				pk:w_u16(id)
			end
		end
	end
	write_log("[RELATIONS] RELATION TABLE SAVED! Packet length = "..tostring(pk:w_tell()))
	ogse.save_var("ogse_relation_reverse_table", pk, "chunk")
end

function load()
	local pk = ogse.load_var_safe("ogse_relation_reverse_table")
	if pk then
		local table_size = pk:r_u16()
		write_log("[RELATIONS] RELATION TABLE SIZE IS "..tostring(table_size))
		for i = 1, table_size do
			local to_id = pk:r_u16()
			local to_id_size = pk:r_u16()
			write_log("[RELATIONS] 	LOADING RELATION TABLE RECORD "..tostring(to_id).." WITH SIZE "..tostring(to_id_size))
			if to_id == 0 then
				to_id = "actor"
			end
			relation_seen[to_id] = {}
			relation_table[to_id] = {}
			for j = 1, to_id_size do
				local curr_id = pk:r_u16()
				ASSERT(
					(not relation_seen[to_id][curr_id]),
					"[RELATIONS] FOUND SECOND RECORD TO %s FROM %s",
					tostring(to_id), tostring(curr_id)
				)
				table.insert(relation_table[to_id], curr_id)
				relation_seen[to_id][curr_id] = true
				write_log("[RELATIONS] LOADING RELATION TO "..tostring(to_id).." FROM "..tostring(curr_id))
			end
		end
		write_log("[RELATIONS] RELATION TABLE LOADED!")
	end
end

local included_comms_to_fix = 
{
	["stalker"] = true,
	["dolg"] = true,
	["freedom"] = true,
	["ecolog"] = true,
	["bandit"] = true,
}

function on_npc_spawn(npc, binder)
	local sobj = alife():object(npc:id())
	if not sobj then return end
	if not included_comms_to_fix[npc:character_community()] then return end
	local attitude_neutal_threshold = get_float("game_relations", "attitude_neutal_threshold")
	local p_gw = npc:goodwill(db.actor)
	if p_gw < attitude_neutal_threshold then
		local comm = npc:character_community()
		local c_gw = relation_registry.community_goodwill(comm, db.actor:id())
		if c_gw >= attitude_neutal_threshold
			and ((not relation_seen[npc:id()]) or (not relation_seen[npc:id()][db.actor:id()]))
		then
			npc:set_goodwill(attitude_neutal_threshold, db.actor)
		end
	end
end