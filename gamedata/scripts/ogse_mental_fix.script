function init()
	event("actor_update"):register(check_freezers)
	event("npc_update"):register(check_mental)
end

local panic_freezers = {}

local mental_anims = {
    [0]="danger",
    [1]="free",
    [2]="panic"
}

function check_mental(e)
	e:setFingerprint("ogse_mental_fix")
	if not ogse.check_game() then return end
	if e and e.obj then
		local storage = db.storage[e.obj:id()].state_mgr
		if not storage then
			return
		end
		local mental = state_lib.states[storage.target_state].mental
		if mental and mental == 2 then
			if not panic_freezers[e.obj:id()] and not xr_companion.is_companion(e.obj:id()) then
				log1("~~WARNING! NPC "..e.obj:name().." is in panic - will check it for freezing.")
				panic_freezers[e.obj:id()] = time_global()
			end	
		end
	end	
end

function check_freezers(e)
	e:setFingerprint("ogse_mental_fix_check")
	if not ogse.check_game() then return end
	for k, v in pairs(panic_freezers) do
		if v and (v+25000) < time_global() then
			log1("!!ERROR! NPC "..k.." is in panic more than 15 seconds! Trying to recover!")
			local npc = level.object_by_id(k)
			if npc then
				npc:set_mental_state(anim.danger)
			end
			panic_freezers[k] = nil
		end
	end
end