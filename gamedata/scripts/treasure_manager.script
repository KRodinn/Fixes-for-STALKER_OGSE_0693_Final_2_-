
function attach( sm )
	sm:subscribe({ signal = "on_ph_obj_use", fun = this.on_treasure_use })
	sm:subscribe({ signal = "on_save", fun = this.save })
	sm:subscribe({ signal = "on_load", fun = this.load })
end

function on_treasure_use( obj ) --Теперь метка тайника снимается после его открытия, а не после забирания оттуда вещей
	if obj:is_inventory_box() then
		get_treasure_manager():treasure_empty( obj, obj:story_id() )
	end
end


local treasure_manager = nil

local opt = {
	option_random_treasure = sys_ini:r_s32("options","option_random_treasure"), -- Включение/выключение рандомных тайников тайников (true/false)
	tr_v = sys_ini:r_s32("options","treasure_dropout"), -- Частота выпада тайников при выполненом condlist. Чем меньше, тем больше вероятность. (70)
	need_text = sys_ini:r_s32("options","treasure_need_text") --Вывод содержимого в нычку
}

function parse_spawns(line)
	if line == nil then
		return {}
	end

	--' если default-ов больше, чем значений в ini, то забить недостающие последним значением из ini
	local t = parse_names(line)
	local n = table.getn(t)

	local ret_table = {}
	local k = 1

	while k <= n do
		local spawn = {}
		spawn.section = t[k]
		-- Проверяем что это не последняя запись
		if t[k+1] ~= nil then
			local p = tonumber(t[k+1])
			-- проверяем что вторым числом задана вероятность, а не другая секция спавну
			if p then
				-- забиваем число
				spawn.prob = p
				k = k + 2
			else
				-- забиваем дефолт 1
				spawn.prob = 1
				k = k + 1
			end
		else
			spawn.prob = 1
			k = k + 1
		end
		table.insert(ret_table, spawn)
	end
	return ret_table
end


class "CTreasure"
function CTreasure:__init()
	ASSERT( sys_ini:section_exist("treasure_list"), "There is no section [treasure_list] in treasure_manager.ltx" )
	local n = sys_ini:line_count("treasure_list")
	local id, value = "", ""
	self.treasure_info = {} --Начальная установка

	for i=0, n-1 do --Итерируемся по всем настройкам фраз
		result, id, value = sys_ini:r_line("treasure_list",i,"","")

		self.treasure_info[id] = {}

		self.treasure_info[id].target		= utils.cfg_get_number(sys_ini, id, "target", nil, true)
		self.treasure_info[id].name			= utils.cfg_get_string(sys_ini, id, "name", nil, true, "")
		self.treasure_info[id].description	= utils.cfg_get_string(sys_ini, id, "description", nil, true, "")
		self.treasure_info[id].items		= parse_spawns(utils.cfg_get_string(sys_ini, id, "items", nil, true, ""))

		local community	= parse_names(utils.cfg_get_string(sys_ini, id, "community", nil, false, "", "stalker, bandit, dolg, freedom"))
		self.treasure_info[id].community = {}
		for k,v in pairs(community) do
			self.treasure_info[id].community[v] = true
		end

		if self.treasure_info[id].items == nil then
			abort("cant find 'items' in %s", id)
		end

		self.treasure_info[id].condlist = xr_logic.parse_condlist(db.actor, "treasure_manager", "condlist", utils.cfg_get_string(sys_ini, id, "condlist", nil, false, "", ""))

		--' Отметим тайник как новый
		self.treasure_info[id].active = false
		self.treasure_info[id].done = false
	end

	--' Вспомогательные таблицы для облегчения поиска
	self.treasure_by_target = {}
	for k,v in pairs(self.treasure_info) do
		self.treasure_by_target[v.target] = k	
	end

	self.loss_workaround_queue = {}
end
--' Юзание инициатора (возможность выдать тайник)
function CTreasure:use(npc)	
	--' Нужно рандомно выбрать один из тайников.
	local avail = {}
	local tr_sum = 0
	for k,v in pairs(self.treasure_info) do
		if not v.done then
			local treasure_prob = xr_logic.pick_section_from_condlist(db.actor, npc, v.condlist)
			treasure_prob = (not treasure_prob or treasure_prob == "") and 0 or tonumber(treasure_prob)
			if
				treasure_prob >= 0
				and v.community[npc:character_community()] == true
				and not v.active
			then
				if treasure_prob == 100 then
					self:give_treasure(k)
				else
					table.insert(avail, {k = k, prob = treasure_prob})
					tr_sum = tr_sum + treasure_prob
				end
			end
		end
	end

	if tr_sum == 0 or math.random(100) < opt.tr_v then return end

	local tr_w = math.random(tr_sum)

	for k,v in pairs(avail) do
		tr_w = tr_w - v.prob
		if tr_w <= 0 then
			self:give_treasure(v.k)
			break
		end
	end
end

--' Сохранение
function CTreasure:check()
	for k,v in pairs(self.treasure_info) do
		--' Выдать тайник
		self:give_treasure(k)
	end
end

--' Выдача тайника
function CTreasure:give_treasure(k)
	local v = self.treasure_info[k]
	local sim = alife()
	local obj = sim:story_object(v.target)
	if not obj then return end
	local item_ids = {}
	local pos, lvid, gvid, pid, new_obj

	local text = opt.need_text == 0
		and "%c[255,238,155,23]"..game.translate_string(v.name).."\\n".."%c[default]"..game.translate_string(v.description) 
		or  "%c[255,238,155,23]"..game.translate_string(v.name).."\\n".."%c[default]"..game.translate_string(v.description).."\\n".."%c[255,225,0,0]"..game.translate_string("stash_manager_string").."\\n"		
	--' Сгенерить вещи
	--'
	--' Из-за какого-то дефекта в xrGame.dll тайник потеряет
	--' сгенерированное содержимое в следующей ситуации:
	--'  1) получена ссылка на тайник, который находится в online;
	--'  2) игрок сохраняется и загружается;
	--'  3) между 1 и 2 не было переводов тайника в offline хотя бы раз.
	--' Для предотвращения этого создаём вещи у актёра, запоминаем
	--' идентификаторы, а в вызове actor_binder:update() переносим их
	--' в нужный ящик.
	local need_workaround = level.object_by_id(obj.id)
	if need_workaround then
		pos = db.actor:position()
		lvid = db.actor:level_vertex_id()
		gvid = db.actor:game_vertex_id()
		pid = db.actor:id()
	else
		pos = obj.position
		lvid = obj.m_level_vertex_id
		gvid = obj.m_game_vertex_id
		pid = obj.id
	end

-- Рандомные награды
	--if v.name then
		local new_treasure = ogse_random_treasure.random_treasure(v.name, v.target)
		local new_items = new_treasure:set_random_reward()
		if new_items then 
			v.items = new_items
		end
		new_treasure = nil -- чистим неиспользуемое
	--end
-- Рандомные награды	

	for kk,vv in pairs(v.items) do
		if ammo_section[vv.section] == true then
			local left, box_size = vv.prob, sys_ini:r_u32(vv.section, "box_size")
			while left > box_size do
				if vv.section ~= nil then
					new_obj = sim:create_ammo(vv.section, pos, lvid, gvid, pid, box_size)
					local sammo = alife():object(new_obj.id)
					sammo:use_ai_locations(false)
					table.insert(item_ids, new_obj.id)
					left = left - box_size
				end
			end
			if left > 0 then
				if vv.section ~= nil then
					new_obj = sim:create_ammo(vv.section, pos, lvid, gvid, pid, left)
					local sammo = alife():object(new_obj.id)
					sammo:use_ai_locations(false)
					table.insert(item_ids, new_obj.id)
				end	
			end
		else
			if vv.section ~= nil then
				for i=1,vv.prob do
					new_obj = sim:create(vv.section, pos, lvid, gvid, pid)
					table.insert(item_ids, new_obj.id)
				end
			end	
		end

		local tmp_str = kk > 1 and ", " or ""
		if opt.need_text == 1 then
			if not string.find(text, treasure_find.get_treasure_name(vv.section)) then
				text = text.."%c[255,155,238,23]"..tmp_str..treasure_find.get_treasure_name(vv.section)
			end
		end
	end

	if need_workaround then
		self.loss_workaround_queue[v.target] = item_ids
		dsh.exec_on_update(function() get_treasure_manager():loss_workaround() end)
	end

	news_manager.send_treasure(v.name)

	level_tasks.add_location_by_id(obj.id, "treasure", text)

	--' Пометим тайник как выданный
	self.treasure_info[k].active = true
	self.treasure_info[k].done = true
end


--' Перенос содержимого для предотвращения возможной потери
function CTreasure:loss_workaround()
--	log1("Вызов функции CTreasure:loss_workaround с параметром ")
	local pos, gv, lv = nil, nil, nil
	local fault_use_teleport = false

	for k,v in pairs(self.loss_workaround_queue) do
		--type_info(self.loss_workaround_queue)
		box = level_object_by_sid(k)
		if box == nil then
			-- смысла вылетать тут нет, спавнить вещи прямо Меченом в рюкзак фигня.
			-- хер с ними, рассыплем вокруг тайника если он вообще есть такой
			local sobj_box = alife():story_object(k)
			if sobj_box then
				local pos = sobj_box.position
				local gv = sobj_box.m_game_vertex_id
				local lv = sobj_box.m_level_vertex_id
				pos.y = pos.y + 0.3
				fault_use_teleport = true
			else
				abort("ERROR! Can't find treasure box with sid ["..tostring(k).."]")
			end
		end
		for kk,vv in ipairs(v) do
			if vv ~= nil then
				if fault_use_teleport == true and pos and gv and lv then
					alife():teleport_object("_", pos, lv, gv, vv)
				else
					db.actor:transfer_item(level.object_by_id(vv), box)
				end
			end
		end
	end
	self.loss_workaround_queue = {}
end

--' Снимаем отметку с тайника
function CTreasure:treasure_empty(box, box_story_id)
	local k = self.treasure_by_target[box_story_id]

	if k == nil or self.treasure_info[k] == nil then 
		return
	end

	self.treasure_info[k].active = false
	level_tasks.remove_location_by_id(box:id(), "treasure")
end

--' Сохранение
function CTreasure:save()
	local p = net_packet()
	p:w_begin( 123 )
	p:r_seek( 2 )

	--' Сохраняем размер таблицы
	local size = 0
	for k,v in pairs(self.treasure_info) do
		size = size + 1
	end
	p:w_u16(size)
	for k,v in pairs(self.treasure_info) do
		p:w_u16(v.target)
		p:w_bool(v.active)
		p:w_bool(v.done)
	end

	ogse.save_var( script_name() .. ".treasure_info", p, "chunk")
end

--' Загрузка
function CTreasure:load()
	if not ogse.var_exists( script_name() .. ".treasure_info") then return end
	local p = ogse.load_var( script_name() .. ".treasure_info")

	local t = p:r_u16()
	for i = 1,t do
		local k = self.treasure_by_target[p:r_u16()]
		self.treasure_info[k].active = p:r_bool()
		self.treasure_info[k].done = p:r_bool()
	end
end


function get_treasure_manager()
	if treasure_manager == nil then
		treasure_manager = CTreasure()
	end
	return treasure_manager
end


function save()
	get_treasure_manager():save()
end
function load()
	get_treasure_manager():load()
end
function clear_treasure_manager()
	treasure_manager = nil
end
