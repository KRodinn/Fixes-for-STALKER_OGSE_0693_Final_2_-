-- -*- mode: lua; coding: windows-1251-dos -*-

--/ ogse_rebind_key.script /--
--/ Key intercept module /--
--/ OGS Evolution Team 2010 /--
--/ version 1.4 (04/08/2013)/--

--/ Модуль перехвата функционала клавиш /--
-- назначение модуля: отвязка движкового назначения клавиш во время игры, чтобы ненужные движковые 
-- действия не конфликтовали со скриптовыми, забинденными на эти же клавиши. При этом на время
-- работы меню клавиши биндятся обратно, чтобы можно было назначать и менять их с помощью
-- стиандартного диалога настроек клавиатуры.

function attach( sm )
	sm:subscribe({ signal = "on_first_update", fun = this.unbind_key })
end

--********************************************************************************************************

local dik_key_to_name = {
	[ 11  ] = "k0",
	[ 2   ] = "k1",
	[ 3   ] = "k2",
	[ 4   ] = "k3",
	[ 5   ] = "k4",
	[ 6   ] = "k5",
	[ 7   ] = "k6",
	[ 8   ] = "k7",
	[ 9   ] = "k8",
	[ 10  ] = "k9",
	[ 30  ] = "kA",
	[ 78  ] = "kADD",
	[ 40  ] = "kAPOSTROPHE",
	[ 221 ] = "kAPPS",
	[ 145 ] = "kAT",
	[ 150 ] = "kAX",
	[ 48  ] = "kB",
	[ 14  ] = "kBACK",
	[ 43  ] = "kBACKSLASH",
	[ 46  ] = "kC",
	[ 58  ] = "kCAPITAL",
	[ 144 ] = "kCIRCUMFLEX",
	[ 146 ] = "kCOLON",
	[ 51  ] = "kCOMMA",
	[ 121 ] = "kCONVERT",
	[ 32  ] = "kD",
	[ 83  ] = "kDECIMAL",
	[ 211 ] = "kDELETE",
	[ 181 ] = "kDIVIDE",
	[ 208 ] = "kDOWN",
	[ 18  ] = "kE",
	[ 207 ] = "kEND",
	[ 13  ] = "kEQUALS",
	[ 1   ] = "kESCAPE",
	[ 33  ] = "kF",
	[ 59  ] = "kF1",
	[ 68  ] = "kF10",
	[ 87  ] = "kF11",
	[ 88  ] = "kF12",
	[ 100 ] = "kF13",
	[ 101 ] = "kF14",
	[ 102 ] = "kF15",
	[ 60  ] = "kF2",
	[ 61  ] = "kF3",
	[ 62  ] = "kF4",
	[ 63  ] = "kF5",
	[ 64  ] = "kF6",
	[ 65  ] = "kF7",
	[ 66  ] = "kF8",
	[ 67  ] = "kF9",
	[ 34  ] = "kG",
	[ 41  ] = "kGRAVE",
	[ 35  ] = "kH",
	[ 199 ] = "kHOME",
	[ 23  ] = "kI",
	[ 210 ] = "kINSERT",
	[ 36  ] = "kJ",
	[ 37  ] = "kK",
	[ 112 ] = "kKANA",
	[ 148 ] = "kKANJI",
	[ 38  ] = "kL",
	[ 26  ] = "kLBRACKET",
	[ 29  ] = "kLCONTROL",
	[ 203 ] = "kLEFT",
	[ 56  ] = "kLMENU",
	[ 42  ] = "kLSHIFT",
	[ 219 ] = "kLWIN",
	[ 50  ] = "kM",
	[ 12  ] = "kMINUS",
	[ 55  ] = "kMULTIPLY",
	[ 49  ] = "kN",
	[ 209 ] = "kNEXT",
	[ 123 ] = "kNOCONVERT",
	[ 69  ] = "kNUMLOCK",
	[ 82  ] = "kNUMPAD0",
	[ 79  ] = "kNUMPAD1",
	[ 80  ] = "kNUMPAD2",
	[ 81  ] = "kNUMPAD3",
	[ 75  ] = "kNUMPAD4",
	[ 76  ] = "kNUMPAD5",
	[ 77  ] = "kNUMPAD6",
	[ 71  ] = "kNUMPAD7",
	[ 72  ] = "kNUMPAD8",
	[ 73  ] = "kNUMPAD9",
	[ 179 ] = "kNUMPADCOMMA",
	[ 156 ] = "kNUMPADENTER",
	[ 141 ] = "kNUMPADEQUALS",
	[ 24  ] = "kO",
	[ 25  ] = "kP",
	[ 197 ] = "kPAUSE",
	[ 52  ] = "kPERIOD",
	[ 201 ] = "kPRIOR",
	[ 16  ] = "kQ",
	[ 19  ] = "kR",
	[ 27  ] = "kRBRACKET",
	[ 157 ] = "kRCONTROL",
	[ 28  ] = "kRETURN",
	[ 205 ] = "kRIGHT",
	[ 184 ] = "kRMENU",
	[ 54  ] = "kRSHIFT",
	[ 220 ] = "kRWIN",
	[ 31  ] = "kS",
	[ 70  ] = "kSCROLL",
	[ 39  ] = "kSEMICOLON",
	[ 53  ] = "kSLASH",
	[ 57  ] = "kSPACE",
	[ 149 ] = "kSTOP",
	[ 74  ] = "kSUBTRACT",
	[ 183 ] = "kSYSRQ",
	[ 20  ] = "kT",
	[ 15  ] = "kTAB",
	[ 22  ] = "kU",
	[ 147 ] = "kUNDERLINE",
	[ 151 ] = "kUNLABELED",
	[ 200 ] = "kUP",
	[ 47  ] = "kV",
	[ 17  ] = "kW",
	[ 45  ] = "kX",
	[ 21  ] = "kY",
	[ 125 ] = "kYEN",
	[ 44  ] = "kZ",
	[ 337 ] = "MOUSE1", --ЛКМ
	[ 338 ] = "MOUSE2", --ПКМ
	[ 339 ] = "MOUSE3", --СКМ (именно нажатие, а не вращение!)
	[ 340 ] = "MOUSE4",
	[ 341 ] = "MOUSE5",
	[ 342 ] = "MOUSE6",
	[ 343 ] = "MOUSE7",
	[ 344 ] = "MOUSE8",
}

function dik_to_name(dik)
	--local name = dik_key_to_name[dik]
    --ASSERT( name, "dik_to_name not found: %s", dik or "nil" )
	--return name
	return dik_key_to_name[dik] or ""
end

function bind_to_keys( bind, return_names ) --Если второй аргумент == true, то функция возвратит имена клавиш. В противном случае возвратит коды.
  local dik = bind_to_dik( bind )
  ASSERT( dik, "bind_to_dik not found: %s", bind )
  local t = return_names and { dik_to_name(dik) } or { dik }
  for k, v in pairs( dik_key_to_name ) do
    if ( return_names and v ~= t[ 1 ] ) or ( not return_names and k ~= t[ 1 ] ) then
      local kbd = v:find( "^k" ) ~= nil and v:sub( 2 ) or v
	  local key = DIK_keys[ "DIK_" .. kbd ]
      if key and dik_to_bind( key ) == bind then 
		table.insert( t, return_names and v or k )
      end
    end
  end
  return t
end

local name_to_dik_key = {}
for dik, name in pairs(dik_key_to_name) do
	name_to_dik_key[name] = dik
end
function keyname_to_dik( kname )
	local dik = name_to_dik_key[kname]
    ASSERT( dik, "keyname_to_dik not found: %s", kname or "nil" )
	return dik
end

--********************************************************************************************************

local intercept_key_table = {}

function get_key_preset_value(key_name)
	local key = intercept_key_table[key_name]
	--log3("key= [%s]", key or "nil")
	return key
end

function set_key_preset_value(key_name, value)
	--log3("set_key_preset_value: [%s] = [%s]", key_name, value)
	intercept_key_table[key_name] = value
end

local keys_list = {
	{ogse_name = "night_vision_key", stor_name = "ogse_nv_bind",           real_bind_name = key_bindings.kNIGHT_VISION, cmd_name = "night_vision"},
	{ogse_name = "antirad_key",      stor_name = "ogse_antirad_bind",      real_bind_name = key_bindings.kCAM_1       , cmd_name = "cam_1"},
	{ogse_name = "energy_drink_key", stor_name = "ogse_energy_drink_bind", real_bind_name = key_bindings.kCAM_2       , cmd_name = "cam_2"},
	{ogse_name = "yod_key",          stor_name = "ogse_yod_bind",          real_bind_name = key_bindings.kCAM_3       , cmd_name = "cam_3"},
	{ogse_name = "bipsizon_key",     stor_name = "ogse_bipsizon_bind",     real_bind_name = key_bindings.kCAM_4       , cmd_name = "cam_4"},
	{ogse_name = "handradio_key",    stor_name = "ogse_handradio_bind",    real_bind_name = key_bindings.kDROP        , cmd_name = "drop"},
	{ogse_name = "quicksave_key",    stor_name = "ogse_quicksave_bind",    real_bind_name = key_bindings.kBUY         , cmd_name = "buy_menu"},
}

function save_keys()
	--log1("ogse_rebind_key.save_keys")
	for _,key_data in ipairs(keys_list) do
		local key = bind_to_dik(key_data.real_bind_name)
		cmd(key_data.stor_name, key)
		set_key_preset_value(key_data.ogse_name, key)
	end
end

function rebind_key()
	--log1("ogse_rebind_key.rebind_key")
	for _,key_data in ipairs(keys_list) do
		local key = get_console():get_integer(key_data.stor_name)
		local keyname = dik_key_to_name[key]
		--log3("%s, %s, %s", key_data.stor_name, key, keyname or "nil")
		if keyname then
			cmd("bind",  key_data.cmd_name, keyname)
			set_key_preset_value(key_data.ogse_name, key)
		else
			set_key_preset_value(key_data.ogse_name, 0)
		end
	end
end

function unbind_key()
	--log1("ogse_rebind_key.unbind_key")
	for _,key_data in ipairs(keys_list) do
		cmd("unbind", key_data.cmd_name)
	end
end

rebind_key()
