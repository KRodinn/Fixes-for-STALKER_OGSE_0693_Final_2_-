-- ************************************************
-- **                    Imp                     **
-- **       Биндер самодельных телепортов        **
-- ** Поддерживает работу самопальных телепортов **
-- ************************************************

function abs_comp(a,b)
	-- Служебная функция вычисления разности
	if( a < b) then
		return (b - a)
	else
		return (a - b)
	end
end

function teleportate(x,y,z)
-- Функция телепортации
	local a = vector()
	-- Задаем координаты
	a.x = x
	a.y = y
	a.z = z

	-- Сама телепортация
	db.actor:set_actor_position(a)

	-- Звуковое сопровождение
	local snd_obj = xr_sound.get_safe_sound_object([[affects\tinnitus3a]])
	snd_obj:play_no_feedback(db.actor, sound_object.s2d, 0, vector(), 1.0)

end

local teleport_binders = {}	-- Список телепортов, нужнен для функции delete_teleports_with_section()
function delete_teleports_with_section(section)
	ogse_anomaly.get_lists()
	if ogse_anomaly.list_del_anom_id == nil then
		ogse_anomaly.list_del_anom_id = {}
	end
	for _, i in ipairs(teleport_binders) do
		local obj = alife():object(i)
		if string.find(obj:section_name(), section) then
			ogse_anomaly.list_del_anom_id[i] = i
		end
	end
	ogse_anomaly.soft_restr_reset()	
	for _, i in ipairs(teleport_binders) do
		local obj = alife():object(i)
		if string.find(obj:section_name(), section) then
			alife():release(obj, true)
		end
	end
	ogse_anomaly.emergency_restr_reset()
end

function bind( obj )
	obj:bind_object( restrictor_teleport( obj ) ) 
end

----------------------------------------------------------------------------------------------------
class "restrictor_teleport" ( object_binder )

function restrictor_teleport:__init(obj) super(obj)
  self.sm = ogse_signals.get_mgr()
end

function restrictor_teleport:net_spawn(data)
	-- Если это телепорт то занесем его в специальный список телепортов
	if self.teleport == true then
		table.insert(teleport_binders, self.object:id())

		-- Заполним таблицу параметров
		self["parametrs"] = {}
		if sys_ini:line_exist(self.section, "radius") then
			self.parametrs["radius"] = tonumber(sys_ini:r_string(self.section, "radius"))
		else
			self.parametrs["radius"] = 2 -- Дефолтный радиус по xy
		end
		if sys_ini:line_exist(self.section, "z_radius") then
			self.parametrs["z_radius"] = tonumber(sys_ini:r_string(self.section, "z_radius"))
		else
			self.parametrs["z_radius"] = self.parametrs["radius"] -- если радиус высоты не задан то задаем равным радиусу xy
		end

		-- Запомним позицию что-бы каждый раз не считать
		local s_obj = alife():object(self.object:id())
		self.parametrs["x"] = tonumber(s_obj.position.x);
		self.parametrs["y"] = tonumber(s_obj.position.y);
		self.parametrs["z"] = tonumber(s_obj.position.z);

		-- Запомним координаты куда телепортимся
		self.parametrs["poz_x"] = tonumber(sys_ini:r_string(self.section, "poz_x"))
		self.parametrs["poz_y"] = tonumber(sys_ini:r_string(self.section, "poz_y"))
		self.parametrs["poz_z"] = tonumber(sys_ini:r_string(self.section, "poz_z"))

		if sys_ini:line_exist(self.section, "rotate") then
			self.parametrs["rotate"] = tonumber(sys_ini:r_string(self.section, "rotate"))
		end

		self.subscribed = {
			[ "signal" ] = "on_update",
			[ "fun"    ] = self.actor_update,
			[ "self"   ] = self,
		}
		self.sm:subscribe( self.subscribed )
		log3("--Teleport [%s] subscribed to update!", self.object:name())
	end
	return true
end

function restrictor_teleport:net_destroy()
	-- Удаляем наш телепорт
	if self.subscribed then
		self.sm:unsubscribe( self.subscribed )
		self.subscribed = nil
		log3("!!Teleport [%s] UNsubscribed from update!", self.object:name())
	end
	teleport_binders[self.object:id()] = nil
	self.parametrs = nil
	object_binder.net_destroy(self)
end

function restrictor_teleport:reload(section)
	self.section = section
	-- Если это телепорт то 
	if sys_ini:line_exist(self.section, "teleport") then
		self["teleport"] = true
	end
end

function restrictor_teleport:actor_update()
	self.sm:reschedule( 200 )

	local acter_poz = db.actor:position()
	local s = self.parametrs
	-- Наш телепорт в онлайне проверяем дальше
	if s.teleporte ~= nil and s.teleporte ~= false then
		-- Телепорт запущен
		if time_global() >= s.time then
			-- Если время отведенное на показ спецэфектов
			-- прошло, производим телепортацию
			teleportate(s.poz_x,s.poz_y,s.poz_z)
			if s.rotate ~= nil then
				db.actor:set_actor_direction(s.rotate)
			end
			s.teleporte = false
			local dist = self.object:position():distance_to( db.actor:position() )
			self.sm:reschedule(
				( dist < 25 and 200 ) or ( dist < 100 and 1000 )
				or math.random( 5000, 6000 )
			)
		end
		return
	end

	-- Пороверим не забрел-ли актер в наш телепорт
	if
		(abs_comp(s.x, acter_poz.x)< s.radius
		and abs_comp(s.z, acter_poz.z)< s.radius
		and abs_comp(s.y, acter_poz.y)< s.z_radius)
	then
		-- Актер в зоне действия телепорта, запустим телепорт
		s["teleporte"] = true
		s["time"] = time_global() + 500
		self.sm:reschedule( 500 )
		-- Запускаем спецэфекты телепортации
		level.add_pp_effector ("teleport.ppe", 2006, false)
	else
		local dist = self.object:position():distance_to( db.actor:position() )
		self.sm:reschedule(
			( dist < 25 and 200 ) or ( dist < 100 and 1000 )
			or math.random( 5000, 6000 )
		)
	end
end
