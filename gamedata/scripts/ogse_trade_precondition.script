-------------------------------------------------------------------------------
--| ogse_trade_precondition.script                                          |--
--| Запрет торговли и раскраска поврежденных предметов, в слотах и на поясе |--
--| OGS Evolution Team, 2014                                                |--
--| version 2.0.0                                                           |--
-------------------------------------------------------------------------------

--ToDo: сделать отключаемую/завышн. цену продажу по персам, к примеру по дружбн/обиде... 

local use_tradability_restrictions = get_bool("options", "use_tradability_restrictions", true)
local ungroup_belt_slot_items      = get_bool("options", "ungroup_belt_slot_items",      true)
local lock_belt_slot_items         = get_bool("options", "lock_belt_slot_items",         true)

local clr = {
	red = 0,
	blue = 1,
	green = 2,
	orange = 3,
}
-- ВАЖНО! цвет с индексом 0, т.е. red используется движком для раскраски по умолчанию 
-- запрещённых к продаже предметов. Менять этот цвет можно только с учётом того, что изменится
-- и дефолтовая закраска.
set_highlight_color(clr.red, GetARGB(255, 124, 0, 0)) -- FF007C00 -- red
set_highlight_color(clr.blue, GetARGB(255, 0, 0, 124)) -- FF00007C -- blue
set_highlight_color(clr.green, GetARGB(255, 0, 128, 0)) -- FF007C00 -- green
set_highlight_color(clr.orange, GetARGB(255, 255, 128, 0)) -- orange

local debug_log = false

local tspec_npc = {["val_friend_of_barman"]=true}

-- ключи - имена профилей сталкеров-торговцев
-- значение задаёт состояние предмета ниже которого персонаж его не купит
local item_condition = {
	["escape_trader"]      = {["weapon"] = 0.3,  ["outfit"] = 0.3},
	["bar_barman"]         = {["weapon"] = 0.8,  ["outfit"] = 0.8},
	["bar_dolg_petrenko"]  = {["weapon"] = 0.7,  ["outfit"] = 0.7},
	["yan_general_ecolog"] = {["weapon"] = 0.95, ["outfit"] = 0.95},
	["mil_Svoboda_trader"] = {["weapon"] = 0.7,  ["outfit"] = 0.7},
	["bandit_trader"]      = {["weapon"] = 0.5,  ["outfit"] = 0.5},
	["default"]            = {["weapon"] = 0.8,  ["outfit"] = 0.8}
}

function attach(sm)
	if not use_tradability_restrictions and not ungroup_belt_slot_items and not lock_belt_slot_items then 
		set_trade_filtration_off()
		set_manual_grouping_off()
		set_manual_highlight_off()
		return
	end
	set_manual_grouping_on()
	set_trade_filtration_on()
	set_manual_highlight_on()
	
	--sm:subscribe({signal = "on_spawn", fun = this.on_actor_spawn})
    sm:subscribe({signal = "npc_use", fun = this.on_npc_use})
	sm:subscribe({signal = "on_body_open", fun = this.on_body_open})
    --sm:subscribe({signal = "on_save", fun = this.on_actor_save})
	
	sm:subscribe({signal = "on_item_to_slot", fun = this.on_item_to_slot})
	sm:subscribe({signal = "on_item_to_ruck", fun = this.on_item_to_ruck})
	sm:subscribe({signal = "on_item_to_belt", fun = this.on_item_to_belt})
	
end

-- проверка, купит ли непись данный предмет
function item_tradable_for_npc(npc, item)
	ASSERT(npc, "[item_untradable_for_npc] 'npc' is a nil reference")
	ASSERT(item, "[item_untradable_for_npc] 'item' is a nil reference")
	local profile_name = npc:profile_name()
	
	local item_type
	if item:is_weapon() then
		item_type = "weapon"
	elseif item:is_outfit() then
		item_type = "outfit"
	else
		return true -- тип неизвестен, по умолчанию продать можно
	end
	local pers_cond = (item_condition[profile_name] or item_condition.default)
	local res = (item:condition() >= pers_cond[item_type])
	return res
end

local iten_place = {
	ruck = 0,
	slot = 1,
	belt = 2,
}

function treat_item(item, place, npc)
	-- если есть собеседник, т.е. идёт разговор или торговля, 
	-- и он не купит предмет из-за плохого состояния
	if use_tradability_restrictions and npc and not item_tradable_for_npc(npc, item) then
		set_item_ungroupable(item) -- то делаем предмет негруппируемым
		set_item_always_untradable(item) -- непродаваемым
		set_item_always_highlighted(item) -- подсвеченным
		set_ii_custom_color_ids(item, clr.red) -- оранжевым
		-- примечание: в движковом фиксе при кастомной подсветке будет сперва проверено движковое 
		-- условие продаваемости. Если предмет не продаётся по движковому условию (т.е. запрещён
		-- к продаже конфигом), то будет закрашен движковым цветом (красным)
		return
	end
	-- собеседника нет или предмет разрешён к продаже,
	-- проверяем размещение
	local lock = false
	if ungroup_belt_slot_items then
		if place == iten_place.belt or db.actor:is_on_belt(item) then -- предмет на поясе
			lock = true -- блокируем
		elseif place == iten_place.slot or db.actor:is_in_slot(item) then -- предмет в слоте
			if not item:is_grenade() then -- кроме гранат
				lock = true -- блокируем
			else
			end
		elseif place == iten_place.ruck or db.actor:is_in_ruck(item) then -- предмет в рюкзаке
			-- ничего не делаем, в рюкзаке группируются и продаются только движковыми условиями
		else
			abort("[ogse_trade_precondition.treat_item] item '%s' place is not slot, belt or ruck", item:name())
		end
	end
	if lock then -- блокирован
		set_item_ungroupable(item) -- то делаем предмет негруппируемым
		if lock_belt_slot_items then
			set_item_always_untradable(item) -- непродаваемым
		else
			set_item_default_tradability(item)
		end
		set_item_always_highlighted(item) -- подсвеченным
		set_ii_custom_color_ids(item, clr.green) -- зелёным
	else -- а иначе оставляем решать движку
		set_item_default_grouping(item)
		set_item_default_tradability(item)
		set_item_default_highlighting(item)
	end
end

local function set_actors_items(npc)
	for i = 0, db.actor:object_count() - 1 do
		treat_item(db.actor:object(i), nil, npc) 
	end
end
-- открытие ящика или тушки
function on_body_open()
	set_actors_items()
	db.actor:invalidate_inventory()
end
-- начало разговора с npc
function on_npc_use(npc, who)
	set_actors_items(npc)
end

function get_second_talker()
	local talk_wnd = level.get_talk_wnd()
	if talk_wnd and talk_wnd:IsShown() then
		return level.get_second_talker()
	end
	local trade_wnd = level.get_trade_wnd()
	if trade_wnd and trade_wnd:IsShown() then
		return level.get_second_talker()
	end
	return nil
end

function on_item_to_slot(item, sitem)
	treat_item(item, iten_place.slot, get_second_talker()) 
end
function on_item_to_ruck(item, sitem)
	treat_item(item, iten_place.ruck, get_second_talker()) 
end
function on_item_to_belt(item, sitem)
	treat_item(item, iten_place.belt, get_second_talker()) 
end
