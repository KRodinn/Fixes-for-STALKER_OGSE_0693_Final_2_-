-- -*- mode: lua; coding: windows-1251-dos -*-

-----------------------------------------------------------------------
--- ogse_wpn_utils.script
--- Модуль функций работы с оружием.
--- Malandrinus, Dusty79 (c) OGS Evolution Team
--- version 0.2 (13/04/2011)
-----------------------------------------------------------------------

-- Функции клиентского объекта:
-- cobj:is_weapon() -- функция определяет, является ли объект оружием.
-- cobj:is_weapon_gl() -- более узкая функция. Определяет, является ли объект оружием с возможностью установки подствольника.


-----------------------------------------------------------------------
-- Получение данных:
-----------------------------------------------------------------------
-- для получения режима подствольника
function get_gl_mode(wpn) 
	-- если оружие не типа "ствол с подствольником", то смысла проверять нет. 
	ASSERT(wpn:is_weapon_gl(), "[ogse_wpn_utils.get_gl_mode] function is only applicable to objects of 'CWeaponMagazinedWGrenade' type!")
	return wpn:get_gl_mode()
end

-- размер магазина активного типа зарядов
--function get_active_magazine_size(wpn) return wpn:get_magazine_size() end

-- размер магазина для патронов (не гранат) независимо от их активности. Для гранат движок всегда принимает размер магазина 1
--function get_magazine_size2(wpn) return wpn:get_wpn_int(nil, 2372) end

-- Логика проверки установленного аддона такая:
-- если статус == 0, значит аддона нет независимо от флажка, 
-- если 1 - значит аддон постоянный и есть независимо от флажка, 
-- если 2 - значит аддон съёмный и надо проверить соответствующий флажок.
-- маски аддонов 1 - прицел, 2 - подствольник, 4 - глушитель

-- для получения статуса установленных аддонов
-- прицел
function get_scope_status(wpn) return get_u32(wpn:section(), "scope_status") end
-- глушитель
function get_silencer_status(wpn) return get_u32(wpn:section(), "silencer_status") end
-- подствольник
function get_grenade_launcher_status(wpn) return get_u32(wpn:section(), "grenade_launcher_status") end

-- флаги аддонов
addons_flags = {
	scope       = 1,
	gl          = 2,
	silencer    = 4,
	grip        = 8,
	magazine    = 16,
	scope_mount = 32,
}

-- для получения флагов установленных аддонов
-- комплектом
function get_addon_flags(wpn) return wpn:get_addon_flags() end
-- прицел
function get_scope_flag(wpn) return bit_and(wpn:get_addon_flags(), addons_flags.scope) ~= 0 end
-- подствольник
function get_grenade_launcher_flag(wpn) return bit_and(wpn:get_addon_flags(), addons_flags.gl) ~= 0 end
-- глушитель
function get_silencer_flag(wpn) return bit_and(wpn:get_addon_flags(), addons_flags.silencer) ~= 0 end
-- рукоять
function get_grip_flag(wpn) return bit_and(wpn:get_addon_flags(), addons_flags.grip) ~= 0 end
-- магазин
function get_magazine_flag(wpn) return bit_and(wpn:get_addon_flags(), addons_flags.magazine) ~= 0 end
-- планка для прицелов
function get_scope_mount_flag(wpn) return bit_and(wpn:get_addon_flags(), addons_flags.scope_mount) ~= 0 end

function add_addon_flags(wpn, flags)
	ASSERT(wpn:is_weapon(), "[add_addon_flags] not weapon object!")
	local old_flags = wpn:get_addon_flags()
	local new_flags = bit_or(old_flags, flags)
	wpn:set_addon_flags(new_flags)
end
function set_extra_addon_flags(wpn, flags)
	ASSERT(wpn:is_weapon(), "[set_extra_addon_flags] not weapon object!")
	local old_flags = wpn:get_addon_flags() -- получаем текущие флаги
	local base_flags = bit_and(old_flags, 7) -- оставляем только младшие три бита - базовые флаги
	local new_flags = bit_or(base_flags, flags) -- комбинируем с дополнительными флагами
	wpn:set_addon_flags(new_flags)
end
-----------------------------------------------------------------------
-- Установка данных:
-----------------------------------------------------------------------
-- размер магазина активного типа зарядов
function set_active_magazine_size(wpn, v) wpn:set_magazine_size(v) end
function get_forced_notex_scope(wpn)
	ASSERT(wpn:is_weapon(), "[get_forced_notex_scope] not weapon object!")
	return bit_and(wpn:get_addon_flags(), 128) ~= 0
end
-- установить/отключить принудительное отключение использования текстуры прицела
function set_forced_notex_scope(wpn, force_no_texture)
	ASSERT(wpn:is_weapon(), "[set_forced_notex_scope] not weapon object!")
	local flags = wpn:get_addon_flags()
	local new_flags = force_no_texture 
		and bit_or(flags, 128) -- ставим флажок
		or  bit_and(flags, 127) -- снимаем флаажок
	wpn:set_addon_flags(new_flags)
end
----------------------------------------------------------------------------------------------------

-- получение состояния прицеливания
function is_aiming_complete(wpn)
	return wpn:get_weapon().zoom_rotation_factor >= 1
end

-- функции получения и установки текущего увеличения для бинокля
function get_binoc_rt_zoom_factor(obj)
	local cls = get_clsid(obj)
	ASSERT(cls == clsid.wpn_binocular or cls == clsid.wpn_binocular_s, "[get_binoc_rt_zoom_factor] object is not a binocular class")
	obj:get_binoc_zoom_factor()
end
function set_binoc_rt_zoom_factor(obj, value)
	local cls = get_clsid(obj)
	ASSERT(cls == clsid.wpn_binocular or cls == clsid.wpn_binocular_s, "[set_binoc_rt_zoom_factor] object is not a binocular class")
	obj:set_binoc_zoom_factor(value)
end

function set_condition_shot_dec( wpn, val )
  wpn:get_weapon().condition_shot_dec = val
end
