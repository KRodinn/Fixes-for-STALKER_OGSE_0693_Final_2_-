
function init(obj)
	xr_motivator.AddToMotivator(obj)
end

function actor_init(npc)
	npc:bind_object(actor_binder(npc))
end

----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init(obj) super(obj)
	self.object:disable_info_portion("ui_inventory")

	self.am = ogse_signals.get_mgr()
	self.am:call("on_load_before_all")
	self.am:call("on_init", obj)
end
function actor_binder:__finalize()
	self.am:call("on_finalize", obj)
	--
	log3("[bind_stalker] actor_binder finalize %s", debug.traceback()) --Возможно, это позволит увидеть повисшие функции, типа get_hud(),
	--из-за которых происходит вылет при загрузке любого сейва после зависа:
	-- 0023:002E46B6 xrLUA_GSC.dll, luabind::detail::stack_content_by_name()
	-- 0023:002E4A54 xrLUA_GSC.dll, luabind::detail::stack_content_by_name()
	-- 0023:002E4B5C xrLUA_GSC.dll, luabind::weak_ref::~weak_ref()
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)
	ASSERT( db.net_spawning_obj == nil, "found net_spawning_obj = %s", db.net_spawning_obj and db.net_spawning_obj:name() or "" )
	db.net_spawning_obj = self.object

	cmd("r2_dof_control", "off")
	cmd("unbind", "contacts") --Отключаем в PDA вкладку "Контакты"

	level.show_indicators()
	level.set_snd_volume( 1 )

	self.object:set_camera_fov( get_u32( "options", "fov_volume", 65 ) ) -- Установка FOV

	db.add_actor(self.object)

	if not db.storage[self.object:id()].pstor then	--KRodin: из xr_logic почему-то не срабатывает, поэтому создаём pstor здесь.
		db.storage[self.object:id()].pstor = {}
	end

	level.disable_input() --Где-то читал, что при вызове set_extensions_flags возможны ложные вызовы калбеков нажатия клавиш. Поэтому надо типа делать так.
	set_extensions_flags(15)
	level.enable_input()

	actor_stats.add_to_ranking(self.object:id())

------------KD: установка настроек графики------------
	-- шмапы
	cmd("r2_ls_depth_bias -0.00005")
	cmd("r2_ls_depth_scale 1.00001")
	cmd("r2_sun_depth_far_bias -0.00001")
	cmd("r2_sun_depth_far_scale 1.0")
	cmd("r2_sun_depth_near_bias -0.0001")
	cmd("r2_sun_depth_near_scale 1.00004")
	cmd("r2_sun_focus on")
	cmd("r2_sun_near_border 1.")
	-- избавляемся от пересвета поверхностей
	cmd("r2_ls_bloom_threshold 1.") --блум
	cmd("r2_sun_lumscale 1.") --мультипликатор цвета солнца (идиотская настройка)
	cmd("r2_rain_drops_control on") --капли на стекле
	cmd("r2_lens_dirt_control on") --грязь на линзе
	cmd("cam_inert 0") --KRodin: сбрасываем инерцию камеры в 0
----------------------KD: end-------------------------

-------- пауза при загрузке --------
	ui_main_menu.start()
------------------------------------

	self.am:subscribe({ signal = "on_talk_open",  fun = this.hide_weapon    })
	self.am:subscribe({ signal = "on_talk_hide",  fun = this.restore_weapon })
	self.am:subscribe({ signal = "on_trade_open", fun = this.hide_weapon    })
	self.am:subscribe({ signal = "on_trade_hide", fun = this.restore_weapon })

	self.am:call("on_spawn", data)

	db.net_spawning_obj = nil
	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()
--log3("~~[%s] Start destroy [%s]", script_name(), self.object and self.object:name() or "nil")

	actor_stats.remove_from_ranking(self.object:id())

	set_extensions_flags(0)

	db.del_actor(self.object)

	self.object:set_callback(callback.inventory_info, nil)
	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	self.object:set_callback(callback.task_state, nil)
	self.object:set_callback(callback.level_border_enter, nil)
	self.object:set_callback(callback.level_border_exit, nil)
	self.object:set_callback(callback.take_item_from_box, nil)
	self.object:set_callback(callback.use_object, nil)
	
	self.object:set_callback(callback_ex.on_key_press, nil)
	self.object:set_callback(callback_ex.on_key_release, nil)
	self.object:set_callback(callback_ex.on_key_hold, nil)
	self.object:set_callback(callback_ex.on_mouse_wheel, nil)
	self.object:set_callback(callback_ex.on_mouse_move, nil)
	self.object:set_callback(callback_ex.on_belt, nil)
	self.object:set_callback(callback_ex.on_ruck, nil)
	self.object:set_callback(callback_ex.on_slot, nil)
	self.object:set_callback(callback_ex.on_select_item, nil)
	self.object:set_callback(callback_ex.on_create_cell_item, nil)

	self.object:set_callback(callback_ex.attach_vehicle, nil)
	self.object:set_callback(callback_ex.use_vehicle, nil)
	self.object:set_callback(callback_ex.detach_vehicle, nil)

	self.object:set_callback(callback_ex.on_hud_animation_end, nil)
	self.object:set_callback(callback.hit, nil)
	
	self.object:set_callback(callback_ex.on_goodwill_change, nil)
	
	self.object:set_callback(callback.death, nil)
	self.object:set_callback(callback_ex.on_after_save, nil)

	self.object:set_callback(callback_ex.dbg_gg_distance_failed, nil)

	self.object:set_callback(callback_ex.entity_alive_before_hit, nil)
	self.object:set_callback(callback_ex.on_before_use_item, nil)

	self.am:call("on_destroy")
--log3("--[%s] End destroy [%s]", script_name(), self.object and self.object:name() or "nil")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
--log3("~~[%s] Start reinit [%s]", script_name(), self.object and self.object:name() or "nil")
	local npc_id = self.object:id()

	db.storage[npc_id] = { }

	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.object:set_callback(callback.inventory_info, self.info_callback, self)
	self.object:set_callback(callback.article_info, self.article_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self) -- for game stats
	self.object:set_callback(callback.task_state, self.task_callback, self)
	self.object:set_callback(callback.level_border_enter, self.level_border_enter, self)
	self.object:set_callback(callback.level_border_exit, self.level_border_exit, self)
	self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	self.object:set_callback(callback.use_object, self.use_inventory_item, self)
	self.object:set_callback(callback.hit, self.actor_hit_callback, self)
	
	self.object:set_callback(callback.death, self.actor_death_callback, self)

	self.object:set_callback(callback_ex.on_key_press, self.on_key, self)			-- нажатие клавиши
	self.object:set_callback(callback_ex.on_key_release, self.on_key_free, self)		-- отпускание клавиши
	self.object:set_callback(callback_ex.on_key_hold, self.on_key_hold, self)		-- удержание клавиши
	self.object:set_callback(callback_ex.on_mouse_wheel, self.on_wheel_rotation, self)	-- вращение колесика мыши
	self.object:set_callback(callback_ex.on_mouse_move, self.on_mouse_move, self)		-- движение мыши
	self.object:set_callback(callback_ex.on_belt, self.item_to_belt, self)		-- перемещение предмета на пояс
	self.object:set_callback(callback_ex.on_ruck, self.item_to_backpack, self)	-- перемещение предмета в рюкзак
	self.object:set_callback(callback_ex.on_slot, self.item_to_slot, self)		-- перемещение предмета в слот
	self.object:set_callback(callback_ex.on_select_item, self.on_select_item, self)
	self.object:set_callback(callback_ex.on_create_cell_item, self.on_create_cell_item, self)

	self.object:set_callback(callback_ex.attach_vehicle, self.attach_vehicle, self) --Посадка в машину
	self.object:set_callback(callback_ex.use_vehicle, self.use_vehicle, self) --Юз машины (без посадки)
	self.object:set_callback(callback_ex.detach_vehicle, self.detach_vehicle, self) --Высадка из машины

	self.object:set_callback(callback_ex.on_hud_animation_end, self.hud_animation_end, self) -- вызывается в конце проигрывания анимации худа (только если используем play_hud_animation)
	self.object:set_callback(callback_ex.on_goodwill_change, self.on_goodwill_change, self)		-- изменение отношений
	--
	self.object:set_callback(callback_ex.entity_alive_before_hit, self.before_hit_callback, self)
	self.object:set_callback(callback_ex.on_before_use_item, self.before_use, self)
	self.object:set_callback(callback_ex.on_after_save, self.after_save, self)

	self.am:call("on_reinit")
--log3("--[%s] End reinit [%s]", script_name(), self.object and self.object:name() or "nil")
end

function actor_binder:hud_animation_end(a1, blend_addr)
	local addr = sum_args_ex(blend_addr, 56)
	local value = self.object:get_memory_int("", addr)
end

function actor_binder:on_goodwill_change(from, to)
	self.am:call("on_goodwill_change", from, to)
end

function actor_binder:actor_death_callback(victim, who)
	level.set_snd_volume( 1 )

	self.am:call("on_actor_death", victim, who)
end

function actor_binder:debug_monster_follow_path(id, params)
	local g0 = bit_and(params, 65535)
	local g1 = bit.rshift(params, 16)

	log3("id = [%s], g0 = [%s], g1 = [%s]", id, g0, g1)
	local obj = alife():object(id)
	if obj then
		log3("actor_binder:debug_monster_follow_path: [%s]", obj:name())
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	if not box or not item then return end
	local sobj = alife():object(item:id())
	if not sobj then return end

	self.am:call("on_take_from_box", box, item, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_enter(npc, info_id)
	self.am:call("on_level_border_enter", npc, info_id)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_exit(npc, info_id)
	self.am:call("on_level_border_exit", npc, info_id)
end
----------------------------------------------------------------------------------------------------------------------
local info2call = {
	ui_pda                   = "on_pda_open",
	ui_pda_hide              = "on_pda_hide",
	ui_pda_contacts          = "on_pda_contacts_open",
	ui_pda_contacts_hide     = "on_pda_contacts_hide",
	ui_pda_map_local         = "on_pda_map_local",
	ui_pda_map_global        = "on_pda_map_global",
	ui_pda_news              = "on_pda_news_open",
	ui_pda_news_hide         = "on_pda_news_hide",
	ui_pda_jobs_failed       = "on_pda_jobs_failed",
	ui_pda_jobs_accomplished = "on_pda_jobs_accomplished",
	ui_pda_jobs_current      = "on_pda_jobs_current",
	ui_pda_jobs              = "on_pda_jobs_open",
	ui_pda_jobs_hide         = "on_pda_jobs_hide",
	ui_pda_diary             = "on_pda_diary_open",
	ui_pda_diary_hide        = "on_pda_diary_hide",
	ui_pda_encyclopedia      = "on_pda_encyclopedia_open",
	ui_pda_encyclopedia_hide = "on_pda_encyclopedia_hide",
	ui_pda_actor_info        = "on_pda_actor_info",
	ui_pda_ranking           = "on_pda_ranking",
	ui_pda_events            = "on_pda_events",
	ui_inventory             = "on_inventory_open",
	ui_inventory_hide        = "on_inventory_hide",
	ui_talk                  = "on_talk_open",
	ui_talk_hide             = "on_talk_hide",
	ui_trade                 = "on_trade_open",
	ui_trade_hide            = "on_trade_hide",
	ui_car_body              = "on_body_open",
	ui_car_body_hide         = "on_body_hide",
}
function actor_binder:info_callback(npc, info_id)
	level_tasks.proceed() --Сюжет

	level_tasks.process_info_portion(info_id) --Отметки на карте

	self.am:call("on_info", npc, info_id)

	local sc = info2call[info_id]
	if sc then
		self.am:call(sc, npc)
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_trade(item, sell_bye, money)
	self.am:call("on_trade", item, sell_bye, money)
end
----------------------------------------------------------------------------------------------------------------------
local table_group = {
	["Diary"]=game.translate_string("bind_stalker_table_group_1_text"),
	["Mutants"]=game.translate_string("bind_stalker_table_group_2_text"),
	["Social"]=game.translate_string("bind_stalker_table_group_3_text"),
	["Artifacts"]=game.translate_string("bind_stalker_table_group_4_text"),
	["Klondike_Artifacts"]=game.translate_string("bind_stalker_table_group_4_text"),
	["Anomalies"]=game.translate_string("bind_stalker_table_group_5_text"),
	["Locations"]=game.translate_string("bind_stalker_table_group_6_text"),
	["Zone-story"]=game.translate_string("bind_stalker_table_group_7_text"),
	["Stories"]=game.translate_string("bind_stalker_table_group_8_text"),
	["memuars"]=game.translate_string("bind_stalker_table_group_9_text"), 
	["Found_PDA"]=game.translate_string("bind_stalker_table_group_10_text"), 
	["st_operation_agroprom"]=game.translate_string("bind_stalker_table_group_1_text"),
	["LabX18_information"]=game.translate_string("bind_stalker_table_group_1_text"), 
	["aes_military_task"]=game.translate_string("bind_stalker_table_group_1_text"),
	["Vehicles"]=game.translate_string("bind_stalker_table_group_1_text"),
	["Hunter_tips"]=game.translate_string("bind_stalker_table_group_1_text"),
}

function actor_binder:article_callback(npc, group, name, article_type)
	if device().precache_frame >1 then return end

	if table_group[group] then
		news_manager.send_encyclopedy(group == "Diary" and "diary" or "encyclopedy", group)
		ogse.send_tip(game.translate_string(name), table_group[group], nil, 7)
	end

	self.am:call("on_article", npc, group, name, article_type)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_take(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then
		if obj:section() ~= "bolt" then
			self.object:drop_item(obj)
		end
		return
	end

	if obj:is_artefact() and not has_alife_info("tutorial_artefact_gain") then
		game.start_tutorial("part_19_activation")
		self.object:give_info_portion("tutorial_artefact_gain")
	end

    level_tasks.proceed()

	self.am:call("on_take", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_drop(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

    level_tasks.proceed()

	self.am:call("on_drop", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:before_use(item)
	if not item then return end
	local sobj = alife():object(item:id())
	if not sobj then return end

	self.am:call("on_actor_before_use", item, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:use_inventory_item(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_use", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:before_hit_callback(p_s_hit, p_ignore_flags)
	local hit_data = read_hit_data(p_s_hit)
--log3("--[%s] Called before_hit_callback for [%s]: %s, %s, %s", script_name(), self.object:name(), hit_data, p_s_hit, p_ignore_flags)
	self.am:call("on_actor_before_hit", obj, hit_data, p_s_hit, p_ignore_flags, self)
end

function actor_binder:actor_hit_callback(obj, amount, local_direction, who, bone_index)
--log3("--[%s] Called hit_callback for [%s]. Who: [%s], amount: [%s]", script_name(), self.object:name(), who:name(), amount)
	ogse_critical_hit.check_critical(amount, bone_index, who)

	self.am:call("on_hit", obj, amount, local_direction, who, bone_index)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:task_callback(_task, _objective, _state)
	self.am:call("on_task", _task, _objective, _state)
end
----------------------------------------------------------------------------------------------------------------------
local update_was_never_called = true
function actor_binder:update(delta)
	self.am:call("on_update", delta)

	if update_was_never_called then
		-- заебал уже этот фонарь
		local torch = self.object:item_in_slot(9)
		if torch then
			torch:switch_torch(not torch:is_torch_enabled())
			torch:switch_torch(not torch:is_torch_enabled())
		end
-------------------------------------------------------------------
		if not has_alife_info("storyline_actor_start") then
			self.object:give_info_portion("global_dialogs") --KRodin: не совсем понял для чего это нужно, но пусть будет.

			self.am:call("on_storyline_start")
			self.object:give_info_portion("storyline_actor_start")
		end
-------------------------------------------------------------------
		self.am:call("on_first_update")
		update_was_never_called = false
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key(key)
	self.am:call("on_key_down", key, dik_to_bind(key))
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key_free(key)
	self.am:call("on_key_up", key, dik_to_bind(key))
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key_hold(key)
	self.am:call("on_key_hold", key, dik_to_bind(key))
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_wheel_rotation(vol)
	self.am:call("on_wheel", vol-100000)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_mouse_move(velx, vely)
	self.am:call("on_mouse_move", velx-100000, vely-100000)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_belt(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_belt", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_backpack(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_ruck", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_slot(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_slot", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_select_item( obj )
	if not obj then return end
	local sobj = alife():object( obj:id() )
	if not sobj then return end

	self.am:call("on_select_item", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_create_cell_item( obj )
	if not obj then return end
	local sobj = alife():object( obj:id() )
	if not sobj then return end

	self.am:call("on_create_cell_item", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	ASSERT( db.saving_obj == nil, "found saving_obj = %s", db.saving_obj and db.saving_obj:name() or "" )
	db.saving_obj = self.object

	ogse.save_var("game_difficulty", level.get_game_difficulty(), "u8") --Сохраняем уровень сложности

	xr_logic.pstor_save_all(self.object, packet)

	self.am:call("on_save", packet)
	self.am:call("on_save_after_all")

	db.saving_obj = nil
end 
----------------------------------------------------------------------------------------------------------------------
function actor_binder:after_save()
	self.am:call( "on_after_save" )
end
----------------------------------------------------------------------------------------------------------------------
local game_difficulty_by_num = {"gd_novice", "gd_stalker", "gd_veteran", "gd_master"}
function actor_binder:load(reader)
--log3("~~[%s] Start load [%s]", script_name(), self.object and self.object:name() or "nil")
	ASSERT( db.loading_obj == nil, "found loading_obj = %s", db.loading_obj and db.loading_obj:name() or "" )
	db.loading_obj = self.object

	local game_difficulty = ogse.load_var("game_difficulty", 3) --Загружаем уровень сложности
	cmd("g_game_difficulty", game_difficulty_by_num[game_difficulty + 1]) --и устанавливаем его.

	xr_logic.pstor_load_all(self.object, reader)

	self.am:call("on_load", reader)

	db.loading_obj = nil
--log3("--[%s] End load [%s]", script_name(), self.object and self.object:name() or "nil")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:attach_vehicle(obj)
	if not obj then return end
	local sobj = alife():object( obj:id() )
	if not sobj then return end

	self.am:call("on_attach_vehicle", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:use_vehicle(obj)
	if not obj then return end
	local sobj = alife():object( obj:id() )
	if not sobj then return end

	self.am:call("on_use_vehicle", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:detach_vehicle(obj) --KRodin: криво работает, поэтому более не используется. См. ogse_car_control.script
--[=[
	if not obj then return end
	local sobj = alife():object( obj:id() )
	if not sobj then return end

	self.am:call("on_detach_vehicle", obj, sobj)
--]=]
end
----------------------------------------------------------------------------------------------------------------------

-- Weapon functions
local restore_wpn_t, weapon_hide

function hide_weapon()
  weapon_hide = true
  if restore_wpn_t then return end
  db.actor:hide_weapon()
  restore_wpn_t = dsh.wait_condition(
    function()
      return not ( weapon_hide or db.actor:is_talking() )
    end,
    function()
      db.actor:restore_weapon()
      weapon_hide   = false
      restore_wpn_t = nil
    end,
    function()
      ogse_signals.get_mgr():reschedule( 200 )
    end
  )
end

function restore_weapon()
   weapon_hide = false
end
