table_group = {
	["Diary"]=game.translate_string("bind_stalker_table_group_1_text"),
	["Mutants"]=game.translate_string("bind_stalker_table_group_2_text"),
	["Social"]=game.translate_string("bind_stalker_table_group_3_text"),
	["Artifacts"]=game.translate_string("bind_stalker_table_group_4_text"),
	["Klondike_Artifacts"]=game.translate_string("bind_stalker_table_group_4_text"),
	["Anomalies"]=game.translate_string("bind_stalker_table_group_5_text"),
	["Locations"]=game.translate_string("bind_stalker_table_group_6_text"),
	["Zone-story"]=game.translate_string("bind_stalker_table_group_7_text"),
	["Stories"]=game.translate_string("bind_stalker_table_group_8_text"),
	["memuars"]=game.translate_string("bind_stalker_table_group_9_text"), 
	["Found_PDA"]=game.translate_string("bind_stalker_table_group_10_text"), 
	["st_operation_agroprom"]=game.translate_string("bind_stalker_table_group_1_text"),
	["LabX18_information"]=game.translate_string("bind_stalker_table_group_1_text"), 
	["aes_military_task"]=game.translate_string("bind_stalker_table_group_1_text"),
	["Vehicles"]=game.translate_string("bind_stalker_table_group_1_text"),
	["Hunter_tips"]=game.translate_string("bind_stalker_table_group_1_text"),
}

function init(obj)
	xr_motivator.AddToMotivator(obj)
end

function actor_init(npc)
	npc:bind_object(actor_binder(npc))
end

local game_difficulty_by_num = {
	[0] = "gd_novice",
	[1] = "gd_stalker",
	[2] = "gd_veteran",
	[3] = "gd_master"
	}

local weapon_hide = false
----------------------------------------------------------------------------------------------------------------------
class "actor_binder" (object_binder)
----------------------------------------------------------------------------------------------------------------------
function actor_binder:__init(obj) super(obj)
	self.object:disable_info_portion("ui_inventory")

	self.am = ogse_signals.get_mgr()
	self.am:call("on_load_before_all")
	self.am:call("on_init", obj)
end
function actor_binder:__finalize()
	self.am:call("on_finalize", obj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_spawn(data)

	ogse_debug.process_actor("a_spw", 1)
	cmd("r2_dof_control", "off")

	level.show_indicators()

	ogse_debug.process_actor("a_spw", 2)
	xr_gulag.make_restrictors_registry()

	self.weapon_hide = false -- спрятано или нет оружие при разговоре.
	weapon_hide = false -- устанавливаем глобальный дефолтовый флаг.

	ogse_debug.process_actor("a_spw", 4)
	db.add_actor(self.object)

	ogse_debug.process_actor("a_spw", 5)
	set_extensions_flags(15)

	level.enable_input()

	ogse_debug.process_actor("a_spw", 7)
	if(actor_stats.add_to_ranking~=nil)then
		actor_stats.add_to_ranking(self.object:id())
	end

	ogse_debug.process_actor("a_spw", 9)
	death_manager.init_drop_settings() --Загружаем настройки дропа

	ogse_debug.process_actor("a_spw", 14)
-------- пауза при загрузке --------
	ui_main_menu.start()
------------------------------------

	self.am:call("on_spawn", data)

	ogse_debug.process_actor("a_spw", 0)
	return true
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:net_destroy()

	if(actor_stats.remove_from_ranking~=nil)then
		actor_stats.remove_from_ranking(self.object:id())
	end

	set_extensions_flags(0)

	db.del_actor(self.object)

	self.object:set_callback(callback.inventory_info, nil)
	self.object:set_callback(callback.article_info, nil)
	self.object:set_callback(callback.on_item_take, nil)
	self.object:set_callback(callback.on_item_drop, nil)
	self.object:set_callback(callback.task_state, nil)
	self.object:set_callback(callback.level_border_enter, nil)
	self.object:set_callback(callback.level_border_exit, nil)
	self.object:set_callback(callback.take_item_from_box, nil)
	self.object:set_callback(callback.use_object, nil)
	
	self.object:set_callback(callback_ex.on_key_press, nil)
	self.object:set_callback(callback_ex.on_key_release, nil)
	self.object:set_callback(callback_ex.on_key_hold, nil)
	self.object:set_callback(callback_ex.on_mouse_wheel, nil)
	self.object:set_callback(callback_ex.on_mouse_move, nil)
	self.object:set_callback(callback_ex.on_belt, nil)
	self.object:set_callback(callback_ex.on_ruck, nil)
	self.object:set_callback(callback_ex.on_slot, nil)
	self.object:set_callback(callback_ex.on_hud_animation_end, nil)
	self.object:set_callback(callback.hit, nil)
	
	self.object:set_callback(callback_ex.on_goodwill_change, nil)
	
	self.object:set_callback(callback.death, nil)
	self.object:set_callback(callback_ex.on_after_save, nil)

	self.object:set_callback(callback_ex.dbg_gg_distance_failed, nil)

	self.object:set_callback(callback_ex.entity_alive_before_hit, nil)
	self.object:set_callback(callback_ex.on_before_use_item, nil)

	if sr_psy_antenna.psy_antenna then
		sr_psy_antenna.psy_antenna:destroy()
		sr_psy_antenna.psy_antenna = false
	end

	self.am:call("on_destroy")
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:reinit()
	local npc_id = self.object:id()

	db.storage[npc_id] = { }

	self.st = db.storage[npc_id]
	self.st.pstor = nil

	self.object:set_callback(callback.inventory_info, self.info_callback, self)
	self.object:set_callback(callback.article_info, self.article_callback, self)
	self.object:set_callback(callback.on_item_take, self.on_item_take, self)
	self.object:set_callback(callback.on_item_drop, self.on_item_drop, self)
	self.object:set_callback(callback.trade_sell_buy_item, self.on_trade, self) -- for game stats
	self.object:set_callback(callback.task_state, self.task_callback, self)
	self.object:set_callback(callback.level_border_enter, self.level_border_enter, self)
	self.object:set_callback(callback.level_border_exit, self.level_border_exit, self)
	self.object:set_callback(callback.take_item_from_box, self.take_item_from_box, self)
	self.object:set_callback(callback.use_object, self.use_inventory_item, self)
	self.object:set_callback(callback.hit, self.actor_hit_callback, self)
	
	self.object:set_callback(callback.death, self.actor_death_callback, self)

	self.object:set_callback(callback_ex.on_key_press, self.on_key, self)			-- нажатие клавиши
	self.object:set_callback(callback_ex.on_key_release, self.on_key_free, self)		-- отпускание клавиши
	self.object:set_callback(callback_ex.on_key_hold, self.on_key_hold, self)		-- удержание клавиши
	self.object:set_callback(callback_ex.on_mouse_wheel, self.on_wheel_rotation, self)	-- вращение колесика мыши
	self.object:set_callback(callback_ex.on_mouse_move, self.on_mouse_move, self)		-- движение мыши
	self.object:set_callback(callback_ex.on_belt, self.item_to_belt, self)		-- перемещение предмета на пояс
	self.object:set_callback(callback_ex.on_ruck, self.item_to_backpack, self)	-- перемещение предмета в рюкзак
	self.object:set_callback(callback_ex.on_slot, self.item_to_slot, self)		-- перемещение предмета в слот
	self.object:set_callback(callback_ex.on_hud_animation_end, self.hud_animation_end, self) -- вызывается в конце проигрывания анимации худа (только если используем play_hud_animation)
	self.object:set_callback(callback_ex.on_goodwill_change, self.on_goodwill_change, self)		-- изменение отношений
	--
	self.object:set_callback(callback_ex.entity_alive_before_hit, self.before_hit_callback, self)
	self.object:set_callback(callback_ex.on_before_use_item, self.before_use, self)
	self.object:set_callback(callback_ex.on_after_save, self.after_save, self)

	self.am:call("on_reinit")
end

function actor_binder:hud_animation_end(a1, blend_addr)
	local addr = sum_args_ex(blend_addr, 56)
	local value = db.actor:get_memory_int("", addr)
end

function actor_binder:on_goodwill_change(from, to)
	self.am:call("on_goodwill_change", from, to)
end

controllerSoundPresentOnDeath = false
function actor_binder:actor_death_callback(victim, who)
	controllerSoundPresentOnDeath = false
	local actorPosition = self.object:position()
	local kontrikSoundAuraDistance = get_float("m_controller_e", "PsyAura_Fake_MaxAddDist", 90.0)
	kontrikSoundAuraDistance = kontrikSoundAuraDistance*kontrikSoundAuraDistance
	for k,v in pairs(db.creature) do
		if v == false then		-- монстры
			local obj = level.object_by_id(k)
			if obj and obj:clsid() == clsid.controller_s and obj:position():distance_to_sqr(actorPosition) <= kontrikSoundAuraDistance then
				controllerSoundPresentOnDeath = true
				cmd("cfg_save", "user.ltx")
				cmd("unbind", "quick_load")
				cmd("unbind_sec", "quick_load")
				break
			end
		end
	end

	self.am:call("on_actor_death", victim, who)
end

function actor_binder:debug_monster_follow_path(id, params)
	local g0 = bit_and(params, 65535)
	local g1 = bit.rshift(params, 16)
	
	log3("id = %d, g0 = %d, g1 = %d", id, g0, g1)
	local obj = alife():object(id)
	if obj then
		log3("actor_binder:debug_monster_follow_path: %s", obj:name())
	end
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:take_item_from_box(box, item)
	local sobj = alife():object(item:id())
	local story_id = box:story_id()
	if not story_id or not sobj then return end

	treasure_manager.take_item_from_box(box, story_id)

	self.am:call("on_take_from_box", box, item, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_enter(npc, info_id)
	self.am:call("on_level_border_enter", npc, info_id)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:level_border_exit(npc, info_id)
	self.am:call("on_level_border_exit", npc, info_id)
end
----------------------------------------------------------------------------------------------------------------------
local info2call = {
	ui_pda                   = "on_pda_open",
	ui_pda_hide              = "on_pda_hide",
	ui_pda_contacts          = "on_pda_contacts_open",
	ui_pda_contacts_hide     = "on_pda_contacts_hide",
	ui_pda_map_local         = "on_pda_map_local",
	ui_pda_map_global        = "on_pda_map_global",
	ui_pda_news              = "on_pda_news_open",
	ui_pda_news_hide         = "on_pda_news_hide",
	ui_pda_jobs_failed       = "on_pda_jobs_failed",
	ui_pda_jobs_accomplished = "on_pda_jobs_accomplished",
	ui_pda_jobs_current      = "on_pda_jobs_current",
	ui_pda_jobs              = "on_pda_jobs_open",
	ui_pda_jobs_hide         = "on_pda_jobs_hide",
	ui_pda_diary             = "on_pda_diary_open",
	ui_pda_diary_hide        = "on_pda_diary_hide",
	ui_pda_encyclopedia      = "on_pda_encyclopedia_open",
	ui_pda_encyclopedia_hide = "on_pda_encyclopedia_hide",
	ui_pda_actor_info        = "on_pda_actor_info",
	ui_pda_ranking           = "on_pda_ranking",
	ui_pda_events            = "on_pda_events",
	ui_inventory             = "on_inventory_open",
	ui_inventory_hide        = "on_inventory_hide",
	ui_talk                  = "on_talk_open",
	ui_talk_hide             = "on_talk_hide",
	ui_trade                 = "on_trade_open",
	ui_trade_hide            = "on_trade_hide",
	ui_car_body              = "on_body_open",
	ui_car_body_hide         = "on_body_hide",
}
function actor_binder:info_callback(npc, info_id)

	ogse_debug.process_actor("inf", 1)
	level_tasks.proceed() --Сюжет

	ogse_debug.process_actor("inf", 2)
	level_tasks.process_info_portion(info_id) --Отметки на карте

	ogse_debug.process_actor("inf", 4)

	self.am:call("on_info", npc, info_id)

	local sc = info2call[info_id]
	if sc then
		self.am:call(sc, npc)
	end

	ogse_debug.process_actor("inf", 0)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_trade(item, sell_bye, money)
	self.am:call("on_trade", item, sell_bye, money)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:article_callback(npc, group, name, article_type)
	if device().precache_frame >1 then return end

	if table_group[group] ~= nil then -- yes, old school.. we use "~= nil"
		news_manager.send_encyclopedy(group == "Diary" and "diary" or "encyclopedy", group)
		ogse.send_tip(game.translate_string(name), table_group[group], nil, 7)
	end

	self.am:call("on_article", npc, group, name, article_type)
end
----------------------------------------------------------------------------------------------------------------------

local remove_this_shit_immediately = {
	["fake_grenades_base"] = true,
	["grenade_f1_fake"] = true,
	["grenade_rgd5_fake"] = true,
	["grenade_gd-05_fake"] = true,
	["grenade_light_fake"] = true,
	["grenade_f1_test"] = true,
	["grenade_rgd5_test"] = true,
	["grenade_gd-05_test"] = true,
	["grenade_light_test"] = true,
	["gl_test_shell"] = true,
	["wpn_fake_missile"] = true,
	["gl_test_shell_ammo_vog-25"] = true,
	["gl_test_shell_ammo_vog-25p"] = true,
	["gl_test_shell_ammo_m209"] = true,
	["gl_test_shell_ammo_m208a"] = true,
	["gl_fake_missile"] = true,
	["gl_fake_missile_ammo_vog-25"] = true,
	["gl_fake_missile_ammo_vog-25p"] = true,
	["gl_fake_missile_ammo_m209"] = true,
	["gl_fake_missile_ammo_m208a"] = true,
}

function check_pickup_fake_gren(obj, srv_obj)
	local section = srv_obj:section_name()
	if remove_this_shit_immediately[section] then
		log1("!!DEBUG! Removing fake item begin")
		death_manager.shedule_release(obj)
		log1("!!DEBUG! Removing fake item end")
		return true	
	end	
	return false
end

function actor_binder:on_item_take(obj)

	ogse_debug.process_actor("itm_t", 1)
	if not obj then ogse_debug.process_actor("itm_t", 0) return end
	local sobj = alife():object(obj:id())
	if not sobj then
		if obj:section() ~= "bolt" then
			db.actor:drop_item(obj)
		end
		ogse_debug.process_actor("itm_t", 0)
		return
	end

	ogse_debug.process_actor("itm_t", 2)
	if check_pickup_fake_gren(obj, sobj) then
		ogse_debug.process_actor("itm_t", 0)
		return
	end

	ogse_debug.process_actor("itm_t", 4)
    level_tasks.proceed()

	ogse_debug.process_actor("itm_t", 7)

	self.am:call("on_take", obj, sobj)

	ogse_debug.process_actor("itm_t", 0)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_item_drop(obj)
	if not obj then ogse_debug.process_actor("itm_d", 0) return end
	local sobj = alife():object(obj:id())
	if not sobj then ogse_debug.process_actor("itm_d", 0) return end

	ogse_debug.process_actor("itm_d", 1)

    level_tasks.proceed()

	self.am:call("on_drop", obj, sobj)

	ogse_debug.process_actor("itm_d", 0)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:before_use(item)
	if not item then return end
	local sobj = alife():object(item:id())
	if not sobj then return end

	self.am:call("on_actor_before_use", item, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:use_inventory_item(obj)
	if not obj then ogse_debug.process_actor("itm_u", 0) return end
	local sobj = alife():object(obj:id())
	if not sobj then ogse_debug.process_actor("itm_u", 0) return end

	ogse_debug.process_actor("itm_u", 1)
	self.am:call("on_use", obj, sobj)

	ogse_debug.process_actor("itm_u", 0)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:before_hit_callback(p_s_hit, p_ignore_flags)
	local hit_data = read_hit_data(p_s_hit)
	self.am:call("on_actor_before_hit", hit_data, p_s_hit, p_ignore_flags)
end

function actor_binder:actor_hit_callback(obj, amount, local_direction, who, bone_index)

	ogse_critical_hit.check_critical(amount, bone_index, who)

	checker_minefield.on_act_hit()

	self.am:call("on_hit", obj, amount, local_direction, who, bone_index)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:task_callback(_task, _objective, _state)

	ogse_debug.process_actor("tsk", 1)
	task_manager.task_callback(_task:get_id(), _objective:get_idx(), _state)
	ogse_debug.process_actor("tsk", 2)
	if _objective:get_idx() == 0 then
		ogse_debug.process_actor("tsk", 3)
		if _state == task.fail then
			news_manager.send_task(db.actor, "fail", _task, _objective)
		elseif _state == task.completed then
			task_manager.reward_by_task(_task)
			news_manager.send_task(db.actor, "complete", _task, _objective)
		else
			news_manager.send_task(db.actor, "new", _task, _objective)
		end
	else
		ogse_debug.process_actor("tsk", 4)
		if _task:get_objective(0):get_state() == task.in_progress then
			news_manager.send_task(db.actor, "update", _task, _objective)
		end
	end

	self.am:call("on_task", _task, _objective, _state)

	ogse_debug.process_actor("tsk", 0)
end
----------------------------------------------------------------------------------------------------------------------
local update_was_never_called = true
local mteleport_update_time = time_global()
function actor_binder:update(delta)
	--// Для персональных функций, в обновлениях. Phoenix
	--personal_update.main()
	--//End

	ogse_debug.check_npc()
	ogse_debug.check_monsters()	
	ogse_debug.check_gulag()	

	ogse_debug.process_actor("upd", 7)
	if weapon_hide == true or self.object:is_talking() then --Апдейт прятание оружия игрока во время диалога
		if self.weapon_hide == false then
			self.object:hide_weapon()
			self.weapon_hide = true
		end
	else
		if self.weapon_hide == true then
			self.object:restore_weapon()
			self.weapon_hide = false
		end
	end

	if mteleport_update_time < time_global() then --Эти функции апдейтить только так и никак больше! При переносе в ватчдоги, они вообще переставали работать!
		ogse_debug.process_actor("upd", 814)
		ogse_water_restrictor.actor_update()

		mteleport_update_time = mteleport_update_time + 200
	end
	
	ogse_debug.process_actor("upd", 14)
	_sdata.vis_int()

	ogse_debug.process_actor("upd", 15)
	self.am:call("on_update", delta)	

--=====================================================================================================
	if update_was_never_called then
		for k, v in pairs(xr_companion.companions) do
			if xr_companion.companions[k] == "companion" then
				if not ogse_car_control.current_car then
					xr_companion.check_teleport(k)
				end
			end
		end
----------------------------------------------------------------------------------------------
		if not has_alife_info("storyline_actor_start") and (level.name() == "l01_escape") then

			self.am:call("on_storyline_start")

			self.object:give_info_portion("storyline_actor_start")
		end
----------------------------------------------------------------------------------------------
		if not has_alife_info("global_dialogs") then
			self.object:give_info_portion("global_dialogs")
		end
		if not has_alife_info("level_changer_icons") then
			self.object:give_info_portion("level_changer_icons")
		end

		ogse_debug.process_actor("upd", 16)

		self.am:call("on_first_update")
		update_was_never_called = false
	end
--=====================================================================================================

	ogse_debug.process_actor("upd", 18)
	dunin_ammo.on_update() --Обновление упаковщика патронов -- должно быть предпоследним на апе актора!
	
	ogse_debug.process_actor("upd", 19)
	death_manager.release_deferred_ammo() --Отложенное удаление патронов -- должно быть последним на апе актора!
	
	ogse_debug.process_actor("upd", 0)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key(key)
	self.am:call("on_key_down", key, dik_to_bind(key))
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key_free(key)
	self.am:call("on_key_up", key, dik_to_bind(key))
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_key_hold(key)
	self.am:call("on_key_hold", key, dik_to_bind(key))
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_wheel_rotation(vol)
	self.am:call("on_wheel", vol-100000)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:on_mouse_move(velx, vely)
	self.am:call("on_mouse_move", velx-100000, vely-100000)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_belt(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_belt", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_backpack(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_ruck", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:item_to_slot(obj)
	if not obj then return end
	local sobj = alife():object(obj:id())
	if not sobj then return end

	self.am:call("on_item_to_slot", obj, sobj)
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:save(packet)
	ogse.save_var("game_difficulty", level.get_game_difficulty()) --Сохраняем уровень сложности

	xr_logic.pstor_save_all(self.object, packet)
	treasure_manager.save(packet)
	task_manager.save(packet)
	sr_psy_antenna.save(packet)

	self.am:call("on_save", packet)
	self.am:call("on_save_after_all")
end 
----------------------------------------------------------------------------------------------------------------------
function actor_binder:after_save()
	self.am:call( "on_after_save" )
end
----------------------------------------------------------------------------------------------------------------------
function actor_binder:load(reader)
	local game_difficulty = ogse.load_var("game_difficulty", 3) --Загружаем уровень сложности
	cmd("g_game_difficulty", game_difficulty_by_num[game_difficulty]) --и устанавливаем его.

	xr_logic.pstor_load_all(self.object, reader)
	treasure_manager.load(reader)
	task_manager.load(reader)
	sr_psy_antenna.load(reader)

	self.am:call("on_load", reader)
end
----------------------------------------------------------------------------------------------------------------------

-- Weapon functions
function hide_weapon()
	weapon_hide = true
end
function restore_weapon()
	weapon_hide = false
end
