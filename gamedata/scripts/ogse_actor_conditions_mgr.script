
function attach( sm ) -- для менеджера сигналов
  sm:subscribe({ signal = "on_spawn",   fun = this.on_spawn   })
  sm:subscribe({ signal = "on_update",  fun = this.on_update  })
end

-- читаем глобальные параметры эффектов здоровья
local satiety_v = get_float("actor_script_condition", "satiety_v")
ASSERT(satiety_v, "ogse_actor_conditions_mgr: 'satiety_v' parameter not found!")
local light_hunger_limit = get_float("actor_script_condition", "light_hunger_limit")
ASSERT(light_hunger_limit, "ogse_actor_conditions_mgr: 'light_hunger_limit' parameter not found!")
local critical_hunger_limit = get_float("actor_script_condition", "critical_hunger_limit")
ASSERT(critical_hunger_limit, "ogse_actor_conditions_mgr: 'critical_hunger_limit' parameter not found!")
local satiety_power_factor = get_float("actor_script_condition", "satiety_power_factor")
ASSERT(satiety_power_factor, "ogse_actor_conditions_mgr: 'satiety_power_factor' parameter not found!")
local satiety_health_v_base = get_float("actor_script_condition", "satiety_health_v")
ASSERT(satiety_health_v_base, "ogse_actor_conditions_mgr: 'satiety_health_v' parameter not found!")
local satiety_health_factor = get_float("actor_script_condition", "satiety_health_factor")
ASSERT(satiety_health_factor, "ogse_actor_conditions_mgr: 'satiety_health_factor' parameter not found!")
local max_stand_power = get_float("actor_condition", "stand_power")
ASSERT(max_stand_power, "ogse_actor_conditions_mgr: 'stand_power' parameter not found!")
local satiety_k = max_stand_power * ( 1 - satiety_power_factor ) / light_hunger_limit
local engine_satiety_v = get_float("actor_condition", "satiety_v")
ASSERT(engine_satiety_v, "ogse_actor_conditions_mgr: 'actor_condition:engine_satiety_v' parameter not found!")
local engine_satiety_health_v = get_float("actor_condition", "satiety_health_v")
ASSERT(engine_satiety_health_v, "ogse_actor_conditions_mgr: 'actor_condition:satiety_health_v' parameter not found!")
local engine_satiety_power_v = get_float("actor_condition", "satiety_power_v")
ASSERT(engine_satiety_power_v, "ogse_actor_conditions_mgr: 'actor_condition:satiety_power_v' parameter not found!")
local sprint_koef = get_float( "actor", "sprint_koef" )
ASSERT(sprint_koef, "ogse_actor_conditions_mgr: 'actor:sprint_koef' parameter not found!")
local walk_accel = get_float( "actor", "walk_accel" )
ASSERT(walk_accel, "ogse_actor_conditions_mgr: 'actor:walk_accel' parameter not found!")
local min_walk_accel = 6
local def_jump_power = get_float( "actor_condition", "jump_power" )
ASSERT(def_jump_power, "ogse_actor_conditions_mgr: 'actor_condition:jump_power' parameter not found!")
local jump_speed = get_float( "actor", "jump_speed" )
ASSERT(jump_speed, "ogse_actor_conditions_mgr: 'actor:jump_speed' parameter not found!")
local run_coef = get_float("actor", "run_coef")
ASSERT(run_coef, "ogse_actor_conditions_mgr: 'actor:run_coef' parameter not found!")
local run_back_coef = get_float("actor", "run_back_coef")
ASSERT(run_back_coef, "ogse_actor_conditions_mgr: 'actor:run_back_coef' parameter not found!")

local pt, cam_inert, cur_cam_inert
function on_spawn()
  pt = { game.get_game_time():get() }
  cam_inert = get_con_float( "cam_inert" )
  cur_cam_inert = cam_inert
end

local cached_item_cond_effects = {}
local function get_item_cond_effect( item )
  local section = item:section()
  local ef = cached_item_cond_effects[ section ]
  if not ef then
    ef = {}
    ef.satiety_restore_speed		= get_float( section, "satiety_restore_speed",  0 )
    ef.health_restore_speed			= get_float( section, "health_restore_speed",   0 )
    ef.bleeding_restore_speed		= get_float( section, "bleeding_restore_speed", 0 )
    ef.power_restore_speed			= get_float( section, "power_restore_speed",    0 )
    ef.psy_health_restore_speed		= get_float( section, "psy_health_restore_speed", 0 )
--------Эффекты ношения экзоскелетов--------
	local exo_section = get_string(section, "exo_section", nil)
	if exo_section and sys_ini:line_exist("exo_section") then
		ef.jump_speed_dif			= get_float( exo_section, "jump_speed_dif", 0 )
		ef.sprint_factor_dif		= get_float( exo_section, "sprint_koef_dif", 0 )
		ef.run_factor_dif			= get_float( exo_section, "run_coef_dif", 0 )
		ef.run_back_factor_dif		= get_float( exo_section, "run_back_coef_dif", 0 )
	else
		ef.jump_speed_dif			= 0
		ef.sprint_factor_dif		= 0
		ef.run_factor_dif			= 0
		ef.run_back_factor_dif		= 0
	end
--------------------------------------------
    cached_item_cond_effects[ section ] = ef
  end
  return ef
end

function on_update()
  if device().precache_frame > 1
  or not ( db.actor and db.actor:alive() ) then return end

  local act = db.actor
  local previous_check_time = game.CTime()
  previous_check_time:set( unpack( pt ) )
  local current_time = game.get_game_time()
  local dt = current_time:diffSec( previous_check_time )
  if dt == 0 then return end
  pt = { current_time:get() }

  local ext = {
    --[ "alcohol_restore_speed"    ] = 0,
    --[ "bleeding_restore_speed"   ] = 0,
    --[ "health_restore_speed"     ] = 0,
    --[ "power_restore_speed"      ] = 0,
    --[ "psy_health_restore_speed" ] = 0,
    --[ "radiation_restore_speed"  ] = 0,
    --[ "satiety_restore_speed"    ] = 0,
	[ "sprint_factor" ]		= 0,
	[ "jump_speed" ]		= 0,
	[ "walk_accel" ]		= 0,
	[ "run_factor" ]		= 0,
	[ "run_back_factor" ]	= 0,
  }
  ogse_signals.get_mgr():call( "on_before_actor_conditions_update", ext )

  -- учитываем здесь естественное оголодание, а также
  -- движковое(обнулять его нельзя, на нем основан показ свойств
  -- артефактов)
  local cur_satiety_v = satiety_v + ( satiety_v * ( 1 - math.min( act.health, act.power ) ) )
  local satiety_custom_k = 1
  if act:is_actor_sprinting() or act:is_actor_climbing() or act:get_bleeding() > 0.1 then
    satiety_custom_k = 2
  end
  cur_satiety_v = cur_satiety_v * satiety_custom_k
  local summary_satiety_effect				= cur_satiety_v + engine_satiety_v -- + adjust_satiety_restore_speed( ext.satiety_restore_speed )
  local summary_health_effect				= satiety_health_v_base - engine_satiety_health_v -- + ext.health_restore_speed
  local summary_power_effect				= - engine_satiety_power_v -- + ext.power_restore_speed
  local summary_bleeding_restore_effect		= 0 --ext.bleeding_restore_speed
  local summary_psy_health_effect			= 0 --ext.psy_health_restore_speed
  --local summary_radiation_restore_effect	= ext.radiation_restore_speed
  --local summary_alcohol_effect			= ext.alcohol_restore_speed
  local summary_jump_speed					= jump_speed + ext.jump_speed
  local summary_sprint_factor				= sprint_koef + ext.sprint_factor
  local summary_run_factor					= run_coef + ext.run_factor
  local summary_run_back_factor				= run_back_coef + ext.run_back_factor
  local cur_jump_power						= def_jump_power
  local cur_walk_accel						= (walk_accel - min_walk_accel) + ext.walk_accel
  local new_cam_inert						= 0

  local satiety_restore_speed = adjust_satiety_restore_speed( inventory.on_belt_restore_speed( "satiety_restore_speed" ) )
  summary_satiety_effect    = summary_satiety_effect + satiety_restore_speed
  summary_psy_health_effect = summary_psy_health_effect + inventory.on_belt_restore_speed( "psy_health_restore_speed" )

  -- эффекты от брони
  local armor = act:get_current_outfit()
  if armor then
    local ef = get_item_cond_effect( armor )
    if ef then
      local satiety_restore_speed		= adjust_satiety_restore_speed( ef.satiety_restore_speed )
      summary_satiety_effect			= summary_satiety_effect + satiety_restore_speed
      summary_health_effect				= summary_health_effect + ef.health_restore_speed
      summary_power_effect				= summary_power_effect + ef.power_restore_speed
      summary_bleeding_restore_effect	= summary_bleeding_restore_effect + ef.bleeding_restore_speed
      summary_psy_health_effect			= summary_psy_health_effect + ef.psy_health_restore_speed
	  summary_jump_speed				= summary_jump_speed + ef.jump_speed_dif
	  summary_sprint_factor				= summary_sprint_factor + ef.sprint_factor_dif
	  summary_run_factor				= summary_run_factor + ef.run_factor_dif
	  summary_run_back_factor			= summary_run_back_factor + ef.run_back_factor_dif
    end
  end

  -- эффекты, связанные c голодом
  if act.satiety < light_hunger_limit then
    local sadd = ( light_hunger_limit - act.satiety ) * satiety_k
    summary_power_effect = summary_power_effect + sadd
  end
  if act.satiety < critical_hunger_limit then
    local hadd = ( act.satiety - critical_hunger_limit )
      * satiety_health_factor
    summary_health_effect = summary_health_effect + hadd
  end
  --TODO: учесть потерю сил и здоровья от недосыпа
  act.satiety = summary_satiety_effect * dt
  -- ограничиваем снизу. TODO: может учесть это в самом движке
  if act.satiety < 0 then act:set_actor_condition_float( nil, 0.0, 256 ) end

  act.health = summary_health_effect * dt

  if not ogse_sleep_mgr.is_sleep_active() then
    act.power = summary_power_effect * dt
  end

  if
    summary_bleeding_restore_effect > 0
    or summary_bleeding_restore_effect < 0
  then
    if act:get_bleeding() > 0 then
      act:heal_wounds( summary_bleeding_restore_effect * dt )
    end
  end

  --act.radiation = summary_radiation_restore_effect * dt

  if
    summary_psy_health_effect > 0
    or summary_psy_health_effect < 0
  then
    act.psy_health = summary_psy_health_effect * dt
  end

--[[
  if
    summary_alcohol_effect > 0
    or summary_alcohol_effect < 0
  then
    act.alcohol = summary_alcohol_effect * dt
  end
]]

  set_sprint_factor( summary_sprint_factor )

  set_run_factor(summary_run_factor)

  set_run_back_factor(summary_run_back_factor)

  if act.satiety < light_hunger_limit then
    cur_walk_accel = cur_walk_accel * ( act.satiety / light_hunger_limit )
  end
  if act.health < 0.9 then
    cur_walk_accel = cur_walk_accel * ( act.health / 0.9 )
  end
  if act.power < 0.7 then
    cur_walk_accel = cur_walk_accel * ( act.power / 0.7 )
    local power_inert = 1 - act.power / 0.7
    if power_inert > new_cam_inert then new_cam_inert = power_inert end
  end
  set_walk_accel( min_walk_accel + cur_walk_accel )
  if cur_walk_accel < 1 then
    set_jump_speed( 0 )
  else
    set_jump_speed( summary_jump_speed )
  end

  if act.satiety < light_hunger_limit then
    cur_jump_power = cur_jump_power + (
      ( 0.2 - cur_jump_power ) * ( 1 - ( act.satiety / light_hunger_limit ) )
    )
  end
  if act.health < 0.9 then
    cur_jump_power = cur_jump_power + (
      ( 0.2 - cur_jump_power ) * ( 1 - ( act.health / 0.9 ) )
    )
    if act.health < 0.8 then
      local health_inert = 0.8 - act.health
      if health_inert > new_cam_inert then new_cam_inert = health_inert end
    end
  end
  set_jump_power( cur_jump_power )

  if new_cam_inert > 0 then
	local min_cam_inert = math.max( 0.4, cam_inert + 0.1 )
	if min_cam_inert < 0.8 then
	  new_cam_inert = min_cam_inert + ( math.round( ( 0.8 - min_cam_inert ) * new_cam_inert * 100 ) / 100 )
	  if new_cam_inert ~= cur_cam_inert then
		--log3("--Change cam_inert = [%s]", new_cam_inert )
		cmd( "cam_inert", new_cam_inert )
		cur_cam_inert = new_cam_inert
	  end
	end
  elseif cur_cam_inert ~= cam_inert then
	--log3("--Change cam_inert = [%s]", cam_inert )
	cmd( "cam_inert", cam_inert )
	cur_cam_inert = cam_inert
  end

end

function adjust_satiety_restore_speed( v ) --Рассчёт параметров голода
  if db.actor:is_actor_sprinting() or db.actor:is_actor_climbing() then
    if v > 0 then
      v = v / 2
    elseif v < 0 then
      v = v * 2
    end
  end
  return v
end
