function attach(sm) -- для менеджера сигналов
	sm:subscribe({signal = "on_spawn",  fun = this.on_spawn})
	sm:subscribe({signal = "on_update", fun = this.on_update--[[, queued = true]]})
end

-- читаем глобальные параметры эффектов здоровья
local satiety_v = get_float("actor_script_condition", "satiety_v")
ASSERT(satiety_v, "ogse_actor_conditions_mgr: 'satiety_v' parameter not found!")
local light_hunger_limit = get_float("actor_script_condition", "light_hunger_limit")
ASSERT(light_hunger_limit, "ogse_actor_conditions_mgr: 'light_hunger_limit' parameter not found!")
local critical_hunger_limit = get_float("actor_script_condition", "critical_hunger_limit")
ASSERT(critical_hunger_limit, "ogse_actor_conditions_mgr: 'critical_hunger_limit' parameter not found!")
local satiety_power_factor = get_float("actor_script_condition", "satiety_power_factor")
ASSERT(satiety_power_factor, "ogse_actor_conditions_mgr: 'satiety_power_factor' parameter not found!")
local satiety_health_v_base = get_float("actor_script_condition", "satiety_health_v")
ASSERT(satiety_health_v_base, "ogse_actor_conditions_mgr: 'satiety_health_v' parameter not found!")
local satiety_health_factor = get_float("actor_script_condition", "satiety_health_factor")
ASSERT(satiety_health_factor, "ogse_actor_conditions_mgr: 'satiety_health_factor' parameter not found!")
local max_stand_power = get_float("actor_condition", "stand_power")
ASSERT(max_stand_power, "ogse_actor_conditions_mgr: 'stand_power' parameter not found!")
local satiety_k = max_stand_power * (1 - satiety_power_factor) / light_hunger_limit

local engine_satiety_v = get_float("actor_condition", "satiety_v")
ASSERT(engine_satiety_v, "ogse_actor_conditions_mgr: 'actor_condition:engine_satiety_v' parameter not found!")
local engine_satiety_health_v = get_float("actor_condition", "satiety_health_v")
ASSERT(engine_satiety_health_v, "ogse_actor_conditions_mgr: 'actor_condition:satiety_health_v' parameter not found!")
local engine_satiety_power_v = get_float("actor_condition", "satiety_power_v")
ASSERT(engine_satiety_power_v, "ogse_actor_conditions_mgr: 'actor_condition:satiety_power_v' parameter not found!")

--
local pt
function on_spawn()
	pt = {game.get_game_time():get()}
end
local cached_item_cond_effects = {}
local function get_item_cond_effect(item)
	--TODO: сделать получение эффекта непосредственно из объекта
	if item == nil or alife():object(item:id()) == nil then return end
	local section = item:section()
	local ef = cached_item_cond_effects[section]
	if not ef then
		ef = {}
		ef.satiety_restore_speed  = get_float(section, "satiety_restore_speed", 0)
		ef.health_restore_speed   = get_float(section, "health_restore_speed", 0)
		ef.bleeding_restore_speed = get_float(section, "bleeding_restore_speed", 0)
		ef.power_restore_speed    = get_float(section, "power_restore_speed", 0)
		cached_item_cond_effects[section] = ef
	end
	return ef
end

function on_update()
	if not (db.actor and db.actor:alive()) then return end
	--log3("%04d/%02d/%02d %02d:%02d:%02d.%03d", unpack(pt))
	local previous_check_time = game.CTime()
	previous_check_time:set(unpack(pt))
	local current_time = game.get_game_time()
	local dt = current_time:diffSec(previous_check_time)
	if dt == 0 then return end
	pt = {current_time:get()}
	local act = db.actor
	-- учитываем здесь естественное оголодание, а также движковое(обнулять его нельзя, на нем основан показ свойств артефактов)
	local summary_satiety_effect = satiety_v + engine_satiety_v
	local summary_health_effect = satiety_health_v_base - engine_satiety_health_v
	local summary_power_effect = - engine_satiety_power_v
	local summary_bleeding_restore_effect = 0
	-- неучтённые в движке эффекты от артефактов на поясе
	for i=0,act:belt_count()-1 do
		local item = act:item_on_belt(i)
		local ef = get_item_cond_effect(item)
		if ef then
			summary_satiety_effect = summary_satiety_effect + ef.satiety_restore_speed
		end
	end
	-- эффекты от брони
	local armor = db.actor:item_in_slot(6)
	if armor then
		local ef = get_item_cond_effect(armor)
		if ef then
			summary_satiety_effect = summary_satiety_effect + ef.satiety_restore_speed
			summary_health_effect = summary_health_effect + ef.health_restore_speed
			summary_power_effect = summary_power_effect + ef.power_restore_speed
			summary_bleeding_restore_effect = summary_bleeding_restore_effect + ef.bleeding_restore_speed
		end
	end
	-- эффекты, связанные c голодом
	if act.satiety < light_hunger_limit then
		local sadd = (light_hunger_limit - act.satiety) * satiety_k
		summary_power_effect = summary_power_effect + sadd
	end

	if act.satiety < critical_hunger_limit then
		local hadd = (act.satiety - critical_hunger_limit) * satiety_health_factor
		summary_health_effect = summary_health_effect + hadd
	end
	
	-- TODO: учесть потерю сил и здоровья от недосыпа
	--
	--TODO: оптимизировать вычисление суммарного эффекта, 
	-- сделать это только по факту изменения объектов на поясе
	act.satiety = summary_satiety_effect * dt
	-- ограничиваем снизу. TODO: может учесть это в самом движке
	if act.satiety < 0 then act:set_actor_condition_float(nil, 0.0, 256) end
	act.health = summary_health_effect * dt
	act.power = summary_power_effect * dt
	if act:get_bleeding() > 0.1 and summary_bleeding_restore_effect > 0.0 then
		act:heal_wounds(summary_bleeding_restore_effect * dt)
	end
	--if act.satiety < 0.1 then act.satiety = 1 end
end

