---------------------------------------------------------------------
class "se_car" (cse_alife_car)
--------------------
function se_car:__init (section) super (section)
	--log("_bp: set_car:__init")
	self.ini = nil
	self.spawner_present = false
	self.trunk = nil
end
--------------------
function se_car:can_switch_offline ()
	return cse_alife_car.can_switch_offline(self)
end
--------------------
function se_car:can_switch_online ()
	if self.ini == nil then
		self.ini = self:spawn_ini() 
		self.spawner_present = self.ini:section_exist("spawner")
	end

	if self.ini == nil or self.spawner_present == false then 
		return cse_alife_car.can_switch_online(self)
	end    
	return xr_spawner.check_spawn (self)
end    
--------------------
function se_car:on_spawn()
	cse_alife_car.on_spawn(self)

end
--------------------
function se_car:STATE_Write (packet)
	ogse_signals.get_mgr():call("se_car:STATE_Write_begin", packet, self.id)

	cse_alife_car.STATE_Write (self, packet)
	if self.id == 65535 then return end
	if self.trunk then
		packet:w_stringZ(self.trunk)
	end
end
--------------------
function se_car:on_unregister()
	ogse_signals.get_mgr():call("se_car:on_unregister", self.id)
end
--------------------
function se_car:STATE_Read (packet, size)
	cse_alife_car.STATE_Read (self, packet, size)
	if self.id == 65535 then return end
	if packet:r_eof() then return end
	
	self.trunk = packet:r_stringZ()
end
--------------------
function se_car:keep_saved_data_anyway()
   return true
end


--'Helicopter
class "se_heli" (cse_alife_helicopter)
--------------------
function se_heli:__init (section) super (section)
end
function se_heli:keep_saved_data_anyway()
	return true
end