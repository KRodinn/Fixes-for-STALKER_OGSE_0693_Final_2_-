--' Схема: детектор на опасную зону: граница уровня.
--' dead_zone.ppe

local start_time	= 0		--'Время, с которого начинается возрастание интенсивности
local max_time		= 100	--'Время, в которое интенсивность станет максимальной
local threshold		= 0.2	--'Порог, с которого начинается заражение
local idle_time		= 10	--'Время между хитами. В игровых секундах.

class "actor_detector"
function actor_detector:__init()
	self.init_time = -1
end
function actor_detector:actor_enter()
	--' Игрок покидает опасную территорию (входит в разрешенную границу уровня)
	self.init_time = -1
	level.remove_pp_effector(1001)
	xr_sound.set_actor_sound("")
	
	printf("LEVEL BORDER EXIT")
end
function actor_detector:actor_exit()
	--' Игрок входит на опасную территорию (покидает разрешенную границу уровня)
	self.init_time = game.get_game_time()
	
	level.add_pp_effector("dead_zone.ppe", 1001, true)
	level.set_pp_effector_factor(1001, 0.01)
	
	xr_sound.set_actor_sound("level_border_detector")
	xr_sound.set_actor_sound_factor(10)
	
	self.last_update_time = game.get_game_time()	
	
	printf("LEVEL BORDER ENTER")
end

function set_zombied()
--' -- log1("ZOMBIED 0A1")
	if db.actor and db.actor:alive() and db.actor.psy_health<0.2 then
			--' -- log1("ZOMBIED 0A")
			rnd = math.random(1, 3)
			if rnd == 1 then 
				--' -- log1("ZOMBIED 0B")
				dialogs.actor_set_zombied(actor, npc)
			end
			if rnd == 2 then 
				--' -- log1("ZOMBIED 0C")
				dialogs.actor_set_zombied(actor, npc)
			end
			if rnd == 3 then 
				--' -- log1("ZOMBIED 0D")
				db.actor:kill(db.actor)
			end
	end
end


function zombied_radiation_immunity(actor, npc)
--' -- log1("ZOMBIED 4A1")
	if db.actor and db.actor:alive() and db.actor.radiation>0.2 and db.actor.health < 0.05 then 
		--' -- log1("ZOMBIED 4A")
		db.actor.health = 0.1
	end
end

function zombied_psy_immunity(actor, npc)
--' -- log1("ZOMBIED 4B1")
	if db.actor and db.actor:alive() and db.actor.psy_health<0.25 then 
		--' -- log1("ZOMBIED 4B")
		db.actor.psy_health = 0.30
	end
end

function zombied_blood_immunity(actor, npc)
--' -- log1("ZOMBIED 4C1")
	if db.actor and db.actor:alive() and db.actor:get_bleeding()>0.1 then
		--' -- log1("ZOMBIED 4C")
		db.actor.health = 0.1
	end
end

function zombied_blood_immunity2(actor, npc)
--' -- log1("ZOMBIED 4D1")
	if db.actor and db.actor:alive() and db.actor:get_bleeding()>0.21 then
		--' -- log1("ZOMBIED 4D")
		db.actor.health = 0.25
	end
end

function zombied_blood_immunity3(actor, npc)
--' -- log1("ZOMBIED 4E1")
	if db.actor and db.actor:alive() and db.actor:get_bleeding()>0.3 then
		--' -- log1("ZOMBIED 4E")
		db.actor.health = 0.45
	end
end

function zombied_blood_immunity4(actor, npc)
	--' -- log1("ZOMBIED 4F1")
	if db.actor and db.actor:alive() and db.actor:get_bleeding()>0.18 and db.actor.health < 0.18  then
	--' -- log1("ZOMBIED 4F")
		db.actor.health = 0.55
	end
end

function zombied_blood_immunity5(actor, npc)
--' -- log1("ZOMBIED 4G1")
	if db.actor and db.actor:alive() and db.actor:get_bleeding()>0.25  then
		--' -- log1("ZOMBIED 4G")
		db.actor.health = 0.45
	end
end

function actor_detector:update()

	--' Зомбящие эффекты

	if db.actor:dont_has_info("actor_set_zombied") then
		--' -- log1("ZOMBIED 0")
		set_zombied()
	else
		--' -- log1("ZOMBIED 4") --' Повышенный иммунитет при зомбировании
		zombied_radiation_immunity()
		zombied_psy_immunity()	
		zombied_blood_immunity2()
		zombied_blood_immunity4()
	end	

	--' Апдейтим игрока и устанавливаем действия.
	if self.init_time == -1 then
		return
	end
	
	if game.get_game_time():diffSec(self.last_update_time) < idle_time then
		return
	end
	self.last_update_time = game.get_game_time()
	

	--' В зависимости от времени нахождения игрока внутри возрастает интенсивность.
	--' Интенсивность возрастает от 0 до 1. При достижении порога начинает хитовать радиация.
	local intence = math.min(1,math.max(0.01,game.get_game_time():diffSec(self.init_time)/(max_time - start_time)))
		
	level.set_pp_effector_factor(1001, intence, 0.3)
	xr_sound.set_actor_sound_factor(10 - intence*9)
	
	printf("INTENCE %s", intence)
	
	if intence > threshold then
		local h = hit()
		h.draftsman = db.actor
		h.type = hit.radiation
		h.power = 0.05
		db.actor:hit(h)	
	end
end
function actor_detector:save(packet)
	if self.init_time == -1 then
		packet:w_u8(0)
	else
		packet:w_u8(1)
		utils.w_CTime(packet, self.init_time)
		utils.w_CTime(packet, self.last_update_time)
	end	
end
function actor_detector:load(packet)
	local flag = packet:r_u8()
	if flag == 1 then
		--[[ --/>#~# убран эффект "остаточной" радиации
		self.init_time = utils.r_CTime(packet)
		self.last_update_time = utils.r_CTime(packet)
		--]]
		local tmp1 = utils.r_CTime(packet)
		local tmp2 = utils.r_CTime(packet)
		self.init_time = -1
		--/<
	else
		self.init_time = -1
	end
end