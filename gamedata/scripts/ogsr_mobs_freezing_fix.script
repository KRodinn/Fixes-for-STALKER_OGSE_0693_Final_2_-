-- -*- mode: lua; coding: windows-1251-dos -*-

--KRodin: Этот костыль фиксит зависших НПС и монстров.
--Если моб завис - выпихивает его в оффлайн и обратно.
--После этого мобы должны снова приходить в чувство.
--Подсмотрено у Dsh.

function attach( sm )
  sm:subscribe({ signal = "on_monster_spawn", fun = this.on_spawn })
  sm:subscribe({ signal = "on_monster_update", fun = this.on_update--[[, queued = true]] })
  sm:subscribe({ signal = "on_monster_death", fun = this.on_death })
  sm:subscribe({ signal = "on_monster_net_destroy", fun = this.on_death })
  sm:subscribe({ signal = "on_npc_spawn", fun = this.on_spawn })
  sm:subscribe({ signal = "on_npc_update", fun = this.on_update--[[, queued = true]] })
  sm:subscribe({ signal = "on_npc_death", fun = this.on_death })
  sm:subscribe({ signal = "on_npc_net_destroy", fun = this.on_death })
end


function on_spawn( obj, binder )
  if not obj:alive() then return end
  --
  local slot = {
    [ "signal" ] = "on_update",
    [ "self"   ] = obj,
    [ "fun"    ] = this.check_deadlock,
    [ "queued" ] = true,
  }
  binder[ script_name()..".subscribed" ] = slot
  ogse_signals.get_mgr():subscribe( slot )
end


function on_update( obj )
  local binder = obj:binded_object()
  binder[ script_name()..".last_monster_update" ] = time_global() + 10000
end


function on_death( obj )
  local binder     = obj:binded_object()
  local subscribed = binder[ script_name()..".subscribed" ]
  if subscribed then
    ogse_signals.get_mgr():unsubscribe( subscribed )
    binder[ script_name()..".subscribed" ] = nil
  end
end


function check_deadlock( obj )
  ogse_signals.get_mgr():reschedule( 1000 )
  local binder = obj:binded_object()
  local t = binder[ script_name()..".last_monster_update" ]
  if not t then return end
  local d = t - time_global()
  if d > 0 then
    if d > 1000 then
      ogse_signals.get_mgr():reschedule( d )
    end
  else
    log3(
      "!![%s]: bad mob [%s] detected: [%s] secs",
      script_name(), obj:name(), d / 1000
    )
    --
    amkii_equip.refit_npc( obj, obj:id() )
  end
end
