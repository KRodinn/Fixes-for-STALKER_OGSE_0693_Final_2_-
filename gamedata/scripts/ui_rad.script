-- -*- mode: lua; coding: windows-1251-dos -*-

local cfg = {
   ["ui_psy"] = {
      ["hud_back"]     = "hud_psy_back",
      ["hud_level"]    = "hud_psy_level",
      ["saved_aspect"] =  0,
      ["saved_width"]  = -1,
   },
	["ui_rad"] = {
		["hud_back"]     = "hud_rad_back",
		["hud_level"]    = "hud_rad_level",
		["saved_aspect"] =  0,
		["saved_width"]  = -1,
	}
}

function attach(sm)
	sm:subscribe({ signal = "on_update", fun = this.update })
end

function update()
	ogse_signals.get_mgr():reschedule(math.random(450, 550))
	--
	if sys_ini:section_exist( "ui_psy" ) then
		update_hud( "ui_psy", cfg.ui_psy, true, db.actor.psy_health )
	end
	--
	update_hud( "ui_rad", cfg.ui_rad, db.actor:item_in_slot(8), db.actor.radiation )
end

function update_hud( sect_name, params, bDetected, val )
	local hud = get_hud()
	if hud then
		local custom_static_rad_back = hud:GetCustomStatic( params.hud_back  )
		local custom_static_rad      = hud:GetCustomStatic( params.hud_level )
		local aspect = device().width / device().height
		if aspect ~= params.saved_aspect then
			--log3("~~Update ui rad! Aspect: [%s]", aspect)
			params.saved_aspect = aspect
			if custom_static_rad_back then
				hud:RemoveCustomStatic( params.hud_back  )
			end
			if custom_static_rad then
				hud:RemoveCustomStatic( params.hud_level )
			end
			custom_static_rad_back = nil
			custom_static_rad      = nil
		end
		if not bDetected then
			if custom_static_rad_back then
				hud:RemoveCustomStatic( params.hud_back  )
			end
			if custom_static_rad then
				hud:RemoveCustomStatic( params.hud_level )
			end
			return
		end

		if ( custom_static_rad_back == nil or custom_static_rad == nil ) then
			if is_16_9_mode() then	--Если широкий монитор:
				read_params( true,  sect_name, params )
			else					--Если квадратный монитор:
				read_params( false, sect_name, params )
			end

			if not custom_static_rad_back then
				hud:AddCustomStatic( params.hud_back, true )
				custom_static_rad_back = hud:GetCustomStatic( params.hud_back )
				if custom_static_rad_back and custom_static_rad_back.wnd then
					local wnd_ = custom_static_rad_back:wnd()
					if wnd_ then
						wnd_:SetWndPos( params.posx, params.posy )
						wnd_:SetHeight( params.height )
						wnd_:SetWidth( params.width )
					end
				end
			end
			if not custom_static_rad then
				hud:AddCustomStatic( params.hud_level, true )
				custom_static_rad = hud:GetCustomStatic( params.hud_level )
				if custom_static_rad and custom_static_rad.wnd then
					local wnd_ = custom_static_rad:wnd()
					if wnd_ then
						wnd_:SetWndPos( params.posx + params.p_dx, params.posy + params.p_dy )
						wnd_:SetHeight( params.p_height )
						wnd_:SetWidth( params.p_width )
					end
				end
			end
		end

		local new_width = val * params.p_width
		if params.saved_width ~= new_width then
			custom_static_rad:wnd():SetWidth( new_width )
		end
	end
end

function read_params( bWide, sect_name, params )
	local section = sect_name
	if bWide == true then section = sect_name .. "_wide" end
	if sys_ini:section_exist( section ) and not params[ section ] then
		params.posx   = get_u32( section, "x"      )
		params.posy   = get_u32( section, "y"      )
		params.width  = get_u32( section, "width"  )
		params.height = get_u32( section, "height" )
	end
	section = sect_name .. "_progress"
	if bWide == true then section = sect_name .. "_progress_wide" end
	if sys_ini:section_exist( section ) then
		params.p_dx     = get_u32( section, "dx"     )
		params.p_dy     = get_u32( section, "dy"     )
		params.p_width  = get_u32( section, "width"  )
		params.p_height = get_u32( section, "height" )
	end
	return params
end
