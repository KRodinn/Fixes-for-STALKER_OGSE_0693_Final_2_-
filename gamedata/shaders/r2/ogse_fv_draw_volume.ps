#include "common.h"

uniform sampler2D s_faces;
uniform sampler2D s_color;
uniform sampler2D s_tc;
uniform sampler3D s_noise;

uniform float4x4 m_v2w;

float4 main(p_screen _in):COLOR0
{
	float4 depth = {0.0, 0.0, 0.0, 0.0};

	// prepare depths for test
	depth = tex2D(s_faces, _in.tc0);
	depth.xy *= 200.f;
	float dep = get_depth(_in.tc0);//tex2D(s_position, _in.tc0).z;
	
	// prepare colors
	float4 fog_color = tex2D(s_color, _in.tc0);
	float4 model_coord = tex2D(s_tc, _in.tc0);

/*	float3 pos = get_xyz_position(_in.tc0);
	float4 w_pos = mul(m_v2w, float4(pos.xyz, 1.0));*/
	// calculate weight
	// I. cam outside object
	// 1) global depth < front depth				{don't fog at all	weight = 0}
	// 2) back_depth > global depth > front depth	{partially fog		weight = (global depth - front depth)/max_density}
	// 3) global depth > back depth					{full fog			weight = (back depth - front depth)/max_density}
	// II. cam inside object, front depth == 0
	// 1) back_depth > global depth					{partially fog		weight = (global depth - front depth)/max_density}
	// 2) global depth > back depth					{full fog			weight = (back depth - front depth)/max_density}
	float weight = 0;																			// 1

	#define fog_back float(depth.x)
	#define fog_front float(depth.y)
	#define scene_depth float(dep)
	#define fog_density float(depth.z)
//	#define cam_pos float3(depth.w,fog_color.w,model_coord.w)

	scene_depth += 800*(step(scene_depth, 0.001));

	weight = clamp( scene_depth, 0.0, fog_back ) - fog_front;

/*	float3 back_coord = lerp(w_pos.xyz, model_coord.xyz, step(fog_back, pos.z/200));

//	float3 back_face_pos = get_world_position(_in.tc0, fog_back).xyz;

//	return float4(model_coord.xyz, 1);

	float3 dir = back_coord - eye_position;
/*	float max_l = length(dir);
	float l = 0;
	dir = normalize(dir);
	dir *= 2;
	float4 tc = float4(frac(eye_position.xyz), 10);
	float a = 0.0;
	while (l < max_l)
	{
		float4 tc1 = tc.xyzw;
		tc1.xyzw *= 0.1;
//		float4 tc2 = tc.yzxw;
//		tc2.xy *= 4;
		float ns = tex3Dlod(s_noise, tc1).x;
		a += ns;
//		ns = tex3Dlod(s_noise, tc2).x;
//		a += ns;
		tc.xyz += dir;
		l += 1;
	};
	a *= 0.01;
	a = saturate(a);*/

	// returning
	return float4(fog_color.xyz,saturate(weight * fog_density /* * a * depth.w*/));
};